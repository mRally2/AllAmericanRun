<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="38">
  <CheatEntries>
    <CheatEntry>
      <ID>866</ID>
      <Description>"ALL AMERICAN RUN"</Description>
      <Options moActivateChildrenAsWell="1"/>
      <LastState Value="" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
      <Hotkeys>
        <Hotkey>
          <Action>Activate</Action>
          <Keys>
            <Key>115</Key>
          </Keys>
          <ID>0</ID>
        </Hotkey>
      </Hotkeys>
      <CheatEntries>
        <CheatEntry>
          <ID>786</ID>
          <Description>"Stage 1"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()
function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end
function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end
[ENABLE]
print "All American Run Tier 1 Cars Swap timer enabled"
function Stage1()
    if readPointer("[[[[027A4F60]+14]+68]+10]+4") ~= nil then
        local vehicles = {}
        --TIER 1
        --CHE_CAM_SS_67_PP_STOCK_1
        vehicles[1] = 1522441908
        vehicles[2] = 150155535
        vehicles[3] = 4047731096
        vehicles[4] = 3603434424
        vehicles[5] = 933904526
        vehicles[6] = 1760866290
        vehicles[7] = 1935511816
        vehicles[8] = 3986269571
        --CHE_CAM_SS_67_PP1V1
        vehicles[9] = AOBtoDEC("3E B1 A7 B7")
        vehicles[10] = AOBtoDEC("83 B2 27 D6")
        vehicles[11] = AOBtoDEC("5E EF B4 C2")
        vehicles[12] = AOBtoDEC("F8 86 F5 9E")
        vehicles[13] = AOBtoDEC("61 44 58 2B")
        vehicles[14] = AOBtoDEC("DB 39 51 BA")
        vehicles[15] = AOBtoDEC("56 5D 05 9E")
        vehicles[16] = AOBtoDEC("66 DD B9 46")
        --CHE_CAM_SS_67_PP2V1
        vehicles[17] = AOBtoDEC("C4 3A 95 11")
        vehicles[18] = AOBtoDEC("BE 4E E8 76")
        vehicles[19] = AOBtoDEC("34 AD D8 EC")
        vehicles[20] = AOBtoDEC("43 A0 92 5E")
        vehicles[21] = AOBtoDEC("E4 9B 7D 21")
        vehicles[22] = AOBtoDEC("27 98 19 DD")
        vehicles[23] = AOBtoDEC("CF 88 F8 68")
        vehicles[24] = AOBtoDEC("1D 35 B4 12")
        --CHE_EL_CAM_70_PP_STOCK_1
        vehicles[25] = 4152999272
        vehicles[26] = 2839316226
        vehicles[27] = 850809204
        vehicles[28] = 1507013332
        vehicles[29] = 2744598914
        vehicles[30] = 874261196
        vehicles[31] = 1489277057
        vehicles[32] = 3963367876
        --CHE_EL_CAM_70_PP1V1
        vehicles[33] = AOBtoDEC("3F 10 66 E7")
        vehicles[34] = AOBtoDEC("8A 99 3A 6F")
        vehicles[35] = AOBtoDEC("81 56 76 1A")
        vehicles[36] = AOBtoDEC("FC A1 4E AF")
        vehicles[37] = AOBtoDEC("9B 56 3D 30")
        vehicles[38] = AOBtoDEC("46 3A 3A E4")
        vehicles[39] = AOBtoDEC("96 18 B9 72")
        vehicles[40] = AOBtoDEC("C5 23 54 69")
        --CHE_EL_CAM_70_PP2V1
        vehicles[41] = AOBtoDEC("0D BC 59 E7")
        vehicles[42] = AOBtoDEC("FF A5 3E 6F")
        vehicles[43] = AOBtoDEC("DE 72 79 1A")
        vehicles[44] = AOBtoDEC("B3 92 3E AF")
        vehicles[45] = AOBtoDEC("E4 24 66 3D")
        vehicles[46] = AOBtoDEC("57 45 24 E4")
        vehicles[47] = AOBtoDEC("41 C5 C4 72")
        vehicles[48] = AOBtoDEC("FF 43 48 69")
        --DOD_CHA_RT_71_PP_STOCK_1
        vehicles[49] = 658081404
        vehicles[50] = 353759425
        vehicles[51] = 897078296
        vehicles[52] = 904978235
        vehicles[53] = 1838233732
        vehicles[54] = 2193678947
        vehicles[55] = 1587191578
        vehicles[56] = 3371414360
        --DOD_CHA_RT_71_PP1V1
        vehicles[57] = AOBtoDEC("90 55 54 DB")
        vehicles[58] = AOBtoDEC("2C 8B A2 4A")
        vehicles[59] = AOBtoDEC("47 44 82 E8")
        vehicles[60] = AOBtoDEC("2C 8F 66 3F")
        vehicles[61] = AOBtoDEC("F0 27 43 C5")
        vehicles[62] = AOBtoDEC("21 BF CF 3C")
        vehicles[63] = AOBtoDEC("A9 58 13 9A")
        vehicles[64] = AOBtoDEC("BE 09 94 E7")
        --DOD_CHA_RT_71_PP2V1
        vehicles[65] = AOBtoDEC("67 A2 2D FB")
        vehicles[66] = AOBtoDEC("55 35 6F 7F")
        vehicles[67] = AOBtoDEC("97 30 AC D7")
        vehicles[68] = AOBtoDEC("6A 27 5B 0F")
        vehicles[69] = AOBtoDEC("BD DF FF 82")
        vehicles[70] = AOBtoDEC("D8 6E 35 6E")
        vehicles[71] = AOBtoDEC("2C 7F D2 AC")
        vehicles[72] = AOBtoDEC("43 0E AE B5")
        --FOR_MUS_302_69_PP_STOCK_1
        vehicles[73] = 1500183094
        vehicles[74] = 162166122
        vehicles[75] = 161538668
        vehicles[76] = 2191334224
        vehicles[77] = 3348852928
        vehicles[78] = 2138722167
        vehicles[79] = 3095976600
        vehicles[80] = 3713352339
        --FOR_MUS_302_69_PP1V1
        vehicles[81] = AOBtoDEC("67 42 63 3F")
        vehicles[82] = AOBtoDEC("08 37 D6 22")
        vehicles[83] = AOBtoDEC("D0 6B 43 26")
        vehicles[84] = AOBtoDEC("22 0C 9E 71")
        vehicles[85] = AOBtoDEC("F2 1E F2 65")
        vehicles[86] = AOBtoDEC("7D F7 A5 68")
        vehicles[87] = AOBtoDEC("6E 7F 78 56")
        vehicles[88] = AOBtoDEC("0A 74 5C E8")
        --FOR_MUS_302_69_PP2V1
        vehicles[89] = AOBtoDEC("A4 66 46 D5")
        vehicles[90] = AOBtoDEC("63 EB 74 C3")
        vehicles[91] = AOBtoDEC("03 46 F3 B1")
        vehicles[92] = AOBtoDEC("49 1D 02 9B")
        vehicles[93] = AOBtoDEC("30 DA C8 E3")
        vehicles[94] = AOBtoDEC("39 7D 83 76")
        vehicles[95] = AOBtoDEC("3E 2B 6E 55")
        vehicles[96] = AOBtoDEC("4E 9C 95 D9")
        --PON_FIR_STK_78_PP_STOCK_1
        vehicles[97] = 3681840500
        vehicles[98] = 3949993724
        vehicles[99] = 3350848715
        vehicles[100] = 2691382565
        vehicles[101] = 3379929237
        vehicles[102] = 2618823770
        vehicles[103] = 1034103769
        vehicles[104] = 4167471778
        --PON_FIR_STK_78_PP1V1
        vehicles[105] = AOBtoDEC("D9 57 CE C1")
        vehicles[106] = AOBtoDEC("E3 A5 8B AF")
        vehicles[107] = AOBtoDEC("FC DD D6 6D")
        vehicles[108] = AOBtoDEC("68 9E 4E 4E")
        vehicles[109] = AOBtoDEC("6A B0 D3 AC")
        vehicles[110] = AOBtoDEC("5C 6F 62 F7")
        vehicles[111] = AOBtoDEC("B5 FD 27 E4")
        vehicles[112] = AOBtoDEC("60 BA E2 95")
        --PON_FIR_STK_78_PP2V1
        vehicles[113] = AOBtoDEC("3D A5 9F 52")
        vehicles[114] = AOBtoDEC("AB 66 E3 AC")
        vehicles[115] = AOBtoDEC("5D 34 27 0C")
        vehicles[116] = AOBtoDEC("99 C1 3A 33")
        vehicles[117] = AOBtoDEC("8F FD 4E 32")
        vehicles[118] = AOBtoDEC("D9 46 22 B8")
        vehicles[119] = AOBtoDEC("0A DB AA E3")
        vehicles[120] = AOBtoDEC("1E 46 06 72")
        --TIER 2
        --DOD_CHA_SRT_08_PP_STOCK_1
        vehicles[121] = AOBtoDEC("4A AD 17 C0")
        vehicles[122] = AOBtoDEC("E5 6D BD 7B")
        vehicles[123] = AOBtoDEC("76 AB F5 92")
        vehicles[124] = AOBtoDEC("81 BE 89 DE")
        vehicles[125] = AOBtoDEC("61 B8 B0 EF")
        vehicles[126] = AOBtoDEC("D5 F9 94 4B")
        vehicles[127] = AOBtoDEC("1A 80 8D 6A")
        vehicles[128] = AOBtoDEC("50 AB AA 20")
        --DOD_CHA_SRT_08_PP1V1
        vehicles[129] = AOBtoDEC("16 CE F0 59")
        vehicles[130] = AOBtoDEC("9F D0 BB 96")
        vehicles[131] = AOBtoDEC("F1 7A 45 BD")
        vehicles[132] = AOBtoDEC("35 4D 59 F4")
        vehicles[133] = AOBtoDEC("61 06 5C 40")
        vehicles[134] = AOBtoDEC("EC 7B C1 1F")
        vehicles[135] = AOBtoDEC("E8 06 80 9F")
        vehicles[136] = AOBtoDEC("DD 6E F5 38")
        --DOD_CHA_SRT_08_PP2V1
        vehicles[137] = AOBtoDEC("F2 69 0A 79")
        vehicles[138] = AOBtoDEC("EB 26 0C CB")
        vehicles[139] = AOBtoDEC("56 AB 19 D2")
        vehicles[140] = AOBtoDEC("E1 7D 86 5F")
        vehicles[141] = AOBtoDEC("F0 6F 40 4E")
        vehicles[142] = AOBtoDEC("3B 36 17 0B")
        vehicles[143] = AOBtoDEC("50 03 F5 3E")
        vehicles[144] = AOBtoDEC("7E EF 10 EB")
        --DOD_CHA_SRT_08_PP3V1
        vehicles[145] = AOBtoDEC("00 94 E9 DD")
        vehicles[146] = AOBtoDEC("1A FE 5B A8")
        vehicles[147] = AOBtoDEC("2B 46 75 02")
        vehicles[148] = AOBtoDEC("1A F1 29 A4")
        vehicles[149] = AOBtoDEC("7C EC E7 C8")
        vehicles[150] = AOBtoDEC("0C C2 2A F0")
        vehicles[151] = AOBtoDEC("9A 13 B5 1F")
        vehicles[152] = AOBtoDEC("D4 FE 56 8B")
        --FOR_MUS_BOS_12_PP_STOCK_1
        vehicles[153] = AOBtoDEC("34 44 7D 5D")
        vehicles[154] = AOBtoDEC("B3 80 3F A5")
        vehicles[155] = AOBtoDEC("61 8D E8 B2")
        vehicles[156] = AOBtoDEC("6D 9F E2 93")
        vehicles[157] = AOBtoDEC("B4 BF CA 46")
        vehicles[158] = AOBtoDEC("C6 9F 57 10")
        vehicles[159] = AOBtoDEC("2F 86 0A F2")
        vehicles[160] = AOBtoDEC("73 62 4D E8")
        --FOR_MUS_BOS_12_PP1V1
        vehicles[161] = AOBtoDEC("56 CB 18 E0")
        vehicles[162] = AOBtoDEC("4D DB C2 DD")
        vehicles[163] = AOBtoDEC("40 A4 32 8E")
        vehicles[164] = AOBtoDEC("DA AD 64 08")
        vehicles[165] = AOBtoDEC("71 3A 05 4E")
        vehicles[166] = AOBtoDEC("84 55 D3 48")
        vehicles[167] = AOBtoDEC("7C 4A 30 C1")
        vehicles[168] = AOBtoDEC("63 79 CB DA")
        --FOR_MUS_BOS_12_PP2V1
        vehicles[169] = AOBtoDEC("27 D9 F0 B4")
        vehicles[170] = AOBtoDEC("D2 FF 56 12")
        vehicles[171] = AOBtoDEC("51 08 7D 09")
        vehicles[172] = AOBtoDEC("5B 7D 82 EE")
        vehicles[173] = AOBtoDEC("72 D3 98 A3")
        vehicles[174] = AOBtoDEC("2F FC 86 D4")
        vehicles[175] = AOBtoDEC("2E 39 73 93")
        vehicles[176] = AOBtoDEC("51 CA 90 B7")
        --FOR_MUS_BOS_12_PP3V1
        vehicles[177] = AOBtoDEC("9D FE 9C 9F")
        vehicles[178] = AOBtoDEC("98 E4 E0 C7")
        vehicles[179] = AOBtoDEC("02 3E 51 9A")
        vehicles[180] = AOBtoDEC("86 7C 04 A7")
        vehicles[181] = AOBtoDEC("B0 02 1B EA")
        vehicles[182] = AOBtoDEC("B7 E3 6B CE")
        vehicles[183] = AOBtoDEC("26 24 8D 63")
        vehicles[184] = AOBtoDEC("29 37 B5 05")
        --FOR_MUS_RTR_12_PP_STOCK_1
        vehicles[185] = AOBtoDEC("7B 8D C8 B0")
        vehicles[186] = AOBtoDEC("05 E8 4E 4E")
        vehicles[187] = AOBtoDEC("47 B2 2F 7A")
        vehicles[188] = AOBtoDEC("F9 1B 81 A2")
        vehicles[189] = AOBtoDEC("60 27 E0 D3")
        vehicles[190] = AOBtoDEC("AB AE 84 0A")
        vehicles[191] = AOBtoDEC("DC 9E 80 ED")
        vehicles[192] = AOBtoDEC("19 D5 D9 79")
        --FOR_MUS_RTR_12_PP1V1
        vehicles[193] = AOBtoDEC("F9 8B EC 3F")
        --TIER 3
        --CHE_CAM_ZL1_13_PP_STOCK_1
        vehicles[194] = AOBtoDEC("ED E0 00 CF")
        vehicles[195] = AOBtoDEC("7C AC E6 B1")
        vehicles[196] = AOBtoDEC("E9 F2 0C B5")
        vehicles[197] = AOBtoDEC("BB 67 9C 5E")
        vehicles[198] = AOBtoDEC("1B DE 29 4F")
        vehicles[199] = AOBtoDEC("4E B0 D9 E6")
        vehicles[200] = AOBtoDEC("37 B0 8C C4")
        vehicles[201] = AOBtoDEC("A0 73 A8 70")
        --CHE_CAM_ZL1_13_PP1V1
        vehicles[202] = AOBtoDEC("D5 D6 A0 A9")
        vehicles[203] = AOBtoDEC("07 61 E0 24")
        vehicles[204] = AOBtoDEC("D1 92 08 C0")
        vehicles[205] = AOBtoDEC("AD 46 8A 28")
        vehicles[206] = AOBtoDEC("D0 42 EE BE")
        vehicles[207] = AOBtoDEC("C5 A4 7A 1B")
        vehicles[208] = AOBtoDEC("8D 2E FA 87")
        vehicles[209] = AOBtoDEC("62 44 10 EB")
        --CHE_CAM_ZL1_13_PP2V1
        vehicles[210] = AOBtoDEC("87 AF 5F 8D")
        vehicles[211] = AOBtoDEC("EE 59 1A 5C")
        vehicles[212] = AOBtoDEC("00 08 01 A4")
        vehicles[213] = AOBtoDEC("51 82 F9 B0")
        vehicles[214] = AOBtoDEC("18 C7 81 50")
        vehicles[215] = AOBtoDEC("8C A0 8F 3F")
        vehicles[216] = AOBtoDEC("99 6D C8 07")
        vehicles[217] = AOBtoDEC("A2 44 4A 05")
        --CHE_CAM_ZL1_13_PP3V1
        vehicles[218] = AOBtoDEC("11 BB FF CE")
        vehicles[219] = AOBtoDEC("49 D2 D0 DE")
        vehicles[220] = AOBtoDEC("F7 7B C0 69")
        vehicles[221] = AOBtoDEC("05 83 41 BF")
        vehicles[222] = AOBtoDEC("38 8D 71 27")
        vehicles[223] = AOBtoDEC("B5 F0 2D B1")
        vehicles[224] = AOBtoDEC("8C 0A 59 09")
        vehicles[225] = AOBtoDEC("0C 46 37 3B")
        --SHE_MUS_SNK_12_PP_STOCK_1
        vehicles[226] = AOBtoDEC("67 53 06 F1")
        vehicles[227] = AOBtoDEC("36 9E D3 EA")
        vehicles[228] = AOBtoDEC("33 73 21 F8")
        vehicles[229] = AOBtoDEC("AB B3 C2 AC")
        vehicles[230] = AOBtoDEC("61 40 D8 7A")
        vehicles[231] = AOBtoDEC("FC 0E 3F D2")
        vehicles[232] = AOBtoDEC("36 A8 21 9F")
        vehicles[233] = AOBtoDEC("52 CD 96 D1")
        --SHE_MUS_SNK_12_PP1V1
        vehicles[234] = AOBtoDEC("E5 72 4B 6D")
        vehicles[235] = AOBtoDEC("1C 33 D8 46")
        vehicles[236] = AOBtoDEC("D1 0B 91 A2")
        vehicles[237] = AOBtoDEC("50 CD 86 BB")
        vehicles[238] = AOBtoDEC("1A 42 8F 27")
        vehicles[239] = AOBtoDEC("5D EB F6 4C")
        vehicles[240] = AOBtoDEC("29 5D 72 71")
        vehicles[241] = AOBtoDEC("A1 B7 55 79")
        --SHE_MUS_SNK_12_PP2V1
        vehicles[242] = AOBtoDEC("97 15 0C 2A")
        vehicles[243] = AOBtoDEC("C5 C7 F8 AC")
        vehicles[243] = AOBtoDEC("3E D8 59 83")
        vehicles[244] = AOBtoDEC("25 3E 2B 6B")
        vehicles[245] = AOBtoDEC("12 B8 45 49")
        vehicles[246] = AOBtoDEC("40 2F CB 75")
        vehicles[247] = AOBtoDEC("2F 6F DD 35")
        vehicles[248] = AOBtoDEC("67 55 2D 86")
        --SHE_MUS_SNK_12_PP3V1
        vehicles[249] = AOBtoDEC("C0 D5 BC 24")
        vehicles[250] = AOBtoDEC("68 E7 53 6E")
        vehicles[251] = AOBtoDEC("A1 87 9B 7F")
        vehicles[252] = AOBtoDEC("08 81 F4 0C")
        vehicles[253] = AOBtoDEC("EE D2 B4 81")
        vehicles[254] = AOBtoDEC("25 CD 21 BD")
        vehicles[255] = AOBtoDEC("5A 60 C9 0C")
        vehicles[256] = AOBtoDEC("52 59 00 CD")
        --SHE_DAY_COU_65_PP_STOCK_1
        vehicles[257] = 4152129083
        vehicles[258] = 3871257759
        vehicles[259] = 3289542481
        vehicles[260] = 2461231717
        vehicles[261] = 881791887
        vehicles[262] = 878544792
        vehicles[263] = 2902527303
        vehicles[264] = 1636074729
        --SHE_DAY_COU_65_PP1V1
        vehicles[265] = 1241611741
        vehicles[266] = 2683772338
        vehicles[267] = 518514680
        vehicles[268] = 3472854976
        vehicles[269] = 3523685951
        vehicles[270] = 3629261332
        vehicles[271] = 3439662912
        vehicles[272] = 2666964101
        --SHE_DAY_COU_65_PP2V1
        vehicles[273] = 2996645409
        vehicles[274] = 3314765652
        vehicles[275] = 259914488
        vehicles[276] = 1295232418
        vehicles[277] = 974990480
        vehicles[278] = 2131311971
        vehicles[279] = 1205195321
        vehicles[280] = 3631894439
        --TIER 4
        --CHE_CAM_SS_67_NFS_E
        vehicles[281] = 764119014
        --CHE_EL_CAM_70_NFS_E
        vehicles[282] = 3006189287
        --CHE_EL_CAM_70_PP_RIVAL_1
        vehicles[283] = AOBtoDEC("9C B4 8C 1D")
        --CHE_EL_CAM_70_PP_RIVAL_2
        vehicles[284] = AOBtoDEC("13 8C FE 5C")
        --CHE_EL_CAM_70_PP_RIVAL_3
        vehicles[285] = AOBtoDEC("7A AE 04 62")
        --CHE_CAM_ZL1_13_PP_RUN
        vehicles[286] = AOBtoDEC("8D 0F C1 88")
        --CHE_VET_CBN_10_PP_STOCK_1
        vehicles[287] = AOBtoDEC("9A 39 BD AC")
        vehicles[288] = AOBtoDEC("D1 55 2E 59")
        vehicles[289] = AOBtoDEC("5F FC C5 61")
        vehicles[290] = AOBtoDEC("44 C1 87 1F")
        vehicles[291] = AOBtoDEC("58 75 9B 67")
        vehicles[292] = AOBtoDEC("3C 35 AB D5")
        vehicles[293] = AOBtoDEC("03 7E D7 4B")
        vehicles[294] = AOBtoDEC("EC 66 6D F8")
        --CHE_VET_CBN_10_PP1V1
        vehicles[295] = AOBtoDEC("FE A3 3A 41")
        vehicles[296] = AOBtoDEC("9D 9F 6C A7")
        vehicles[297] = AOBtoDEC("CC DA A3 64")
        vehicles[298] = AOBtoDEC("44 0B 4C 1D")
        vehicles[299] = AOBtoDEC("B4 CB F4 C5")
        vehicles[300] = AOBtoDEC("F6 06 10 9C")
        vehicles[301] = AOBtoDEC("BA 09 B1 91")
        vehicles[302] = AOBtoDEC("9B 08 4D 34")
        --CHE_VET_CBN_10_PP2V1
        vehicles[303] = AOBtoDEC("F0 CA A4 26")
        vehicles[304] = AOBtoDEC("9B 90 1C C4")
        vehicles[305] = AOBtoDEC("30 4B A7 0D")
        vehicles[306] = AOBtoDEC("E2 3E E5 3C")
        vehicles[307] = AOBtoDEC("94 31 4A 55")
        vehicles[308] = AOBtoDEC("95 9E EF 95")
        vehicles[309] = AOBtoDEC("CA 69 A7 01")
        vehicles[310] = AOBtoDEC("2C 00 F7 C8")
        --CHE_VET_CBN_10_PP3V1
        vehicles[311] = AOBtoDEC("1E 43 48 C7")
        vehicles[312] = AOBtoDEC("98 FD 03 54")
        vehicles[313] = AOBtoDEC("97 3A 8D D8")
        vehicles[314] = AOBtoDEC("C3 20 2D 57")
        vehicles[315] = AOBtoDEC("3D BD 48 79")
        vehicles[316] = AOBtoDEC("59 10 4F 59")
        vehicles[317] = AOBtoDEC("3C 38 A7 79")
        vehicles[318] = AOBtoDEC("C4 4C 22 5A")
        --CHE_VET_CBN_10_PRESALE_1
        vehicles[319] = AOBtoDEC("0D 9E 48 57")
        --CHE_VET_CBN_10_PRESALE_1
        vehicles[320] = AOBtoDEC("B6 EE F8 CC")
        --DOD_CHA_RT_71_NFS_E
        vehicles[321] = 531246253
        --DOD_CHA_SRT_08_ADSALES_1
        vehicles[322] = AOBtoDEC("6E 69 6F 28")
        --DOD_CHA_SRT_08_NFS_E
        vehicles[323] = AOBtoDEC("63 8D 8E CC")
        --FOR_GT_STK_06_PP_STOCK_1
        vehicles[324] = AOBtoDEC("44 25 C5 CF")
        vehicles[325] = AOBtoDEC("79 AC 46 BF")
        vehicles[326] = AOBtoDEC("F9 54 F1 D9")
        vehicles[327] = AOBtoDEC("7A BD 7F 3C")
        vehicles[328] = AOBtoDEC("DA 59 8D 45")
        vehicles[329] = AOBtoDEC("7C AF EE 40")
        vehicles[330] = AOBtoDEC("48 04 24 58")
        vehicles[331] = AOBtoDEC("A8 35 2E 8C")
        --FOR_GT_STK_06_PP1V1
        vehicles[332] = AOBtoDEC("FD BD B8 C7")
        vehicles[333] = AOBtoDEC("26 76 0C 46")
        vehicles[334] = AOBtoDEC("71 85 12 AF")
        vehicles[335] = AOBtoDEC("4E 55 A2 06")
        vehicles[336] = AOBtoDEC("9D 63 88 EF")
        vehicles[337] = AOBtoDEC("70 CD F4 9C")
        vehicles[338] = AOBtoDEC("2B 3D 2B A2")
        vehicles[339] = AOBtoDEC("3C 8A 25 C7")
        --FOR_GT_STK_06_PP2V1
        vehicles[340] = AOBtoDEC("E5 38 A1 26")
        vehicles[341] = AOBtoDEC("47 98 2D D1")
        vehicles[342] = AOBtoDEC("2B 05 9C 1E")
        vehicles[343] = AOBtoDEC("45 B6 ED 8B")
        vehicles[344] = AOBtoDEC("60 80 BF 37")
        vehicles[345] = AOBtoDEC("BD EC CA 09")
        vehicles[346] = AOBtoDEC("45 44 C5 64")
        vehicles[347] = AOBtoDEC("BB CA F1 80")
        --FOR_GT_STK_06_ADSALES_1
        vehicles[348] = AOBtoDEC("9C 25 95 84")
        --FOR_MUS_BOS_12_PRESALE_1
        vehicles[349] = AOBtoDEC("C6 24 4B F5")
        --FOR_MUS_RTR_12_NFS_E
        vehicles[350] = AOBtoDEC("89 73 1A C2")
        --FOR_RTR_X_69_PP1V1
        vehicles[351] = AOBtoDEC("0B 36 E5 FF")
        --FOR_MUS_302_69_ADSALES_1
        vehicles[352] = 268766097
        --FOR_MUS_302_69_NFS_E
        vehicles[353] = 2902452387
        --SHE_DAY_COU_65_PP_RUN
        vehicles[354] = 3604153451
        --SHE_MUS_SNK_12_PP_RUN
        vehicles[355] = AOBtoDEC("52 7F 68 29")
        --PON_FIR_STK_78_NFS_E
        vehicles[356] = AOBtoDEC("41 E9 F9 A9")

        --CUSTOM MADE BY _mRally2
        --CHE_EL_CAM_70_AI_T4
        vehicles[357] = 2053301536
        vehicles[358] = 96789362
        vehicles[359] = 3393955391
        vehicles[360] = 3643384219
        --CHE_CAM_SS_67_AI_T4
        vehicles[361] = 2789574667
        vehicles[362] = 2695468121
        vehicles[363] = 2955493261
        vehicles[364] = 1157837898
        --CHE_CAM_ZL1_13_AI
        vehicles[365] = AOBtoDEC("8E A6 E6 19")
        vehicles[366] = AOBtoDEC("AC 64 BB 73")
        vehicles[367] = AOBtoDEC("A2 4A 7A 3C")
        vehicles[368] = AOBtoDEC("D1 AD 85 72")
        vehicles[369] = AOBtoDEC("A0 6C BE 3D")
        --CHE_VET_CBN_10_AI
        vehicles[370] = AOBtoDEC("DB 88 9A BD")
        vehicles[371] = AOBtoDEC("F8 58 2E 03")
        vehicles[372] = AOBtoDEC("FA 8F 9C F0")
        --DOD_CHA_RT_71_AI_T4
        vehicles[373] = 132446852
        vehicles[374] = 1161287153
        vehicles[375] = 3481124691
        vehicles[376] = 1350671612
        --DOD_CHA_SRT_08_AI
        vehicles[377] = AOBtoDEC("34 D4 8E 1A")
        vehicles[378] = AOBtoDEC("80 F6 85 A3")
        vehicles[379] = AOBtoDEC("06 74 91 C5")
        vehicles[380] = AOBtoDEC("77 C6 0E 11")
        --FOR_GT_STK_06_AI
        vehicles[381] = AOBtoDEC("4A 82 88 AD")
        vehicles[382] = AOBtoDEC("5F 98 D4 C2")
        vehicles[383] = AOBtoDEC("37 0D FC 19")
        --FOR_MUS_BOS_12_AI
        vehicles[384] = AOBtoDEC("70 E1 83 B5")
        vehicles[385] = AOBtoDEC("01 FC 52 46")
        vehicles[386] = AOBtoDEC("F1 FA D2 72")
        --FOR_MUS_RTR_12_AI
        vehicles[387] = AOBtoDEC("E9 30 96 43")
        vehicles[388] = AOBtoDEC("E3 90 28 05")
        vehicles[389] = AOBtoDEC("78 C4 98 97")
        vehicles[390] = AOBtoDEC("C7 65 54 3E")
        vehicles[391] = AOBtoDEC("BC 63 A7 20")
        --FOR_MUS_302_69_AI
        vehicles[392] = AOBtoDEC("D3 E7 51 27")
        vehicles[393] = AOBtoDEC("C4 9F F8 41")
        --PON_FIR_STK_78_AI
        vehicles[394] = AOBtoDEC("55 D7 B4 78")
        vehicles[395] = AOBtoDEC("93 FE E1 3E")
        vehicles[396] = AOBtoDEC("B1 25 4D 28")
        vehicles[397] = AOBtoDEC("9C AE C6 FC")
        --SHE_DAY_COU_65_AI_T4
        vehicles[398] = 3357183898
        vehicles[399] = 3312278586
        --SHE_MUS_SNK_12_AI
        vehicles[400] = AOBtoDEC("52 96 24 CC")
        --DOD_CHA_SRT_08
        vehicles[401] = AOBtoDEC("98 2D FB 96")
        --FOR_MUS_RTR_12
        vehicles[402] = AOBtoDEC("B6 0C 9C 9A")
        --FOR_RTR_X_69
        vehicles[403] = AOBtoDEC("05 F2 DE 5F")
        --HEN_VENOM_GT_11
        vehicles[404] = AOBtoDEC("A8 3C 53 57")
        --PON_FIR_STK_78
        vehicles[405] = AOBtoDEC("64 7C 00 58")
        --SHE_MUS_SNK_12
        vehicles[406] = AOBtoDEC("DC D0 A1 65")

        --EASTER EGG
        --COP_FOR_POL_INT_11_UNDERCOVER_TIER_4
        vehicles[407] = AOBtoDEC("C2 30 71 9E")
        --COP_FOR_POL_INT_11_STATE_SLOW_TIER_4
        vehicles[408] = AOBtoDEC("3A A1 4B EB")
        --COP_FOR_POL_INT_11_ESCAPE_TIER_4
        vehicles[409] = AOBtoDEC("50 A5 04 DF")

        local  function my_random (t,from, to)
        local num = math.random (from, to)
        if t[num] then  num = my_random (t, from, to)  end
            t[num]=num
            return num
        end

        if readInteger("[[[[027A4F60]+14]+68]+10]+4") == 3481124691 then
            first = "[[[[027A4F60]+14]+68]+10]+4"
            second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            fifth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x20
            sixth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x28
            local array = {}
            local t = {}
            for i =1, 6 do
                X = my_random (t, 1, 409)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            writeInteger(fourth,vehicles[array[4]])
            writeInteger(fifth,vehicles[array[5]])
            writeInteger(sixth,vehicles[array[6]])
            if readInteger(first) == 1891289054 and
                readInteger(second) == vehicles[array[1]] and
                readInteger(third) == vehicles[array[2]] and
                readInteger(fourth) == vehicles[array[3]] and
                readInteger(fifth) == vehicles[array[4]] and
                readInteger(sixth) == vehicles[array[5]] then
                print "San Francisco Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 1014047533 then
            first = "[[[[027A4F60]+14]+68]+10]+4"
            second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            fifth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x20
            sixth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x28
            seventh = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x30
            eigth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x38
            nineth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x40
            tenth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x48
            local array = {}
            local t = {}
            for i =1, 10 do
                X = my_random (t, 1, 409)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            writeInteger(fourth,vehicles[array[4]])
            writeInteger(fifth,vehicles[array[5]])
            writeInteger(sixth,vehicles[array[6]])
            writeInteger(seventh,vehicles[array[7]])
            writeInteger(eigth,vehicles[array[8]])
            writeInteger(nineth,vehicles[array[9]])
            writeInteger(tenth,vehicles[array[10]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] and
                readInteger(fourth) == vehicles[array[4]] and
                readInteger(fifth) == vehicles[array[5]] and
                readInteger(sixth) == vehicles[array[6]] and
                readInteger(seventh) == vehicles[array[7]] and
                readInteger(eigth) == vehicles[array[8]] and
                readInteger(nineth) == vehicles[array[9]] and
                readInteger(tenth) == vehicles[array[10]] then
                print "Altamont Pass Race cars swap has completed successfully"
            end
        end
    end
end

s1 = createTimer(nil)
timer_onTimer(s1,Stage1)
timer_setInterval(s1, 500)
timer_setEnabled(s1, true)


[DISABLE]
timer_setEnabled(s1, false)
print "The Classics Run Tier 1 Cars Swap timer disabled"
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>789</ID>
          <Description>"Stage 2 3"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()
function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end
function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end
[ENABLE]
print "The Classics Run Tier 1 Cars Swap timer enabled"
function Stage23()
    if readPointer("[[[[027A4F60]+14]+68]+10]+4") ~= nil then
        local vehicles = {}
        --TIER 1
        --CHE_CAM_SS_67_PP_STOCK_1
        vehicles[1] = 1522441908
        vehicles[2] = 150155535
        vehicles[3] = 4047731096
        vehicles[4] = 3603434424
        vehicles[5] = 933904526
        vehicles[6] = 1760866290
        vehicles[7] = 1935511816
        vehicles[8] = 3986269571
        --CHE_CAM_SS_67_PP1V1
        vehicles[9] = AOBtoDEC("3E B1 A7 B7")
        vehicles[10] = AOBtoDEC("83 B2 27 D6")
        vehicles[11] = AOBtoDEC("5E EF B4 C2")
        vehicles[12] = AOBtoDEC("F8 86 F5 9E")
        vehicles[13] = AOBtoDEC("61 44 58 2B")
        vehicles[14] = AOBtoDEC("DB 39 51 BA")
        vehicles[15] = AOBtoDEC("56 5D 05 9E")
        vehicles[16] = AOBtoDEC("66 DD B9 46")
        --CHE_CAM_SS_67_PP2V1
        vehicles[17] = AOBtoDEC("C4 3A 95 11")
        vehicles[18] = AOBtoDEC("BE 4E E8 76")
        vehicles[19] = AOBtoDEC("34 AD D8 EC")
        vehicles[20] = AOBtoDEC("43 A0 92 5E")
        vehicles[21] = AOBtoDEC("E4 9B 7D 21")
        vehicles[22] = AOBtoDEC("27 98 19 DD")
        vehicles[23] = AOBtoDEC("CF 88 F8 68")
        vehicles[24] = AOBtoDEC("1D 35 B4 12")
        --CHE_EL_CAM_70_PP_STOCK_1
        vehicles[25] = 4152999272
        vehicles[26] = 2839316226
        vehicles[27] = 850809204
        vehicles[28] = 1507013332
        vehicles[29] = 2744598914
        vehicles[30] = 874261196
        vehicles[31] = 1489277057
        vehicles[32] = 3963367876
        --CHE_EL_CAM_70_PP1V1
        vehicles[33] = AOBtoDEC("3F 10 66 E7")
        vehicles[34] = AOBtoDEC("8A 99 3A 6F")
        vehicles[35] = AOBtoDEC("81 56 76 1A")
        vehicles[36] = AOBtoDEC("FC A1 4E AF")
        vehicles[37] = AOBtoDEC("9B 56 3D 30")
        vehicles[38] = AOBtoDEC("46 3A 3A E4")
        vehicles[39] = AOBtoDEC("96 18 B9 72")
        vehicles[40] = AOBtoDEC("C5 23 54 69")
        --CHE_EL_CAM_70_PP2V1
        vehicles[41] = AOBtoDEC("0D BC 59 E7")
        vehicles[42] = AOBtoDEC("FF A5 3E 6F")
        vehicles[43] = AOBtoDEC("DE 72 79 1A")
        vehicles[44] = AOBtoDEC("B3 92 3E AF")
        vehicles[45] = AOBtoDEC("E4 24 66 3D")
        vehicles[46] = AOBtoDEC("57 45 24 E4")
        vehicles[47] = AOBtoDEC("41 C5 C4 72")
        vehicles[48] = AOBtoDEC("FF 43 48 69")
        --DOD_CHA_RT_71_PP_STOCK_1
        vehicles[49] = 658081404
        vehicles[50] = 353759425
        vehicles[51] = 897078296
        vehicles[52] = 904978235
        vehicles[53] = 1838233732
        vehicles[54] = 2193678947
        vehicles[55] = 1587191578
        vehicles[56] = 3371414360
        --DOD_CHA_RT_71_PP1V1
        vehicles[57] = AOBtoDEC("90 55 54 DB")
        vehicles[58] = AOBtoDEC("2C 8B A2 4A")
        vehicles[59] = AOBtoDEC("47 44 82 E8")
        vehicles[60] = AOBtoDEC("2C 8F 66 3F")
        vehicles[61] = AOBtoDEC("F0 27 43 C5")
        vehicles[62] = AOBtoDEC("21 BF CF 3C")
        vehicles[63] = AOBtoDEC("A9 58 13 9A")
        vehicles[64] = AOBtoDEC("BE 09 94 E7")
        --DOD_CHA_RT_71_PP2V1
        vehicles[65] = AOBtoDEC("67 A2 2D FB")
        vehicles[66] = AOBtoDEC("55 35 6F 7F")
        vehicles[67] = AOBtoDEC("97 30 AC D7")
        vehicles[68] = AOBtoDEC("6A 27 5B 0F")
        vehicles[69] = AOBtoDEC("BD DF FF 82")
        vehicles[70] = AOBtoDEC("D8 6E 35 6E")
        vehicles[71] = AOBtoDEC("2C 7F D2 AC")
        vehicles[72] = AOBtoDEC("43 0E AE B5")
        --FOR_MUS_302_69_PP_STOCK_1
        vehicles[73] = 1500183094
        vehicles[74] = 162166122
        vehicles[75] = 161538668
        vehicles[76] = 2191334224
        vehicles[77] = 3348852928
        vehicles[78] = 2138722167
        vehicles[79] = 3095976600
        vehicles[80] = 3713352339
        --FOR_MUS_302_69_PP1V1
        vehicles[81] = AOBtoDEC("67 42 63 3F")
        vehicles[82] = AOBtoDEC("08 37 D6 22")
        vehicles[83] = AOBtoDEC("D0 6B 43 26")
        vehicles[84] = AOBtoDEC("22 0C 9E 71")
        vehicles[85] = AOBtoDEC("F2 1E F2 65")
        vehicles[86] = AOBtoDEC("7D F7 A5 68")
        vehicles[87] = AOBtoDEC("6E 7F 78 56")
        vehicles[88] = AOBtoDEC("0A 74 5C E8")
        --FOR_MUS_302_69_PP2V1
        vehicles[89] = AOBtoDEC("A4 66 46 D5")
        vehicles[90] = AOBtoDEC("63 EB 74 C3")
        vehicles[91] = AOBtoDEC("03 46 F3 B1")
        vehicles[92] = AOBtoDEC("49 1D 02 9B")
        vehicles[93] = AOBtoDEC("30 DA C8 E3")
        vehicles[94] = AOBtoDEC("39 7D 83 76")
        vehicles[95] = AOBtoDEC("3E 2B 6E 55")
        vehicles[96] = AOBtoDEC("4E 9C 95 D9")
        --PON_FIR_STK_78_PP_STOCK_1
        vehicles[97] = 3681840500
        vehicles[98] = 3949993724
        vehicles[99] = 3350848715
        vehicles[100] = 2691382565
        vehicles[101] = 3379929237
        vehicles[102] = 2618823770
        vehicles[103] = 1034103769
        vehicles[104] = 4167471778
        --PON_FIR_STK_78_PP1V1
        vehicles[105] = AOBtoDEC("D9 57 CE C1")
        vehicles[106] = AOBtoDEC("E3 A5 8B AF")
        vehicles[107] = AOBtoDEC("FC DD D6 6D")
        vehicles[108] = AOBtoDEC("68 9E 4E 4E")
        vehicles[109] = AOBtoDEC("6A B0 D3 AC")
        vehicles[110] = AOBtoDEC("5C 6F 62 F7")
        vehicles[111] = AOBtoDEC("B5 FD 27 E4")
        vehicles[112] = AOBtoDEC("60 BA E2 95")
        --PON_FIR_STK_78_PP2V1
        vehicles[113] = AOBtoDEC("3D A5 9F 52")
        vehicles[114] = AOBtoDEC("AB 66 E3 AC")
        vehicles[115] = AOBtoDEC("5D 34 27 0C")
        vehicles[116] = AOBtoDEC("99 C1 3A 33")
        vehicles[117] = AOBtoDEC("8F FD 4E 32")
        vehicles[118] = AOBtoDEC("D9 46 22 B8")
        vehicles[119] = AOBtoDEC("0A DB AA E3")
        vehicles[120] = AOBtoDEC("1E 46 06 72")
        --TIER 2
        --DOD_CHA_SRT_08_PP_STOCK_1
        vehicles[121] = AOBtoDEC("4A AD 17 C0")
        vehicles[122] = AOBtoDEC("E5 6D BD 7B")
        vehicles[123] = AOBtoDEC("76 AB F5 92")
        vehicles[124] = AOBtoDEC("81 BE 89 DE")
        vehicles[125] = AOBtoDEC("61 B8 B0 EF")
        vehicles[126] = AOBtoDEC("D5 F9 94 4B")
        vehicles[127] = AOBtoDEC("1A 80 8D 6A")
        vehicles[128] = AOBtoDEC("50 AB AA 20")
        --DOD_CHA_SRT_08_PP1V1
        vehicles[129] = AOBtoDEC("16 CE F0 59")
        vehicles[130] = AOBtoDEC("9F D0 BB 96")
        vehicles[131] = AOBtoDEC("F1 7A 45 BD")
        vehicles[132] = AOBtoDEC("35 4D 59 F4")
        vehicles[133] = AOBtoDEC("61 06 5C 40")
        vehicles[134] = AOBtoDEC("EC 7B C1 1F")
        vehicles[135] = AOBtoDEC("E8 06 80 9F")
        vehicles[136] = AOBtoDEC("DD 6E F5 38")
        --DOD_CHA_SRT_08_PP2V1
        vehicles[137] = AOBtoDEC("F2 69 0A 79")
        vehicles[138] = AOBtoDEC("EB 26 0C CB")
        vehicles[139] = AOBtoDEC("56 AB 19 D2")
        vehicles[140] = AOBtoDEC("E1 7D 86 5F")
        vehicles[141] = AOBtoDEC("F0 6F 40 4E")
        vehicles[142] = AOBtoDEC("3B 36 17 0B")
        vehicles[143] = AOBtoDEC("50 03 F5 3E")
        vehicles[144] = AOBtoDEC("7E EF 10 EB")
        --DOD_CHA_SRT_08_PP3V1
        vehicles[145] = AOBtoDEC("00 94 E9 DD")
        vehicles[146] = AOBtoDEC("1A FE 5B A8")
        vehicles[147] = AOBtoDEC("2B 46 75 02")
        vehicles[148] = AOBtoDEC("1A F1 29 A4")
        vehicles[149] = AOBtoDEC("7C EC E7 C8")
        vehicles[150] = AOBtoDEC("0C C2 2A F0")
        vehicles[151] = AOBtoDEC("9A 13 B5 1F")
        vehicles[152] = AOBtoDEC("D4 FE 56 8B")
        --FOR_MUS_BOS_12_PP_STOCK_1
        vehicles[153] = AOBtoDEC("34 44 7D 5D")
        vehicles[154] = AOBtoDEC("B3 80 3F A5")
        vehicles[155] = AOBtoDEC("61 8D E8 B2")
        vehicles[156] = AOBtoDEC("6D 9F E2 93")
        vehicles[157] = AOBtoDEC("B4 BF CA 46")
        vehicles[158] = AOBtoDEC("C6 9F 57 10")
        vehicles[159] = AOBtoDEC("2F 86 0A F2")
        vehicles[160] = AOBtoDEC("73 62 4D E8")
        --FOR_MUS_BOS_12_PP1V1
        vehicles[161] = AOBtoDEC("56 CB 18 E0")
        vehicles[162] = AOBtoDEC("4D DB C2 DD")
        vehicles[163] = AOBtoDEC("40 A4 32 8E")
        vehicles[164] = AOBtoDEC("DA AD 64 08")
        vehicles[165] = AOBtoDEC("71 3A 05 4E")
        vehicles[166] = AOBtoDEC("84 55 D3 48")
        vehicles[167] = AOBtoDEC("7C 4A 30 C1")
        vehicles[168] = AOBtoDEC("63 79 CB DA")
        --FOR_MUS_BOS_12_PP2V1
        vehicles[169] = AOBtoDEC("27 D9 F0 B4")
        vehicles[170] = AOBtoDEC("D2 FF 56 12")
        vehicles[171] = AOBtoDEC("51 08 7D 09")
        vehicles[172] = AOBtoDEC("5B 7D 82 EE")
        vehicles[173] = AOBtoDEC("72 D3 98 A3")
        vehicles[174] = AOBtoDEC("2F FC 86 D4")
        vehicles[175] = AOBtoDEC("2E 39 73 93")
        vehicles[176] = AOBtoDEC("51 CA 90 B7")
        --FOR_MUS_BOS_12_PP3V1
        vehicles[177] = AOBtoDEC("9D FE 9C 9F")
        vehicles[178] = AOBtoDEC("98 E4 E0 C7")
        vehicles[179] = AOBtoDEC("02 3E 51 9A")
        vehicles[180] = AOBtoDEC("86 7C 04 A7")
        vehicles[181] = AOBtoDEC("B0 02 1B EA")
        vehicles[182] = AOBtoDEC("B7 E3 6B CE")
        vehicles[183] = AOBtoDEC("26 24 8D 63")
        vehicles[184] = AOBtoDEC("29 37 B5 05")
        --FOR_MUS_RTR_12_PP_STOCK_1
        vehicles[185] = AOBtoDEC("7B 8D C8 B0")
        vehicles[186] = AOBtoDEC("05 E8 4E 4E")
        vehicles[187] = AOBtoDEC("47 B2 2F 7A")
        vehicles[188] = AOBtoDEC("F9 1B 81 A2")
        vehicles[189] = AOBtoDEC("60 27 E0 D3")
        vehicles[190] = AOBtoDEC("AB AE 84 0A")
        vehicles[191] = AOBtoDEC("DC 9E 80 ED")
        vehicles[192] = AOBtoDEC("19 D5 D9 79")
        --FOR_MUS_RTR_12_PP1V1
        vehicles[193] = AOBtoDEC("F9 8B EC 3F")
        --TIER 3
        --CHE_CAM_ZL1_13_PP_STOCK_1
        vehicles[194] = AOBtoDEC("ED E0 00 CF")
        vehicles[195] = AOBtoDEC("7C AC E6 B1")
        vehicles[196] = AOBtoDEC("E9 F2 0C B5")
        vehicles[197] = AOBtoDEC("BB 67 9C 5E")
        vehicles[198] = AOBtoDEC("1B DE 29 4F")
        vehicles[199] = AOBtoDEC("4E B0 D9 E6")
        vehicles[200] = AOBtoDEC("37 B0 8C C4")
        vehicles[201] = AOBtoDEC("A0 73 A8 70")
        --CHE_CAM_ZL1_13_PP1V1
        vehicles[202] = AOBtoDEC("D5 D6 A0 A9")
        vehicles[203] = AOBtoDEC("07 61 E0 24")
        vehicles[204] = AOBtoDEC("D1 92 08 C0")
        vehicles[205] = AOBtoDEC("AD 46 8A 28")
        vehicles[206] = AOBtoDEC("D0 42 EE BE")
        vehicles[207] = AOBtoDEC("C5 A4 7A 1B")
        vehicles[208] = AOBtoDEC("8D 2E FA 87")
        vehicles[209] = AOBtoDEC("62 44 10 EB")
        --CHE_CAM_ZL1_13_PP2V1
        vehicles[210] = AOBtoDEC("87 AF 5F 8D")
        vehicles[211] = AOBtoDEC("EE 59 1A 5C")
        vehicles[212] = AOBtoDEC("00 08 01 A4")
        vehicles[213] = AOBtoDEC("51 82 F9 B0")
        vehicles[214] = AOBtoDEC("18 C7 81 50")
        vehicles[215] = AOBtoDEC("8C A0 8F 3F")
        vehicles[216] = AOBtoDEC("99 6D C8 07")
        vehicles[217] = AOBtoDEC("A2 44 4A 05")
        --CHE_CAM_ZL1_13_PP3V1
        vehicles[218] = AOBtoDEC("11 BB FF CE")
        vehicles[219] = AOBtoDEC("49 D2 D0 DE")
        vehicles[220] = AOBtoDEC("F7 7B C0 69")
        vehicles[221] = AOBtoDEC("05 83 41 BF")
        vehicles[222] = AOBtoDEC("38 8D 71 27")
        vehicles[223] = AOBtoDEC("B5 F0 2D B1")
        vehicles[224] = AOBtoDEC("8C 0A 59 09")
        vehicles[225] = AOBtoDEC("0C 46 37 3B")
        --SHE_MUS_SNK_12_PP_STOCK_1
        vehicles[226] = AOBtoDEC("67 53 06 F1")
        vehicles[227] = AOBtoDEC("36 9E D3 EA")
        vehicles[228] = AOBtoDEC("33 73 21 F8")
        vehicles[229] = AOBtoDEC("AB B3 C2 AC")
        vehicles[230] = AOBtoDEC("61 40 D8 7A")
        vehicles[231] = AOBtoDEC("FC 0E 3F D2")
        vehicles[232] = AOBtoDEC("36 A8 21 9F")
        vehicles[233] = AOBtoDEC("52 CD 96 D1")
        --SHE_MUS_SNK_12_PP1V1
        vehicles[234] = AOBtoDEC("E5 72 4B 6D")
        vehicles[235] = AOBtoDEC("1C 33 D8 46")
        vehicles[236] = AOBtoDEC("D1 0B 91 A2")
        vehicles[237] = AOBtoDEC("50 CD 86 BB")
        vehicles[238] = AOBtoDEC("1A 42 8F 27")
        vehicles[239] = AOBtoDEC("5D EB F6 4C")
        vehicles[240] = AOBtoDEC("29 5D 72 71")
        vehicles[241] = AOBtoDEC("A1 B7 55 79")
        --SHE_MUS_SNK_12_PP2V1
        vehicles[242] = AOBtoDEC("97 15 0C 2A")
        vehicles[243] = AOBtoDEC("C5 C7 F8 AC")
        vehicles[243] = AOBtoDEC("3E D8 59 83")
        vehicles[244] = AOBtoDEC("25 3E 2B 6B")
        vehicles[245] = AOBtoDEC("12 B8 45 49")
        vehicles[246] = AOBtoDEC("40 2F CB 75")
        vehicles[247] = AOBtoDEC("2F 6F DD 35")
        vehicles[248] = AOBtoDEC("67 55 2D 86")
        --SHE_MUS_SNK_12_PP3V1
        vehicles[249] = AOBtoDEC("C0 D5 BC 24")
        vehicles[250] = AOBtoDEC("68 E7 53 6E")
        vehicles[251] = AOBtoDEC("A1 87 9B 7F")
        vehicles[252] = AOBtoDEC("08 81 F4 0C")
        vehicles[253] = AOBtoDEC("EE D2 B4 81")
        vehicles[254] = AOBtoDEC("25 CD 21 BD")
        vehicles[255] = AOBtoDEC("5A 60 C9 0C")
        vehicles[256] = AOBtoDEC("52 59 00 CD")
        --SHE_DAY_COU_65_PP_STOCK_1
        vehicles[257] = 4152129083
        vehicles[258] = 3871257759
        vehicles[259] = 3289542481
        vehicles[260] = 2461231717
        vehicles[261] = 881791887
        vehicles[262] = 878544792
        vehicles[263] = 2902527303
        vehicles[264] = 1636074729
        --SHE_DAY_COU_65_PP1V1
        vehicles[265] = 1241611741
        vehicles[266] = 2683772338
        vehicles[267] = 518514680
        vehicles[268] = 3472854976
        vehicles[269] = 3523685951
        vehicles[270] = 3629261332
        vehicles[271] = 3439662912
        vehicles[272] = 2666964101
        --SHE_DAY_COU_65_PP2V1
        vehicles[273] = 2996645409
        vehicles[274] = 3314765652
        vehicles[275] = 259914488
        vehicles[276] = 1295232418
        vehicles[277] = 974990480
        vehicles[278] = 2131311971
        vehicles[279] = 1205195321
        vehicles[280] = 3631894439
        --TIER 4
        --CHE_CAM_SS_67_NFS_E
        vehicles[281] = 764119014
        --CHE_EL_CAM_70_NFS_E
        vehicles[282] = 3006189287
        --CHE_EL_CAM_70_PP_RIVAL_1
        vehicles[283] = AOBtoDEC("9C B4 8C 1D")
        --CHE_EL_CAM_70_PP_RIVAL_2
        vehicles[284] = AOBtoDEC("13 8C FE 5C")
        --CHE_EL_CAM_70_PP_RIVAL_3
        vehicles[285] = AOBtoDEC("7A AE 04 62")
        --CHE_CAM_ZL1_13_PP_RUN
        vehicles[286] = AOBtoDEC("8D 0F C1 88")
        --CHE_VET_CBN_10_PP_STOCK_1
        vehicles[287] = AOBtoDEC("9A 39 BD AC")
        vehicles[288] = AOBtoDEC("D1 55 2E 59")
        vehicles[289] = AOBtoDEC("5F FC C5 61")
        vehicles[290] = AOBtoDEC("44 C1 87 1F")
        vehicles[291] = AOBtoDEC("58 75 9B 67")
        vehicles[292] = AOBtoDEC("3C 35 AB D5")
        vehicles[293] = AOBtoDEC("03 7E D7 4B")
        vehicles[294] = AOBtoDEC("EC 66 6D F8")
        --CHE_VET_CBN_10_PP1V1
        vehicles[295] = AOBtoDEC("FE A3 3A 41")
        vehicles[296] = AOBtoDEC("9D 9F 6C A7")
        vehicles[297] = AOBtoDEC("CC DA A3 64")
        vehicles[298] = AOBtoDEC("44 0B 4C 1D")
        vehicles[299] = AOBtoDEC("B4 CB F4 C5")
        vehicles[300] = AOBtoDEC("F6 06 10 9C")
        vehicles[301] = AOBtoDEC("BA 09 B1 91")
        vehicles[302] = AOBtoDEC("9B 08 4D 34")
        --CHE_VET_CBN_10_PP2V1
        vehicles[303] = AOBtoDEC("F0 CA A4 26")
        vehicles[304] = AOBtoDEC("9B 90 1C C4")
        vehicles[305] = AOBtoDEC("30 4B A7 0D")
        vehicles[306] = AOBtoDEC("E2 3E E5 3C")
        vehicles[307] = AOBtoDEC("94 31 4A 55")
        vehicles[308] = AOBtoDEC("95 9E EF 95")
        vehicles[309] = AOBtoDEC("CA 69 A7 01")
        vehicles[310] = AOBtoDEC("2C 00 F7 C8")
        --CHE_VET_CBN_10_PP3V1
        vehicles[311] = AOBtoDEC("1E 43 48 C7")
        vehicles[312] = AOBtoDEC("98 FD 03 54")
        vehicles[313] = AOBtoDEC("97 3A 8D D8")
        vehicles[314] = AOBtoDEC("C3 20 2D 57")
        vehicles[315] = AOBtoDEC("3D BD 48 79")
        vehicles[316] = AOBtoDEC("59 10 4F 59")
        vehicles[317] = AOBtoDEC("3C 38 A7 79")
        vehicles[318] = AOBtoDEC("C4 4C 22 5A")
        --CHE_VET_CBN_10_PRESALE_1
        vehicles[319] = AOBtoDEC("0D 9E 48 57")
        --CHE_VET_CBN_10_PRESALE_1
        vehicles[320] = AOBtoDEC("B6 EE F8 CC")
        --DOD_CHA_RT_71_NFS_E
        vehicles[321] = 531246253
        --DOD_CHA_SRT_08_ADSALES_1
        vehicles[322] = AOBtoDEC("6E 69 6F 28")
        --DOD_CHA_SRT_08_NFS_E
        vehicles[323] = AOBtoDEC("63 8D 8E CC")
        --FOR_GT_STK_06_PP_STOCK_1
        vehicles[324] = AOBtoDEC("44 25 C5 CF")
        vehicles[325] = AOBtoDEC("79 AC 46 BF")
        vehicles[326] = AOBtoDEC("F9 54 F1 D9")
        vehicles[327] = AOBtoDEC("7A BD 7F 3C")
        vehicles[328] = AOBtoDEC("DA 59 8D 45")
        vehicles[329] = AOBtoDEC("7C AF EE 40")
        vehicles[330] = AOBtoDEC("48 04 24 58")
        vehicles[331] = AOBtoDEC("A8 35 2E 8C")
        --FOR_GT_STK_06_PP1V1
        vehicles[332] = AOBtoDEC("FD BD B8 C7")
        vehicles[333] = AOBtoDEC("26 76 0C 46")
        vehicles[334] = AOBtoDEC("71 85 12 AF")
        vehicles[335] = AOBtoDEC("4E 55 A2 06")
        vehicles[336] = AOBtoDEC("9D 63 88 EF")
        vehicles[337] = AOBtoDEC("70 CD F4 9C")
        vehicles[338] = AOBtoDEC("2B 3D 2B A2")
        vehicles[339] = AOBtoDEC("3C 8A 25 C7")
        --FOR_GT_STK_06_PP2V1
        vehicles[340] = AOBtoDEC("E5 38 A1 26")
        vehicles[341] = AOBtoDEC("47 98 2D D1")
        vehicles[342] = AOBtoDEC("2B 05 9C 1E")
        vehicles[343] = AOBtoDEC("45 B6 ED 8B")
        vehicles[344] = AOBtoDEC("60 80 BF 37")
        vehicles[345] = AOBtoDEC("BD EC CA 09")
        vehicles[346] = AOBtoDEC("45 44 C5 64")
        vehicles[347] = AOBtoDEC("BB CA F1 80")
        --FOR_GT_STK_06_ADSALES_1
        vehicles[348] = AOBtoDEC("9C 25 95 84")
        --FOR_MUS_BOS_12_PRESALE_1
        vehicles[349] = AOBtoDEC("C6 24 4B F5")
        --FOR_MUS_RTR_12_NFS_E
        vehicles[350] = AOBtoDEC("89 73 1A C2")
        --FOR_RTR_X_69_PP1V1
        vehicles[351] = AOBtoDEC("0B 36 E5 FF")
        --FOR_MUS_302_69_ADSALES_1
        vehicles[352] = 268766097
        --FOR_MUS_302_69_NFS_E
        vehicles[353] = 2902452387
        --SHE_DAY_COU_65_PP_RUN
        vehicles[354] = 3604153451
        --SHE_MUS_SNK_12_PP_RUN
        vehicles[355] = AOBtoDEC("52 7F 68 29")
        --PON_FIR_STK_78_NFS_E
        vehicles[356] = AOBtoDEC("41 E9 F9 A9")

        --CUSTOM MADE BY _mRally2
        --CHE_EL_CAM_70_AI_T4
        vehicles[357] = 2053301536
        vehicles[358] = 96789362
        vehicles[359] = 3393955391
        vehicles[360] = 3643384219
        --CHE_CAM_SS_67_AI_T4
        vehicles[361] = 2789574667
        vehicles[362] = 2695468121
        vehicles[363] = 2955493261
        vehicles[364] = 1157837898
        --CHE_CAM_ZL1_13_AI
        vehicles[365] = AOBtoDEC("8E A6 E6 19")
        vehicles[366] = AOBtoDEC("AC 64 BB 73")
        vehicles[367] = AOBtoDEC("A2 4A 7A 3C")
        vehicles[368] = AOBtoDEC("D1 AD 85 72")
        vehicles[369] = AOBtoDEC("A0 6C BE 3D")
        --CHE_VET_CBN_10_AI
        vehicles[370] = AOBtoDEC("DB 88 9A BD")
        vehicles[371] = AOBtoDEC("F8 58 2E 03")
        vehicles[372] = AOBtoDEC("FA 8F 9C F0")
        --DOD_CHA_RT_71_AI_T4
        vehicles[373] = 132446852
        vehicles[374] = 1161287153
        vehicles[375] = 3481124691
        vehicles[376] = 1350671612
        --DOD_CHA_SRT_08_AI
        vehicles[377] = AOBtoDEC("34 D4 8E 1A")
        vehicles[378] = AOBtoDEC("80 F6 85 A3")
        vehicles[379] = AOBtoDEC("06 74 91 C5")
        vehicles[380] = AOBtoDEC("77 C6 0E 11")
        --FOR_GT_STK_06_AI
        vehicles[381] = AOBtoDEC("4A 82 88 AD")
        vehicles[382] = AOBtoDEC("5F 98 D4 C2")
        vehicles[383] = AOBtoDEC("37 0D FC 19")
        --FOR_MUS_BOS_12_AI
        vehicles[384] = AOBtoDEC("70 E1 83 B5")
        vehicles[385] = AOBtoDEC("01 FC 52 46")
        vehicles[386] = AOBtoDEC("F1 FA D2 72")
        --FOR_MUS_RTR_12_AI
        vehicles[387] = AOBtoDEC("E9 30 96 43")
        vehicles[388] = AOBtoDEC("E3 90 28 05")
        vehicles[389] = AOBtoDEC("78 C4 98 97")
        vehicles[390] = AOBtoDEC("C7 65 54 3E")
        vehicles[391] = AOBtoDEC("BC 63 A7 20")
        --FOR_MUS_302_69_AI
        vehicles[392] = AOBtoDEC("D3 E7 51 27")
        vehicles[393] = AOBtoDEC("C4 9F F8 41")
        --PON_FIR_STK_78_AI
        vehicles[394] = AOBtoDEC("55 D7 B4 78")
        vehicles[395] = AOBtoDEC("93 FE E1 3E")
        vehicles[396] = AOBtoDEC("B1 25 4D 28")
        vehicles[397] = AOBtoDEC("9C AE C6 FC")
        --SHE_DAY_COU_65_AI_T4
        vehicles[398] = 3357183898
        vehicles[399] = 3312278586
        --SHE_MUS_SNK_12_AI
        vehicles[400] = AOBtoDEC("52 96 24 CC")
        --DOD_CHA_SRT_08
        vehicles[401] = AOBtoDEC("98 2D FB 96")
        --FOR_MUS_RTR_12
        vehicles[402] = AOBtoDEC("B6 0C 9C 9A")
        --FOR_RTR_X_69
        vehicles[403] = AOBtoDEC("05 F2 DE 5F")
        --HEN_VENOM_GT_11
        vehicles[404] = AOBtoDEC("A8 3C 53 57")
        --PON_FIR_STK_78
        vehicles[405] = AOBtoDEC("64 7C 00 58")
        --SHE_MUS_SNK_12
        vehicles[406] = AOBtoDEC("DC D0 A1 65")

        --EASTER EGG
        --COP_FOR_POL_INT_11_UNDERCOVER_TIER_4
        vehicles[407] = AOBtoDEC("C2 30 71 9E")
        --COP_FOR_POL_INT_11_STATE_SLOW_TIER_4
        vehicles[408] = AOBtoDEC("3A A1 4B EB")
        --COP_FOR_POL_INT_11_ESCAPE_TIER_4
        vehicles[409] = AOBtoDEC("50 A5 04 DF")

        local  function my_random (t,from, to)
        local num = math.random (from, to)
        if t[num] then  num = my_random (t, from, to)  end
            t[num]=num
            return num
        end

        if readInteger("[[[[027A4F60]+14]+68]+10]+4") == 96674846 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            local fifth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x20
            local sixth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x28
            local seventh = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x30
            local eigth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x38
            local array = {}
            local t = {}
            for i =1, 8 do
                X = my_random (t, 1, 409)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            writeInteger(fourth,vehicles[array[4]])
            writeInteger(fifth,vehicles[array[5]])
            writeInteger(sixth,vehicles[array[6]])
            writeInteger(seventh,vehicles[array[7]])
            writeInteger(eigth,vehicles[array[8]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] and
                readInteger(fourth) == vehicles[array[4]] and
                readInteger(fifth) == vehicles[array[5]] and
                readInteger(sixth) == vehicles[array[6]] and
                readInteger(seventh) == vehicles[array[7]] and
                readInteger(eigth) == vehicles[array[8]] then
                print "Yosemite Approach A Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 2360253972 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            local fifth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x20
            local sixth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x28
            local seventh = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x30
            local eigth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x38
            local array = {}
            local t = {}
            for i =1, 8 do
                X = my_random (t, 1, 409)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            writeInteger(fourth,vehicles[array[4]])
            writeInteger(fifth,vehicles[array[5]])
            writeInteger(sixth,vehicles[array[6]])
            writeInteger(seventh,vehicles[array[7]])
            writeInteger(eigth,vehicles[array[8]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] and
                readInteger(fourth) == vehicles[array[4]] and
                readInteger(fifth) == vehicles[array[5]] and
                readInteger(sixth) == vehicles[array[6]] and
                readInteger(seventh) == vehicles[array[7]] and
                readInteger(eigth) == vehicles[array[8]] then
                print "Yosemite South A Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 2463598039 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            local fifth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x20
            local sixth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x28
            local array = {}
            local t = {}
            for i =1, 6 do
                X = my_random (t, 1, 409)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            writeInteger(fourth,vehicles[array[4]])
            writeInteger(fifth,vehicles[array[5]])
            writeInteger(sixth,vehicles[array[6]]) --WE MAKE MARCUS DISAPPEAR FROM THE RACE SINCE HE IS IRRELEVANT
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] and
                readInteger(fourth) == vehicles[array[4]] and
                readInteger(fifth) == vehicles[array[5]] and
                readInteger(sixth) == vehicles[array[6]] then
                print "Yosemite South B Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 1390273791 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local array = {}
            local t = {}
            for i =1, 3 do
                X = my_random (t, 1, 409)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] then
                print "Sierra Pass Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 2940168599 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            local fifth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x20
            local sixth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x28
            local seventh = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x30
            local eigth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x38
            local nineth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x40
            local tenth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x48
            local array = {}
            local t = {}
            for i =1, 10 do
                X = my_random (t, 1, 409)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            writeInteger(fourth,vehicles[array[4]])
            writeInteger(fifth,vehicles[array[5]])
            writeInteger(sixth,vehicles[array[6]])
            writeInteger(seventh,vehicles[array[7]])
            writeInteger(eigth,vehicles[array[8]])
            writeInteger(nineth,vehicles[array[9]])
            writeInteger(tenth,vehicles[array[10]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] and
                readInteger(fourth) == vehicles[array[4]] and
                readInteger(fifth) == vehicles[array[5]] and
                readInteger(sixth) == vehicles[array[6]] and
                readInteger(seventh) == vehicles[array[7]] and
                readInteger(eigth) == vehicles[array[8]] and
                readInteger(nineth) == vehicles[array[9]] and
                readInteger(tenth) == vehicles[array[10]] then
                print "Desert Hills Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 1161287153 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local array = {}
            local t = {}
            for i =1, 3 do
                X = my_random (t, 1, 409)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] then
                print "Death Valley A Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 3489511903 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            local fifth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x20
            local sixth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x28
            local seventh = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x30
            local eigth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x38
            local array = {}
            local t = {}
            for i =1, 8 do
                X = my_random (t, 1, 409)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            writeInteger(fourth,vehicles[array[4]])
            writeInteger(fifth,vehicles[array[5]])
            writeInteger(sixth,vehicles[array[6]])
            writeInteger(seventh,vehicles[array[7]])
            writeInteger(eigth,vehicles[array[8]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] and
                readInteger(fourth) == vehicles[array[4]] and
                readInteger(fifth) == vehicles[array[5]] and
                readInteger(sixth) == vehicles[array[6]] and
                readInteger(seventh) == vehicles[array[7]] and
                readInteger(eigth) == vehicles[array[8]] then
                print "Death Valley B Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 4225104048 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            writeInteger(first,AOBtoDEC("2D 06 A8 6D"))
            writeInteger(second,AOBtoDEC("EE AA A3 A6"))
            if readInteger(first) == 3846084678 and
                readInteger(second) == 2463598039 then
                print "Las Vegas East A Battle Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 246197794 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            local fifth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x20
            local sixth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x28
            local seventh = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x30
            local eigth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x38
            local nineth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x40
            local tenth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x48
            local array = {}
            local t = {}
            for i =1, 10 do
                X = my_random (t, 1, 409)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            writeInteger(fourth,vehicles[array[4]])
            writeInteger(fifth,vehicles[array[5]])
            writeInteger(sixth,vehicles[array[6]])
            writeInteger(seventh,vehicles[array[7]])
            writeInteger(eigth,vehicles[array[8]])
            writeInteger(nineth,vehicles[array[9]])
            writeInteger(tenth,vehicles[array[10]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] and
                readInteger(fourth) == vehicles[array[4]] and
                readInteger(fifth) == vehicles[array[5]] and
                readInteger(sixth) == vehicles[array[6]] and
                readInteger(seventh) == vehicles[array[7]] and
                readInteger(eigth) == vehicles[array[8]] and
                readInteger(nineth) == vehicles[array[9]] and
                readInteger(tenth) == vehicles[array[10]] then
                print "Las Vegas East B Race cars swap has completed successfully"
            end
        end
    end
end

s23 = createTimer(nil)
timer_onTimer(s23,Stage23)
timer_setInterval(s23, 500)
timer_setEnabled(s23, true)


[DISABLE]
timer_setEnabled(s23, false)
print "The Classics Run Tier 1 &amp; 2 Cars Swap timer disabled"
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>821</ID>
          <Description>"Stage 4 9"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()
function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end
function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end
[ENABLE]
print "The Classics Run Cars Swap Stage 4 to 9 timer enabled"
function Stage49()
    if readPointer("[[[[027A4F60]+14]+68]+10]+4") ~= nil then
        if readPointer("[[[[00AA71F4]+F8]+6E8]+28]+58") ~= nil and
            readInteger("[[[[00AA71F4]+F8]+6E8]+28]+58") == 3090365568 then
            writeInteger("[[[[00AA71F4]+F8]+6E8]+28]+58",2763179715)
        end
        local vehicles = {}
        --TIER 1
        --CHE_CAM_SS_67_PP_STOCK_1
        vehicles[1] = 1522441908
        vehicles[2] = 150155535
        vehicles[3] = 4047731096
        vehicles[4] = 3603434424
        vehicles[5] = 933904526
        vehicles[6] = 1760866290
        vehicles[7] = 1935511816
        vehicles[8] = 3986269571
        --CHE_CAM_SS_67_PP1V1
        vehicles[9] = AOBtoDEC("3E B1 A7 B7")
        vehicles[10] = AOBtoDEC("83 B2 27 D6")
        vehicles[11] = AOBtoDEC("5E EF B4 C2")
        vehicles[12] = AOBtoDEC("F8 86 F5 9E")
        vehicles[13] = AOBtoDEC("61 44 58 2B")
        vehicles[14] = AOBtoDEC("DB 39 51 BA")
        vehicles[15] = AOBtoDEC("56 5D 05 9E")
        vehicles[16] = AOBtoDEC("66 DD B9 46")
        --CHE_CAM_SS_67_PP2V1
        vehicles[17] = AOBtoDEC("C4 3A 95 11")
        vehicles[18] = AOBtoDEC("BE 4E E8 76")
        vehicles[19] = AOBtoDEC("34 AD D8 EC")
        vehicles[20] = AOBtoDEC("43 A0 92 5E")
        vehicles[21] = AOBtoDEC("E4 9B 7D 21")
        vehicles[22] = AOBtoDEC("27 98 19 DD")
        vehicles[23] = AOBtoDEC("CF 88 F8 68")
        vehicles[24] = AOBtoDEC("1D 35 B4 12")
        --CHE_EL_CAM_70_PP_STOCK_1
        vehicles[25] = 4152999272
        vehicles[26] = 2839316226
        vehicles[27] = 850809204
        vehicles[28] = 1507013332
        vehicles[29] = 2744598914
        vehicles[30] = 874261196
        vehicles[31] = 1489277057
        vehicles[32] = 3963367876
        --CHE_EL_CAM_70_PP1V1
        vehicles[33] = AOBtoDEC("3F 10 66 E7")
        vehicles[34] = AOBtoDEC("8A 99 3A 6F")
        vehicles[35] = AOBtoDEC("81 56 76 1A")
        vehicles[36] = AOBtoDEC("FC A1 4E AF")
        vehicles[37] = AOBtoDEC("9B 56 3D 30")
        vehicles[38] = AOBtoDEC("46 3A 3A E4")
        vehicles[39] = AOBtoDEC("96 18 B9 72")
        vehicles[40] = AOBtoDEC("C5 23 54 69")
        --CHE_EL_CAM_70_PP2V1
        vehicles[41] = AOBtoDEC("0D BC 59 E7")
        vehicles[42] = AOBtoDEC("FF A5 3E 6F")
        vehicles[43] = AOBtoDEC("DE 72 79 1A")
        vehicles[44] = AOBtoDEC("B3 92 3E AF")
        vehicles[45] = AOBtoDEC("E4 24 66 3D")
        vehicles[46] = AOBtoDEC("57 45 24 E4")
        vehicles[47] = AOBtoDEC("41 C5 C4 72")
        vehicles[48] = AOBtoDEC("FF 43 48 69")
        --DOD_CHA_RT_71_PP_STOCK_1
        vehicles[49] = 658081404
        vehicles[50] = 353759425
        vehicles[51] = 897078296
        vehicles[52] = 904978235
        vehicles[53] = 1838233732
        vehicles[54] = 2193678947
        vehicles[55] = 1587191578
        vehicles[56] = 3371414360
        --DOD_CHA_RT_71_PP1V1
        vehicles[57] = AOBtoDEC("90 55 54 DB")
        vehicles[58] = AOBtoDEC("2C 8B A2 4A")
        vehicles[59] = AOBtoDEC("47 44 82 E8")
        vehicles[60] = AOBtoDEC("2C 8F 66 3F")
        vehicles[61] = AOBtoDEC("F0 27 43 C5")
        vehicles[62] = AOBtoDEC("21 BF CF 3C")
        vehicles[63] = AOBtoDEC("A9 58 13 9A")
        vehicles[64] = AOBtoDEC("BE 09 94 E7")
        --DOD_CHA_RT_71_PP2V1
        vehicles[65] = AOBtoDEC("67 A2 2D FB")
        vehicles[66] = AOBtoDEC("55 35 6F 7F")
        vehicles[67] = AOBtoDEC("97 30 AC D7")
        vehicles[68] = AOBtoDEC("6A 27 5B 0F")
        vehicles[69] = AOBtoDEC("BD DF FF 82")
        vehicles[70] = AOBtoDEC("D8 6E 35 6E")
        vehicles[71] = AOBtoDEC("2C 7F D2 AC")
        vehicles[72] = AOBtoDEC("43 0E AE B5")
        --FOR_MUS_302_69_PP_STOCK_1
        vehicles[73] = 1500183094
        vehicles[74] = 162166122
        vehicles[75] = 161538668
        vehicles[76] = 2191334224
        vehicles[77] = 3348852928
        vehicles[78] = 2138722167
        vehicles[79] = 3095976600
        vehicles[80] = 3713352339
        --FOR_MUS_302_69_PP1V1
        vehicles[81] = AOBtoDEC("67 42 63 3F")
        vehicles[82] = AOBtoDEC("08 37 D6 22")
        vehicles[83] = AOBtoDEC("D0 6B 43 26")
        vehicles[84] = AOBtoDEC("22 0C 9E 71")
        vehicles[85] = AOBtoDEC("F2 1E F2 65")
        vehicles[86] = AOBtoDEC("7D F7 A5 68")
        vehicles[87] = AOBtoDEC("6E 7F 78 56")
        vehicles[88] = AOBtoDEC("0A 74 5C E8")
        --FOR_MUS_302_69_PP2V1
        vehicles[89] = AOBtoDEC("A4 66 46 D5")
        vehicles[90] = AOBtoDEC("63 EB 74 C3")
        vehicles[91] = AOBtoDEC("03 46 F3 B1")
        vehicles[92] = AOBtoDEC("49 1D 02 9B")
        vehicles[93] = AOBtoDEC("30 DA C8 E3")
        vehicles[94] = AOBtoDEC("39 7D 83 76")
        vehicles[95] = AOBtoDEC("3E 2B 6E 55")
        vehicles[96] = AOBtoDEC("4E 9C 95 D9")
        --PON_FIR_STK_78_PP_STOCK_1
        vehicles[97] = 3681840500
        vehicles[98] = 3949993724
        vehicles[99] = 3350848715
        vehicles[100] = 2691382565
        vehicles[101] = 3379929237
        vehicles[102] = 2618823770
        vehicles[103] = 1034103769
        vehicles[104] = 4167471778
        --PON_FIR_STK_78_PP1V1
        vehicles[105] = AOBtoDEC("D9 57 CE C1")
        vehicles[106] = AOBtoDEC("E3 A5 8B AF")
        vehicles[107] = AOBtoDEC("FC DD D6 6D")
        vehicles[108] = AOBtoDEC("68 9E 4E 4E")
        vehicles[109] = AOBtoDEC("6A B0 D3 AC")
        vehicles[110] = AOBtoDEC("5C 6F 62 F7")
        vehicles[111] = AOBtoDEC("B5 FD 27 E4")
        vehicles[112] = AOBtoDEC("60 BA E2 95")
        --PON_FIR_STK_78_PP2V1
        vehicles[113] = AOBtoDEC("3D A5 9F 52")
        vehicles[114] = AOBtoDEC("AB 66 E3 AC")
        vehicles[115] = AOBtoDEC("5D 34 27 0C")
        vehicles[116] = AOBtoDEC("99 C1 3A 33")
        vehicles[117] = AOBtoDEC("8F FD 4E 32")
        vehicles[118] = AOBtoDEC("D9 46 22 B8")
        vehicles[119] = AOBtoDEC("0A DB AA E3")
        vehicles[120] = AOBtoDEC("1E 46 06 72")
        --TIER 2
        --DOD_CHA_SRT_08_PP_STOCK_1
        vehicles[121] = AOBtoDEC("4A AD 17 C0")
        vehicles[122] = AOBtoDEC("E5 6D BD 7B")
        vehicles[123] = AOBtoDEC("76 AB F5 92")
        vehicles[124] = AOBtoDEC("81 BE 89 DE")
        vehicles[125] = AOBtoDEC("61 B8 B0 EF")
        vehicles[126] = AOBtoDEC("D5 F9 94 4B")
        vehicles[127] = AOBtoDEC("1A 80 8D 6A")
        vehicles[128] = AOBtoDEC("50 AB AA 20")
        --DOD_CHA_SRT_08_PP1V1
        vehicles[129] = AOBtoDEC("16 CE F0 59")
        vehicles[130] = AOBtoDEC("9F D0 BB 96")
        vehicles[131] = AOBtoDEC("F1 7A 45 BD")
        vehicles[132] = AOBtoDEC("35 4D 59 F4")
        vehicles[133] = AOBtoDEC("61 06 5C 40")
        vehicles[134] = AOBtoDEC("EC 7B C1 1F")
        vehicles[135] = AOBtoDEC("E8 06 80 9F")
        vehicles[136] = AOBtoDEC("DD 6E F5 38")
        --DOD_CHA_SRT_08_PP2V1
        vehicles[137] = AOBtoDEC("F2 69 0A 79")
        vehicles[138] = AOBtoDEC("EB 26 0C CB")
        vehicles[139] = AOBtoDEC("56 AB 19 D2")
        vehicles[140] = AOBtoDEC("E1 7D 86 5F")
        vehicles[141] = AOBtoDEC("F0 6F 40 4E")
        vehicles[142] = AOBtoDEC("3B 36 17 0B")
        vehicles[143] = AOBtoDEC("50 03 F5 3E")
        vehicles[144] = AOBtoDEC("7E EF 10 EB")
        --DOD_CHA_SRT_08_PP3V1
        vehicles[145] = AOBtoDEC("00 94 E9 DD")
        vehicles[146] = AOBtoDEC("1A FE 5B A8")
        vehicles[147] = AOBtoDEC("2B 46 75 02")
        vehicles[148] = AOBtoDEC("1A F1 29 A4")
        vehicles[149] = AOBtoDEC("7C EC E7 C8")
        vehicles[150] = AOBtoDEC("0C C2 2A F0")
        vehicles[151] = AOBtoDEC("9A 13 B5 1F")
        vehicles[152] = AOBtoDEC("D4 FE 56 8B")
        --FOR_MUS_BOS_12_PP_STOCK_1
        vehicles[153] = AOBtoDEC("34 44 7D 5D")
        vehicles[154] = AOBtoDEC("B3 80 3F A5")
        vehicles[155] = AOBtoDEC("61 8D E8 B2")
        vehicles[156] = AOBtoDEC("6D 9F E2 93")
        vehicles[157] = AOBtoDEC("B4 BF CA 46")
        vehicles[158] = AOBtoDEC("C6 9F 57 10")
        vehicles[159] = AOBtoDEC("2F 86 0A F2")
        vehicles[160] = AOBtoDEC("73 62 4D E8")
        --FOR_MUS_BOS_12_PP1V1
        vehicles[161] = AOBtoDEC("56 CB 18 E0")
        vehicles[162] = AOBtoDEC("4D DB C2 DD")
        vehicles[163] = AOBtoDEC("40 A4 32 8E")
        vehicles[164] = AOBtoDEC("DA AD 64 08")
        vehicles[165] = AOBtoDEC("71 3A 05 4E")
        vehicles[166] = AOBtoDEC("84 55 D3 48")
        vehicles[167] = AOBtoDEC("7C 4A 30 C1")
        vehicles[168] = AOBtoDEC("63 79 CB DA")
        --FOR_MUS_BOS_12_PP2V1
        vehicles[169] = AOBtoDEC("27 D9 F0 B4")
        vehicles[170] = AOBtoDEC("D2 FF 56 12")
        vehicles[171] = AOBtoDEC("51 08 7D 09")
        vehicles[172] = AOBtoDEC("5B 7D 82 EE")
        vehicles[173] = AOBtoDEC("72 D3 98 A3")
        vehicles[174] = AOBtoDEC("2F FC 86 D4")
        vehicles[175] = AOBtoDEC("2E 39 73 93")
        vehicles[176] = AOBtoDEC("51 CA 90 B7")
        --FOR_MUS_BOS_12_PP3V1
        vehicles[177] = AOBtoDEC("9D FE 9C 9F")
        vehicles[178] = AOBtoDEC("98 E4 E0 C7")
        vehicles[179] = AOBtoDEC("02 3E 51 9A")
        vehicles[180] = AOBtoDEC("86 7C 04 A7")
        vehicles[181] = AOBtoDEC("B0 02 1B EA")
        vehicles[182] = AOBtoDEC("B7 E3 6B CE")
        vehicles[183] = AOBtoDEC("26 24 8D 63")
        vehicles[184] = AOBtoDEC("29 37 B5 05")
        --FOR_MUS_RTR_12_PP_STOCK_1
        vehicles[185] = AOBtoDEC("7B 8D C8 B0")
        vehicles[186] = AOBtoDEC("05 E8 4E 4E")
        vehicles[187] = AOBtoDEC("47 B2 2F 7A")
        vehicles[188] = AOBtoDEC("F9 1B 81 A2")
        vehicles[189] = AOBtoDEC("60 27 E0 D3")
        vehicles[190] = AOBtoDEC("AB AE 84 0A")
        vehicles[191] = AOBtoDEC("DC 9E 80 ED")
        vehicles[192] = AOBtoDEC("19 D5 D9 79")
        --FOR_MUS_RTR_12_PP1V1
        vehicles[193] = AOBtoDEC("F9 8B EC 3F")
        --TIER 3
        --CHE_CAM_ZL1_13_PP_STOCK_1
        vehicles[194] = AOBtoDEC("ED E0 00 CF")
        vehicles[195] = AOBtoDEC("7C AC E6 B1")
        vehicles[196] = AOBtoDEC("E9 F2 0C B5")
        vehicles[197] = AOBtoDEC("BB 67 9C 5E")
        vehicles[198] = AOBtoDEC("1B DE 29 4F")
        vehicles[199] = AOBtoDEC("4E B0 D9 E6")
        vehicles[200] = AOBtoDEC("37 B0 8C C4")
        vehicles[201] = AOBtoDEC("A0 73 A8 70")
        --CHE_CAM_ZL1_13_PP1V1
        vehicles[202] = AOBtoDEC("D5 D6 A0 A9")
        vehicles[203] = AOBtoDEC("07 61 E0 24")
        vehicles[204] = AOBtoDEC("D1 92 08 C0")
        vehicles[205] = AOBtoDEC("AD 46 8A 28")
        vehicles[206] = AOBtoDEC("D0 42 EE BE")
        vehicles[207] = AOBtoDEC("C5 A4 7A 1B")
        vehicles[208] = AOBtoDEC("8D 2E FA 87")
        vehicles[209] = AOBtoDEC("62 44 10 EB")
        --CHE_CAM_ZL1_13_PP2V1
        vehicles[210] = AOBtoDEC("87 AF 5F 8D")
        vehicles[211] = AOBtoDEC("EE 59 1A 5C")
        vehicles[212] = AOBtoDEC("00 08 01 A4")
        vehicles[213] = AOBtoDEC("51 82 F9 B0")
        vehicles[214] = AOBtoDEC("18 C7 81 50")
        vehicles[215] = AOBtoDEC("8C A0 8F 3F")
        vehicles[216] = AOBtoDEC("99 6D C8 07")
        vehicles[217] = AOBtoDEC("A2 44 4A 05")
        --CHE_CAM_ZL1_13_PP3V1
        vehicles[218] = AOBtoDEC("11 BB FF CE")
        vehicles[219] = AOBtoDEC("49 D2 D0 DE")
        vehicles[220] = AOBtoDEC("F7 7B C0 69")
        vehicles[221] = AOBtoDEC("05 83 41 BF")
        vehicles[222] = AOBtoDEC("38 8D 71 27")
        vehicles[223] = AOBtoDEC("B5 F0 2D B1")
        vehicles[224] = AOBtoDEC("8C 0A 59 09")
        vehicles[225] = AOBtoDEC("0C 46 37 3B")
        --SHE_MUS_SNK_12_PP_STOCK_1
        vehicles[226] = AOBtoDEC("67 53 06 F1")
        vehicles[227] = AOBtoDEC("36 9E D3 EA")
        vehicles[228] = AOBtoDEC("33 73 21 F8")
        vehicles[229] = AOBtoDEC("AB B3 C2 AC")
        vehicles[230] = AOBtoDEC("61 40 D8 7A")
        vehicles[231] = AOBtoDEC("FC 0E 3F D2")
        vehicles[232] = AOBtoDEC("36 A8 21 9F")
        vehicles[233] = AOBtoDEC("52 CD 96 D1")
        --SHE_MUS_SNK_12_PP1V1
        vehicles[234] = AOBtoDEC("E5 72 4B 6D")
        vehicles[235] = AOBtoDEC("1C 33 D8 46")
        vehicles[236] = AOBtoDEC("D1 0B 91 A2")
        vehicles[237] = AOBtoDEC("50 CD 86 BB")
        vehicles[238] = AOBtoDEC("1A 42 8F 27")
        vehicles[239] = AOBtoDEC("5D EB F6 4C")
        vehicles[240] = AOBtoDEC("29 5D 72 71")
        vehicles[241] = AOBtoDEC("A1 B7 55 79")
        --SHE_MUS_SNK_12_PP2V1
        vehicles[242] = AOBtoDEC("97 15 0C 2A")
        vehicles[243] = AOBtoDEC("C5 C7 F8 AC")
        vehicles[243] = AOBtoDEC("3E D8 59 83")
        vehicles[244] = AOBtoDEC("25 3E 2B 6B")
        vehicles[245] = AOBtoDEC("12 B8 45 49")
        vehicles[246] = AOBtoDEC("40 2F CB 75")
        vehicles[247] = AOBtoDEC("2F 6F DD 35")
        vehicles[248] = AOBtoDEC("67 55 2D 86")
        --SHE_MUS_SNK_12_PP3V1
        vehicles[249] = AOBtoDEC("C0 D5 BC 24")
        vehicles[250] = AOBtoDEC("68 E7 53 6E")
        vehicles[251] = AOBtoDEC("A1 87 9B 7F")
        vehicles[252] = AOBtoDEC("08 81 F4 0C")
        vehicles[253] = AOBtoDEC("EE D2 B4 81")
        vehicles[254] = AOBtoDEC("25 CD 21 BD")
        vehicles[255] = AOBtoDEC("5A 60 C9 0C")
        vehicles[256] = AOBtoDEC("52 59 00 CD")
        --SHE_DAY_COU_65_PP_STOCK_1
        vehicles[257] = 4152129083
        vehicles[258] = 3871257759
        vehicles[259] = 3289542481
        vehicles[260] = 2461231717
        vehicles[261] = 881791887
        vehicles[262] = 878544792
        vehicles[263] = 2902527303
        vehicles[264] = 1636074729
        --SHE_DAY_COU_65_PP1V1
        vehicles[265] = 1241611741
        vehicles[266] = 2683772338
        vehicles[267] = 518514680
        vehicles[268] = 3472854976
        vehicles[269] = 3523685951
        vehicles[270] = 3629261332
        vehicles[271] = 3439662912
        vehicles[272] = 2666964101
        --SHE_DAY_COU_65_PP2V1
        vehicles[273] = 2996645409
        vehicles[274] = 3314765652
        vehicles[275] = 259914488
        vehicles[276] = 1295232418
        vehicles[277] = 974990480
        vehicles[278] = 2131311971
        vehicles[279] = 1205195321
        vehicles[280] = 3631894439
        --TIER 4
        --CHE_CAM_SS_67_NFS_E
        vehicles[281] = 764119014
        --CHE_EL_CAM_70_NFS_E
        vehicles[282] = 3006189287
        --CHE_EL_CAM_70_PP_RIVAL_1
        vehicles[283] = AOBtoDEC("9C B4 8C 1D")
        --CHE_EL_CAM_70_PP_RIVAL_2
        vehicles[284] = AOBtoDEC("13 8C FE 5C")
        --CHE_EL_CAM_70_PP_RIVAL_3
        vehicles[285] = AOBtoDEC("7A AE 04 62")
        --CHE_CAM_ZL1_13_PP_RUN
        vehicles[286] = AOBtoDEC("8D 0F C1 88")
        --CHE_VET_CBN_10_PP_STOCK_1
        vehicles[287] = AOBtoDEC("9A 39 BD AC")
        vehicles[288] = AOBtoDEC("D1 55 2E 59")
        vehicles[289] = AOBtoDEC("5F FC C5 61")
        vehicles[290] = AOBtoDEC("44 C1 87 1F")
        vehicles[291] = AOBtoDEC("58 75 9B 67")
        vehicles[292] = AOBtoDEC("3C 35 AB D5")
        vehicles[293] = AOBtoDEC("03 7E D7 4B")
        vehicles[294] = AOBtoDEC("EC 66 6D F8")
        --CHE_VET_CBN_10_PP1V1
        vehicles[295] = AOBtoDEC("FE A3 3A 41")
        vehicles[296] = AOBtoDEC("9D 9F 6C A7")
        vehicles[297] = AOBtoDEC("CC DA A3 64")
        vehicles[298] = AOBtoDEC("44 0B 4C 1D")
        vehicles[299] = AOBtoDEC("B4 CB F4 C5")
        vehicles[300] = AOBtoDEC("F6 06 10 9C")
        vehicles[301] = AOBtoDEC("BA 09 B1 91")
        vehicles[302] = AOBtoDEC("9B 08 4D 34")
        --CHE_VET_CBN_10_PP2V1
        vehicles[303] = AOBtoDEC("F0 CA A4 26")
        vehicles[304] = AOBtoDEC("9B 90 1C C4")
        vehicles[305] = AOBtoDEC("30 4B A7 0D")
        vehicles[306] = AOBtoDEC("E2 3E E5 3C")
        vehicles[307] = AOBtoDEC("94 31 4A 55")
        vehicles[308] = AOBtoDEC("95 9E EF 95")
        vehicles[309] = AOBtoDEC("CA 69 A7 01")
        vehicles[310] = AOBtoDEC("2C 00 F7 C8")
        --CHE_VET_CBN_10_PP3V1
        vehicles[311] = AOBtoDEC("1E 43 48 C7")
        vehicles[312] = AOBtoDEC("98 FD 03 54")
        vehicles[313] = AOBtoDEC("97 3A 8D D8")
        vehicles[314] = AOBtoDEC("C3 20 2D 57")
        vehicles[315] = AOBtoDEC("3D BD 48 79")
        vehicles[316] = AOBtoDEC("59 10 4F 59")
        vehicles[317] = AOBtoDEC("3C 38 A7 79")
        vehicles[318] = AOBtoDEC("C4 4C 22 5A")
        --CHE_VET_CBN_10_PRESALE_1
        vehicles[319] = AOBtoDEC("0D 9E 48 57")
        --CHE_VET_CBN_10_PRESALE_1
        vehicles[320] = AOBtoDEC("B6 EE F8 CC")
        --DOD_CHA_RT_71_NFS_E
        vehicles[321] = 531246253
        --DOD_CHA_SRT_08_ADSALES_1
        vehicles[322] = AOBtoDEC("6E 69 6F 28")
        --DOD_CHA_SRT_08_NFS_E
        vehicles[323] = AOBtoDEC("63 8D 8E CC")
        --FOR_GT_STK_06_PP_STOCK_1
        vehicles[324] = AOBtoDEC("44 25 C5 CF")
        vehicles[325] = AOBtoDEC("79 AC 46 BF")
        vehicles[326] = AOBtoDEC("F9 54 F1 D9")
        vehicles[327] = AOBtoDEC("7A BD 7F 3C")
        vehicles[328] = AOBtoDEC("DA 59 8D 45")
        vehicles[329] = AOBtoDEC("7C AF EE 40")
        vehicles[330] = AOBtoDEC("48 04 24 58")
        vehicles[331] = AOBtoDEC("A8 35 2E 8C")
        --FOR_GT_STK_06_PP1V1
        vehicles[332] = AOBtoDEC("FD BD B8 C7")
        vehicles[333] = AOBtoDEC("26 76 0C 46")
        vehicles[334] = AOBtoDEC("71 85 12 AF")
        vehicles[335] = AOBtoDEC("4E 55 A2 06")
        vehicles[336] = AOBtoDEC("9D 63 88 EF")
        vehicles[337] = AOBtoDEC("70 CD F4 9C")
        vehicles[338] = AOBtoDEC("2B 3D 2B A2")
        vehicles[339] = AOBtoDEC("3C 8A 25 C7")
        --FOR_GT_STK_06_PP2V1
        vehicles[340] = AOBtoDEC("E5 38 A1 26")
        vehicles[341] = AOBtoDEC("47 98 2D D1")
        vehicles[342] = AOBtoDEC("2B 05 9C 1E")
        vehicles[343] = AOBtoDEC("45 B6 ED 8B")
        vehicles[344] = AOBtoDEC("60 80 BF 37")
        vehicles[345] = AOBtoDEC("BD EC CA 09")
        vehicles[346] = AOBtoDEC("45 44 C5 64")
        vehicles[347] = AOBtoDEC("BB CA F1 80")
        --FOR_GT_STK_06_ADSALES_1
        vehicles[348] = AOBtoDEC("9C 25 95 84")
        --FOR_MUS_BOS_12_PRESALE_1
        vehicles[349] = AOBtoDEC("C6 24 4B F5")
        --FOR_MUS_RTR_12_NFS_E
        vehicles[350] = AOBtoDEC("89 73 1A C2")
        --FOR_RTR_X_69_PP1V1
        vehicles[351] = AOBtoDEC("0B 36 E5 FF")
        --FOR_MUS_302_69_ADSALES_1
        vehicles[352] = 268766097
        --FOR_MUS_302_69_NFS_E
        vehicles[353] = 2902452387
        --SHE_DAY_COU_65_PP_RUN
        vehicles[354] = 3604153451
        --SHE_MUS_SNK_12_PP_RUN
        vehicles[355] = AOBtoDEC("52 7F 68 29")
        --PON_FIR_STK_78_NFS_E
        vehicles[356] = AOBtoDEC("41 E9 F9 A9")

        --CUSTOM MADE BY _mRally2
        --CHE_EL_CAM_70_AI_T4
        vehicles[357] = 2053301536
        vehicles[358] = 96789362
        vehicles[359] = 3393955391
        vehicles[360] = 3643384219
        --CHE_CAM_SS_67_AI_T4
        vehicles[361] = 2789574667
        vehicles[362] = 2695468121
        vehicles[363] = 2955493261
        vehicles[364] = 1157837898
        --CHE_CAM_ZL1_13_AI
        vehicles[365] = AOBtoDEC("8E A6 E6 19")
        vehicles[366] = AOBtoDEC("AC 64 BB 73")
        vehicles[367] = AOBtoDEC("A2 4A 7A 3C")
        vehicles[368] = AOBtoDEC("D1 AD 85 72")
        vehicles[369] = AOBtoDEC("A0 6C BE 3D")
        --CHE_VET_CBN_10_AI
        vehicles[370] = AOBtoDEC("DB 88 9A BD")
        vehicles[371] = AOBtoDEC("F8 58 2E 03")
        vehicles[372] = AOBtoDEC("FA 8F 9C F0")
        --DOD_CHA_RT_71_AI_T4
        vehicles[373] = 132446852
        vehicles[374] = 1161287153
        vehicles[375] = 3481124691
        vehicles[376] = 1350671612
        --DOD_CHA_SRT_08_AI
        vehicles[377] = AOBtoDEC("34 D4 8E 1A")
        vehicles[378] = AOBtoDEC("80 F6 85 A3")
        vehicles[379] = AOBtoDEC("06 74 91 C5")
        vehicles[380] = AOBtoDEC("77 C6 0E 11")
        --FOR_GT_STK_06_AI
        vehicles[381] = AOBtoDEC("4A 82 88 AD")
        vehicles[382] = AOBtoDEC("5F 98 D4 C2")
        vehicles[383] = AOBtoDEC("37 0D FC 19")
        --FOR_MUS_BOS_12_AI
        vehicles[384] = AOBtoDEC("70 E1 83 B5")
        vehicles[385] = AOBtoDEC("01 FC 52 46")
        vehicles[386] = AOBtoDEC("F1 FA D2 72")
        --FOR_MUS_RTR_12_AI
        vehicles[387] = AOBtoDEC("E9 30 96 43")
        vehicles[388] = AOBtoDEC("E3 90 28 05")
        vehicles[389] = AOBtoDEC("78 C4 98 97")
        vehicles[390] = AOBtoDEC("C7 65 54 3E")
        vehicles[391] = AOBtoDEC("BC 63 A7 20")
        --FOR_MUS_302_69_AI
        vehicles[392] = AOBtoDEC("D3 E7 51 27")
        vehicles[393] = AOBtoDEC("C4 9F F8 41")
        --PON_FIR_STK_78_AI
        vehicles[394] = AOBtoDEC("55 D7 B4 78")
        vehicles[395] = AOBtoDEC("93 FE E1 3E")
        vehicles[396] = AOBtoDEC("B1 25 4D 28")
        vehicles[397] = AOBtoDEC("9C AE C6 FC")
        --SHE_DAY_COU_65_AI_T4
        vehicles[398] = 3357183898
        vehicles[399] = 3312278586
        --SHE_MUS_SNK_12_AI
        vehicles[400] = AOBtoDEC("52 96 24 CC")
        --DOD_CHA_SRT_08
        vehicles[401] = AOBtoDEC("98 2D FB 96")
        --FOR_MUS_RTR_12
        vehicles[402] = AOBtoDEC("B6 0C 9C 9A")
        --FOR_RTR_X_69
        vehicles[403] = AOBtoDEC("05 F2 DE 5F")
        --HEN_VENOM_GT_11
        vehicles[404] = AOBtoDEC("A8 3C 53 57")
        --PON_FIR_STK_78
        vehicles[405] = AOBtoDEC("64 7C 00 58")
        --SHE_MUS_SNK_12
        vehicles[406] = AOBtoDEC("DC D0 A1 65")

        --EASTER EGG
        --COP_FOR_POL_INT_11_UNDERCOVER_TIER_4
        vehicles[407] = AOBtoDEC("C2 30 71 9E")
        --COP_FOR_POL_INT_11_STATE_SLOW_TIER_4
        vehicles[408] = AOBtoDEC("3A A1 4B EB")
        --COP_FOR_POL_INT_11_ESCAPE_TIER_4
        vehicles[409] = AOBtoDEC("50 A5 04 DF")

        local  function my_random (t,from, to)
        local num = math.random (from, to)
        if t[num] then  num = my_random (t, from, to)  end
            t[num]=num
            return num
        end

        if readInteger("[[[[027A4F60]+14]+68]+10]+4") == 1663746137 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            local fifth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x20
            local sixth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x28
            local seventh = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x30
            local eigth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x38
            local nineth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x40
            local tenth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x48
            local array = {}
            local t = {}
            for i =1, 10 do
                X = my_random (t, 1, 409)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            writeInteger(fourth,vehicles[array[4]])
            writeInteger(fifth,vehicles[array[5]])
            writeInteger(sixth,vehicles[array[6]])
            writeInteger(seventh,vehicles[array[7]])
            writeInteger(eigth,vehicles[array[8]])
            writeInteger(nineth,vehicles[array[9]])
            writeInteger(tenth,vehicles[array[10]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] and
                readInteger(fourth) == vehicles[array[4]] and
                readInteger(fifth) == vehicles[array[5]] and
                readInteger(sixth) == vehicles[array[6]] and
                readInteger(seventh) == vehicles[array[7]] and
                readInteger(eigth) == vehicles[array[8]] and
                readInteger(nineth) == vehicles[array[9]] and
                readInteger(tenth) == vehicles[array[10]] then
                print "Desert Hills Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 3471684760 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            local fifth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x20
            local sixth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x28
            local seventh = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x30
            local eigth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x38
            local nineth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x40
            local tenth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x48
            local array = {}
            local t = {}
            for i =1, 10 do
                X = my_random (t, 1, 409)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            writeInteger(fourth,vehicles[array[4]])
            writeInteger(fifth,vehicles[array[5]])
            writeInteger(sixth,vehicles[array[6]])
            writeInteger(seventh,vehicles[array[7]])
            writeInteger(eigth,vehicles[array[8]])
            writeInteger(nineth,vehicles[array[9]])
            writeInteger(tenth,vehicles[array[10]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] and
                readInteger(fourth) == vehicles[array[4]] and
                readInteger(fifth) == vehicles[array[5]] and
                readInteger(sixth) == vehicles[array[6]] and
                readInteger(seventh) == vehicles[array[7]] and
                readInteger(eigth) == vehicles[array[8]] and
                readInteger(nineth) == vehicles[array[9]] and
                readInteger(tenth) == vehicles[array[10]] then
                print "Desert Hills Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 3589993730 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            local fifth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x20
            local sixth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x28
            local seventh = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x30
            local eigth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x38
            local nineth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x40
            local tenth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x48
            local array = {}
            local t = {}
            for i =1, 10 do
                X = my_random (t, 1, 409)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            writeInteger(fourth,vehicles[array[4]])
            writeInteger(fifth,vehicles[array[5]])
            writeInteger(sixth,vehicles[array[6]])
            writeInteger(seventh,vehicles[array[7]])
            writeInteger(eigth,vehicles[array[8]])
            writeInteger(nineth,vehicles[array[9]])
            writeInteger(tenth,vehicles[array[10]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] and
                readInteger(fourth) == vehicles[array[4]] and
                readInteger(fifth) == vehicles[array[5]] and
                readInteger(sixth) == vehicles[array[6]] and
                readInteger(seventh) == vehicles[array[7]] and
                readInteger(eigth) == vehicles[array[8]] and
                readInteger(nineth) == vehicles[array[9]] and
                readInteger(tenth) == vehicles[array[10]] then
                print "Desert Hills Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 3083222042 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local array = {}
            local t = {}
            for i =1, 3 do
                X = my_random (t, 1, 409)
                array[i] = X
            end
            --writeInteger(first,vehicles[array[1]])
            --writeInteger(second,vehicles[array[2]])
            --writeInteger(third,vehicles[array[3]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] then
                print "Sierra Pass Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 746773576 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            local fifth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x20
            local sixth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x28
            local seventh = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x30
            local eigth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x38
            local nineth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x40
            local tenth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x48
            local array = {}
            local t = {}
            for i =1, 10 do
                X = my_random (t, 1, 409)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            writeInteger(fourth,vehicles[array[4]])
            writeInteger(fifth,vehicles[array[5]])
            writeInteger(sixth,vehicles[array[6]])
            writeInteger(seventh,vehicles[array[7]])
            writeInteger(eigth,vehicles[array[8]])
            writeInteger(nineth,vehicles[array[9]])
            writeInteger(tenth,vehicles[array[10]])
            if readInteger(first) == 1891289054 and
                readInteger(second) == vehicles[array[1]] and
                readInteger(third) == vehicles[array[2]] and
                readInteger(fourth) == vehicles[array[3]] and
                readInteger(fifth) == vehicles[array[4]] and
                readInteger(sixth) == vehicles[array[5]] and
                readInteger(seventh) == vehicles[array[6]] and
                readInteger(eigth) == vehicles[array[7]] and
                readInteger(nineth) == vehicles[array[8]] and
                readInteger(tenth) == vehicles[array[9]] then
                print "Desert Hills Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 3508062179 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            local fifth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x20
            local sixth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x28
            local array = {}
            local t = {}
            for i =1, 6 do
                X = my_random (t, 1, 409)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            writeInteger(fourth,vehicles[array[4]])
            writeInteger(fifth,vehicles[array[5]])
            writeInteger(sixth,vehicles[array[6]])
            if readInteger(first) == 1891289054 and
                readInteger(second) == vehicles[array[1]] and
                readInteger(third) == vehicles[array[2]] and
                readInteger(fourth) == vehicles[array[3]] and
                readInteger(fifth) == vehicles[array[4]] and
                readInteger(sixth) == vehicles[array[5]] then
                print "Death Valley A Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 1770516894 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            local array = {}
            local t = {}
            for i =1, 4 do
                X = my_random (t, 1, 409)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            writeInteger(fourth,vehicles[array[4]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] and
                readInteger(fourth) == vehicles[array[4]] then
                print "Death Valley B Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 3319259724 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local array = {}
            local t = {}
            X = my_random (t, 1, 409)
            array[1] = X
            writeInteger(first,vehicles[array[1]])
            if readInteger(first) == vehicles[array[1]] then
                print "Las Vegas East A Battle Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 570367103 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local array = {}
            local t = {}
            for i =1, 3 do
                X = my_random (t, 1, 409)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] then
                print "Sierra Pass Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 703857006 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            local fifth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x20
            local sixth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x28
            local seventh = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x30
            local eigth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x38
            local array = {}
            local t = {}
            for i =1, 8 do
                X = my_random (t, 1, 409)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            writeInteger(fourth,vehicles[array[4]])
            writeInteger(fifth,vehicles[array[5]])
            writeInteger(sixth,vehicles[array[6]])
            writeInteger(seventh,vehicles[array[7]])
            writeInteger(eigth,vehicles[array[8]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] and
                readInteger(fourth) == vehicles[array[4]] and
                readInteger(fifth) == vehicles[array[5]] and
                readInteger(sixth) == vehicles[array[6]] and
                readInteger(seventh) == vehicles[array[7]] and
                readInteger(eigth) == vehicles[array[8]] then
                print "Desert Hills Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 3268712543 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            local fifth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x20
            local sixth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x28
            local array = {}
            local t = {}
            for i =1, 6 do
                X = my_random (t, 1, 409)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            writeInteger(fourth,vehicles[array[4]])
            writeInteger(fifth,vehicles[array[5]])
            writeInteger(sixth,vehicles[array[6]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] and
                readInteger(fourth) == vehicles[array[4]] and
                readInteger(fifth) == vehicles[array[5]] and
                readInteger(sixth) == vehicles[array[6]] then
                print "Death Valley A Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 1214321547 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            local fifth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x20
            local sixth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x28
            local seventh = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x30
            local eigth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x38
            local array = {}
            local t = {}
            for i =1, 8 do
                X = my_random (t, 1, 409)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            writeInteger(fourth,vehicles[array[4]])
            writeInteger(fifth,vehicles[array[5]])
            writeInteger(sixth,vehicles[array[6]])
            writeInteger(seventh,vehicles[array[7]])
            writeInteger(eigth,vehicles[array[8]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] and
                readInteger(fourth) == vehicles[array[4]] and
                readInteger(fifth) == vehicles[array[5]] and
                readInteger(sixth) == vehicles[array[6]] and
                readInteger(seventh) == vehicles[array[7]] and
                readInteger(eigth) == vehicles[array[8]] then
                print "Desert Hills Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 502950628 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            writeInteger(first,AOBtoDEC("75 23 80 A0")) --CALVIN PLAINS RIVAL RACE
            if readInteger(first) == 1412202905 then
                print "Las Vegas East A Battle Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 757287967 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            local fifth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x20
            local sixth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x28
            local seventh = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x30
            local array = {}
            local t = {}
            for i =1, 7 do
                X = my_random (t, 1, 409)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            writeInteger(fourth,vehicles[array[4]])
            writeInteger(fifth,vehicles[array[5]])
            writeInteger(sixth,vehicles[array[6]])
            writeInteger(seventh,vehicles[array[7]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] and
                readInteger(fourth) == vehicles[array[4]] and
                readInteger(fifth) == vehicles[array[5]] and
                readInteger(sixth) == vehicles[array[6]] and
                readInteger(seventh) == vehicles[array[7]] then
                print "Desert Hills Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 2911404618 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            local array = {}
            local t = {}
            for i =1, 4 do
                X = my_random (t, 1, 409)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            writeInteger(fourth,vehicles[array[4]])
            if readInteger(first) == 1891289054 and
                readInteger(second) == vehicles[array[1]] and
                readInteger(third) == vehicles[array[2]] and
                readInteger(fourth) == vehicles[array[3]] then
                print "Death Valley B Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 2952613532 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            local fifth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x20
            local sixth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x28
            local array = {}
            local t = {}
            for i =1, 6 do
                X = my_random (t, 1, 409)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            writeInteger(fourth,vehicles[array[4]])
            writeInteger(fifth,vehicles[array[5]])
            writeInteger(sixth,vehicles[array[6]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] and
                readInteger(fourth) == vehicles[array[4]] and
                readInteger(fifth) == vehicles[array[5]] and
                readInteger(sixth) == vehicles[array[6]] then
                print "Death Valley A Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 3289858687 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            local fifth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x20
            local sixth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x28
            local seventh = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x30
            local eigth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x38
            local array = {}
            local t = {}
            for i =1, 8 do
                X = my_random (t, 1, 409)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            writeInteger(fourth,vehicles[array[4]])
            writeInteger(fifth,vehicles[array[5]])
            writeInteger(sixth,vehicles[array[6]])
            writeInteger(seventh,vehicles[array[7]])
            writeInteger(eigth,vehicles[array[8]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] and
                readInteger(fourth) == vehicles[array[4]] and
                readInteger(fifth) == vehicles[array[5]] and
                readInteger(sixth) == vehicles[array[6]] and
                readInteger(seventh) == vehicles[array[7]] and
                readInteger(eigth) == vehicles[array[8]] then
                print "Desert Hills Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 3908753765 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            local fifth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x20
            local sixth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x28
            local array = {}
            local t = {}
            for i =1, 6 do
                X = my_random (t, 1, 409)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            writeInteger(fourth,vehicles[array[4]])
            writeInteger(fifth,vehicles[array[5]])
            writeInteger(sixth,vehicles[array[6]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] and
                readInteger(fourth) == vehicles[array[4]] and
                readInteger(fifth) == vehicles[array[5]] and
                readInteger(sixth) == vehicles[array[6]] then
                print "Death Valley A Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 1844033689 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local array = {}
            local t = {}
            X = my_random (t, 1, 409)
            array[1] = X
            --writeInteger(first,vehicles[array[1]])
            if readInteger(first) == vehicles[array[1]] then
                print "Las Vegas East A Battle Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 3914415322 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            local array = {}
            local t = {}
            for i =1, 4 do
                X = my_random (t, 1, 409)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            writeInteger(fourth,vehicles[array[4]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] and
                readInteger(fourth) == vehicles[array[4]] then
                print "Death Valley B Race cars swap has completed successfully"
            end
        end
    end
end

s49 = createTimer(nil)
timer_onTimer(s49,Stage49)
timer_setInterval(s49, 500)
timer_setEnabled(s49, true)


[DISABLE]
timer_setEnabled(s49, false)
print "The Classics Run Cars Swap Stage 4 to 9 timer disabled"
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>963</ID>
          <Description>"Stage 9 10"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()
function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end
function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end
[ENABLE]
print "The Classics Run Cars Swap Stage 9 to 10 timer enabled"
function Stage910()
    if readPointer("[[[[027A4F60]+14]+68]+10]+4") ~= nil then
        if readPointer("[[[[00AA71F4]+F8]+6E8]+28]+58") ~= nil and
            readInteger("[[[[00AA71F4]+F8]+6E8]+28]+58") == 3090365568 then
            writeInteger("[[[[00AA71F4]+F8]+6E8]+28]+58",2763179715)
        end
        local vehicles = {}
        --TIER 5
        --CHE_CAM_SS_67_PP_RARE_1
        vehicles[1] = AOBtoDEC("B7 C4 AC 12")
        --CHE_CAM_ZL1_13_PP_RARE_1
        vehicles[2] = AOBtoDEC("5F E0 36 76")
        --CHE_VET_CBN_PP_RUN
        vehicles[3] = AOBtoDEC("3A FF 2E 44")
        --CHE_EL_CAM_70_PP_RARE_1
        vehicles[4] = AOBtoDEC("70 BB 38 39")
        --DOD_CHR_TAXI_PLAYER
        vehicles[5] = AOBtoDEC("40 52 76 0E")
        --FOR_VIC_TAXI_PLAYER
        vehicles[6] = AOBtoDEC("FB 4C 13 DB")
        --FOR_GT_STK_06_NFS_E
        vehicles[7] = AOBtoDEC("9D FF AA 5E")
        --FOR_GT_STK_06_PP_RARE_1
        vehicles[8] = AOBtoDEC("E0 59 1B 56")
        --FOR_MUS_BOS_12_PP_RARE_1
        vehicles[9] = AOBtoDEC("44 9B 34 FB")
        --COP_CAR_INT_11_OOS
        vehicles[10] = AOBtoDEC("9D 90 B5 DF")
        --PON_FIR_STK_78_PP_RARE_1
        vehicles[11] = AOBtoDEC("89 B3 75 B5")
        --SHE_DAY_COU_65_PP_RARE_1
        vehicles[12] = 4022012078
        --SHE_DAY_COU_65_NFS_E
        vehicles[13] = AOBtoDEC("61 6B 47 41")
        --TIER 6
        --CHE_VET_CBN_10_NFS_E
        vehicles[14] = AOBtoDEC("F3 79 48 67")
        --CHE_VET_CBN_10_PP_RARE_1
        vehicles[15] = AOBtoDEC("77 80 E0 4C")
        --HEN_VEN_GT_11_PP_STOCK_1
        vehicles[16] = AOBtoDEC("8C 6B A2 70")
        vehicles[17] = AOBtoDEC("5D 5A 6B AB")
        vehicles[18] = AOBtoDEC("3E 1B E0 6D")
        vehicles[19] = AOBtoDEC("1E A6 F3 5C")
        vehicles[20] = AOBtoDEC("14 77 20 4D")
        vehicles[21] = AOBtoDEC("48 C9 92 55")
        vehicles[22] = AOBtoDEC("7C 7B 65 99")
        vehicles[23] = AOBtoDEC("53 CE 27 8B")
        --HEN_VEN_GT_11_PP1V1
        vehicles[24] = AOBtoDEC("5D CC 55 5B")
        vehicles[25] = AOBtoDEC("DA 5F 20 60")
        vehicles[26] = AOBtoDEC("C5 E5 79 50")
        vehicles[27] = AOBtoDEC("F5 34 CB E4")
        vehicles[28] = AOBtoDEC("11 15 57 BA")
        vehicles[29] = AOBtoDEC("C1 2C 01 AD")
        vehicles[30] = AOBtoDEC("1A 9F 87 02")
        vehicles[31] = AOBtoDEC("ED 6F F9 10")

        --CUSTOM MADE BY _mRally2
        --EL CAMINO 3169722097 TIER 5
        vehicles[32] = 3169722097
        --CAMARO SS 1925569773 TIER 5
        vehicles[33] = 1925569773
        --CAMARO SS 145181003 TIER 5
        vehicles[34] = 145181003
        --ZL1 48 3B 44 54 TIER 5
        vehicles[35] = AOBtoDEC("48 3B 44 54")
        --ZL1 35 69 AD C9 TIER 5
        vehicles[36] = AOBtoDEC("35 69 AD C9")
        --ZL1 B6 1B F2 6C TIER 5
        vehicles[37] = AOBtoDEC("B6 1B F2 6C")
        --ZL1 55 CF 31 6D TIER 5
        vehicles[38] = AOBtoDEC("55 CF 31 6D")
        --CROSS CORVETTE 37 3F 8B 85 TIER 6
        vehicles[39] = AOBtoDEC("37 3F 8B 85")
        --CORVETTE 24 0A BE 49 TIER 6
        vehicles[40] = AOBtoDEC("24 0A BE 49")
        --CORVETTE 81 9C B4 DE TIER 6
        vehicles[41] = AOBtoDEC("81 9C B4 DE")
        --CORVETTE 3F 39 1A 27 TIER 5
        vehicles[42] = AOBtoDEC("3F 39 1A 27")
        --CHALLENGER 71 59 43 9F D9 TIER 5
        vehicles[43] = 1013798201
        --CHALLENGER 71 1894368909 TIER 5
        vehicles[44] = 1894368909
        --SRT8 B3 C8 F9 12 TIER 5
        vehicles[45] = AOBtoDEC("B3 C8 F9 12")
        --SRT8 6D A8 E9 ED TIER 5
        vehicles[46] = AOBtoDEC("6D A8 E9 ED")
        --FORD GT 91 98 3D 67 TIER 5
        vehicles[47] = AOBtoDEC("91 98 3D 67")
        --FORD GT 79 DF 77 14 TIER 5
        vehicles[48] = AOBtoDEC("79 DF 77 14")
        --MUSTANG BOSS 12 CD A6 7C BB TIER 5
        vehicles[49] = AOBtoDEC("CD A6 7C BB")
        --MUSTANG 69 95 9B B3 01 TIER 5
        vehicles[50] = AOBtoDEC("95 9B B3 01")
        --MUSTANG 69 73 AD 1B D6 TIER 5
        vehicles[51] = AOBtoDEC("73 AD 1B D6")
        --FIREBIRD 5E FD 52 DD TIER 5
        vehicles[52] = AOBtoDEC("5E FD 52 DD")
        --FIREBIRD 98 8F 61 29 TIER 5
        vehicles[53] = AOBtoDEC("98 8F 61 29")
        --DAYTONA 232325685 TIER 5
        vehicles[54] = 232325685
        --DAYTONA 1201503826 TIER 5
        vehicles[55] = 1201503826
        --SHELBY MUSTANG 12 69 17 CF A8 TIER 5
        vehicles[56] = AOBtoDEC("69 17 CF A8")
        --SHELBY MUSTANG 12 7F 42 17 C4 TIER 5
        vehicles[57] = AOBtoDEC("7F 42 17 C4")
        --CHE_CAM_SS_67 CAMARO SS E5 21 6D 68 TIER 5
        vehicles[58] = AOBtoDEC("E5 21 6D 68")
        --DOD_CHA_RT_71 CHALLENGER 71 59 43 9F D9 TIER 5
        vehicles[59] = AOBtoDEC("59 43 9F D9")
        --FOR_GT_STK_06 FORD GT FC 44 E7 AD TIER 5
        vehicles[60] = AOBtoDEC("FC 44 E7 AD")
        --FOR_MUS_BOS_12 MUSTANG BOSS 12 FB A3 67 A4 TIER 5
        vehicles[61] = AOBtoDEC("FB A3 67 A4")
        --SHE_DAY_COU_65 DAYTONA 86 6D 7F CF TIER 5
        vehicles[62] = AOBtoDEC("86 6D 7F CF")

        local  function my_random (t,from, to)
        local num = math.random (from, to)
        if t[num] then  num = my_random (t, from, to)  end
            t[num]=num
            return num
        end

        if readInteger("[[[[027A4F60]+14]+68]+10]+4") == 3084366756 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            local fifth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x20
            local sixth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x28
            local array = {}
            local t = {}
            for i =1, 6 do
                X = my_random (t, 1, 62)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            writeInteger(fourth,vehicles[array[4]])
            writeInteger(fifth,vehicles[array[5]])
            writeInteger(sixth,vehicles[array[6]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] and
                readInteger(fourth) == vehicles[array[4]] and
                readInteger(fifth) == vehicles[array[5]] and
                readInteger(sixth) == vehicles[array[6]] then
                print "Death Valley A Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 272462180 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local array = {}
            local t = {}
            for i =1, 3 do
                X = my_random (t, 1, 62)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] then
                print "Sierra Pass Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 4045851596 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            writeInteger(first,AOBtoDEC("2D 06 A8 6D")) --MILA T5 RIVAL RACE
            if readInteger(first) == 2588383386 then
                print "Las Vegas East A Battle Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 4214528836 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            writeInteger(first,AOBtoDEC("E0 78 5E 9D")) --EDDIE T5 RIVAL RACE
            if readInteger(first) == 1751982565 then
                print "Las Vegas East A Battle Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 3149572385 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            writeInteger(first,AOBtoDEC("75 23 80 A0")) --CALVIN T5 RIVAL RACE
            if readInteger(first) == 2514421767 then
                print "Las Vegas East A Battle Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 3229489595 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local array = {}
            local t = {}
            for i =1, 3 do
                X = my_random (t, 1, 62)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] then
                print "Sierra Pass Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 3418726804 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            writeInteger(first,1844033689) --FINAL RACE MARCUS
            if readInteger(first) == 1844033689 then
                print "Las Vegas East A Battle Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 1732090001 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            local second = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x8
            local third = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x10
            local fourth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x18
            local fifth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x20
            local sixth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x28
            local seventh = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x30
            local eigth = getAddress("[[[[027A4F60]+14]+68]+10]+4")+0x38
            local array = {}
            local t = {}
            for i =1, 8 do
                X = my_random (t, 1, 62)
                array[i] = X
            end
            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            writeInteger(fourth,vehicles[array[4]])
            writeInteger(fifth,vehicles[array[5]])
            writeInteger(sixth,vehicles[array[6]])
            writeInteger(seventh,vehicles[array[7]])
            writeInteger(eigth,vehicles[array[8]])
            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] and
                readInteger(fourth) == vehicles[array[4]] and
                readInteger(fifth) == vehicles[array[5]] and
                readInteger(sixth) == vehicles[array[6]] and
                readInteger(seventh) == vehicles[array[7]] and
                readInteger(eigth) == vehicles[array[8]] then
                print "Desert Hills Race cars swap has completed successfully"
            end
        elseif readInteger("[[[[027A4F60]+14]+68]+10]+4") == 3393955391 then
            local first = "[[[[027A4F60]+14]+68]+10]+4"
            writeInteger(first,AOBtoDEC("A1 56 67 E1")) --DELEON 300MPH RIVAL RACE
            if readInteger(first) == 3781645985 then
                print "Las Vegas East A Battle Race cars swap has completed successfully"
            end
        end
    end
end

s910 = createTimer(nil)
timer_onTimer(s910,Stage910)
timer_setInterval(s910, 500)
timer_setEnabled(s910, true)


[DISABLE]
timer_setEnabled(s910, false)
print "The Classics Run Cars Swap Stage 9 to 10 timer disabled"
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>862</ID>
          <Description>"SanFran"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()
function my_random (t,from, to)
    local num = math.random (from, to)
    if t[num] then  num = my_random (t, from, to)  end
    t[num]=num
    return num
end
function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end
function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end
[ENABLE]
--MEMORY SCAN
local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

local dummyVehicleID_1 = 0
local dummyVehicleID_2 = 0
local dummyVehicleID_3 = 0
local dummyVehicleID_4 = 0
local dummyVehicleID_5 = 0

--_c4/Gameplay/Garage/POR/TRF_POR_CAY_08
local AOB = "56 4F CC 99 * * * * 5F 63 34 2F 47 61 6D 65 70 6C 61 79 2F 47 61 72 61 67 65 2F 50 4F 52 2F 54 52 46 5F 50 4F 52 5F 43 41 59 5F 30 38"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format
if address ~= nil then
    dummyVehicleID_1 = address + 0x4
    print "String Swap Complete Complete!"
else
    print "String Swap Failed!"
end

--_c4/Gameplay/Garage/POR/POR_911_C4S_11_PP_RUN
local AOB = "56 4F CC 99 * * * * 5F 63 34 2F 47 61 6D 65 70 6C 61 79 2F 47 61 72 61 67 65 2F 50 4F 52 2F 50 4F 52 5F 39 31 31 5F 43 34 53 5F 31 31 5F 50 50 5F 52 55 4E"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format
if address ~= nil then
    dummyVehicleID_2 = address + 0x4
    print "String Swap Complete Complete!"
else
    print "String Swap Failed!"
end

--_c4/Gameplay/Garage/BMW_M3_GTS_10_STOCK
local AOB = "56 4F CC 99 * * * * 5F 63 34 2F 47 61 6D 65 70 6C 61 79 2F 47 61 72 61 67 65 2F 42 4D 57 5F 4D 33 5F 47 54 53 5F 31 30 5F 53 54 4F 43 4B"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format
if address ~= nil then
    dummyVehicleID_3 = address + 0x4
    print "String Swap Complete Complete!"
else
    print "String Swap Failed!"
end

--_c4/Gameplay/Garage/POR_993_GT2_E3
local AOB = "56 4F CC 99 * * * * 5F 63 34 2F 47 61 6D 65 70 6C 61 79 2F 47 61 72 61 67 65 2F 50 4F 52 5F 39 39 33 5F 47 54 32 5F 45 33"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format
if address ~= nil then
    dummyVehicleID_4 = address + 0x4
    print "String Swap Complete Complete!"
else
    print "String Swap Failed!"
end

--_c4/Gameplay/Garage/AUD/AUD_R8_V10_10_PP_RUN
local AOB = "56 4F CC 99 * * * * 5F 63 34 2F 47 61 6D 65 70 6C 61 79 2F 47 61 72 61 67 65 2F 41 55 44 2F 41 55 44 5F 52 38 5F 56 31 30 5F 31 30 5F 50 50 5F 52 55 4E"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format
if address ~= nil then
    dummyVehicleID_5 = address + 0x4
    print "String Swap Complete Complete!"
else
    print "String Swap Failed!"
end
math.randomseed(os.time())
print "San Francisco The Classics Run Garage Cars Randomizer timer enabled"
function SanFran()
    if readPointer("[[[[[027147B0]+344]+24]+4]+38]+0") ~= nil then
        local address2 = getAddress("[[[[[027147B0]+344]+24]+4]+38]+0")
        local address22 = address2 + 0x4
        if address2 ~= nil and readInteger(address2) == 2580303702 and readInteger(address22) == 1165774027 then
            first = address2 + 0x4
            second = address2 + 0xC
            third = address2 + 0x14
            fourth = address2 + 0x1C
            fifth = address2 + 0x24

            local  function my_random (t,from, to)
            local num = math.random (from, to)
            if t[num] then  num = my_random (t, from, to)  end
                t[num]=num
                return num
            end

            local array = {}
            local t = {}
            for i =1, 6 do
                X = my_random (t, 1, 409)
                array[i] = X
            end

            local vehicles = {}
            --TIER 1
            --CHE_CAM_SS_67_PP_STOCK_1
            vehicles[1] = 1522441908
            vehicles[2] = 150155535
            vehicles[3] = 4047731096
            vehicles[4] = 3603434424
            vehicles[5] = 933904526
            vehicles[6] = 1760866290
            vehicles[7] = 1935511816
            vehicles[8] = 3986269571
            --CHE_CAM_SS_67_PP1V1
            vehicles[9] = AOBtoDEC("3E B1 A7 B7")
            vehicles[10] = AOBtoDEC("83 B2 27 D6")
            vehicles[11] = AOBtoDEC("5E EF B4 C2")
            vehicles[12] = AOBtoDEC("F8 86 F5 9E")
            vehicles[13] = AOBtoDEC("61 44 58 2B")
            vehicles[14] = AOBtoDEC("DB 39 51 BA")
            vehicles[15] = AOBtoDEC("56 5D 05 9E")
            vehicles[16] = AOBtoDEC("66 DD B9 46")
            --CHE_CAM_SS_67_PP2V1
            vehicles[17] = AOBtoDEC("C4 3A 95 11")
            vehicles[18] = AOBtoDEC("BE 4E E8 76")
            vehicles[19] = AOBtoDEC("34 AD D8 EC")
            vehicles[20] = AOBtoDEC("43 A0 92 5E")
            vehicles[21] = AOBtoDEC("E4 9B 7D 21")
            vehicles[22] = AOBtoDEC("27 98 19 DD")
            vehicles[23] = AOBtoDEC("CF 88 F8 68")
            vehicles[24] = AOBtoDEC("1D 35 B4 12")
            --CHE_EL_CAM_70_PP_STOCK_1
            vehicles[25] = 4152999272
            vehicles[26] = 2839316226
            vehicles[27] = 850809204
            vehicles[28] = 1507013332
            vehicles[29] = 2744598914
            vehicles[30] = 874261196
            vehicles[31] = 1489277057
            vehicles[32] = 3963367876
            --CHE_EL_CAM_70_PP1V1
            vehicles[33] = AOBtoDEC("3F 10 66 E7")
            vehicles[34] = AOBtoDEC("8A 99 3A 6F")
            vehicles[35] = AOBtoDEC("81 56 76 1A")
            vehicles[36] = AOBtoDEC("FC A1 4E AF")
            vehicles[37] = AOBtoDEC("9B 56 3D 30")
            vehicles[38] = AOBtoDEC("46 3A 3A E4")
            vehicles[39] = AOBtoDEC("96 18 B9 72")
            vehicles[40] = AOBtoDEC("C5 23 54 69")
            --CHE_EL_CAM_70_PP2V1
            vehicles[41] = AOBtoDEC("0D BC 59 E7")
            vehicles[42] = AOBtoDEC("FF A5 3E 6F")
            vehicles[43] = AOBtoDEC("DE 72 79 1A")
            vehicles[44] = AOBtoDEC("B3 92 3E AF")
            vehicles[45] = AOBtoDEC("E4 24 66 3D")
            vehicles[46] = AOBtoDEC("57 45 24 E4")
            vehicles[47] = AOBtoDEC("41 C5 C4 72")
            vehicles[48] = AOBtoDEC("FF 43 48 69")
            --DOD_CHA_RT_71_PP_STOCK_1
            vehicles[49] = 658081404
            vehicles[50] = 353759425
            vehicles[51] = 897078296
            vehicles[52] = 904978235
            vehicles[53] = 1838233732
            vehicles[54] = 2193678947
            vehicles[55] = 1587191578
            vehicles[56] = 3371414360
            --DOD_CHA_RT_71_PP1V1
            vehicles[57] = AOBtoDEC("90 55 54 DB")
            vehicles[58] = AOBtoDEC("2C 8B A2 4A")
            vehicles[59] = AOBtoDEC("47 44 82 E8")
            vehicles[60] = AOBtoDEC("2C 8F 66 3F")
            vehicles[61] = AOBtoDEC("F0 27 43 C5")
            vehicles[62] = AOBtoDEC("21 BF CF 3C")
            vehicles[63] = AOBtoDEC("A9 58 13 9A")
            vehicles[64] = AOBtoDEC("BE 09 94 E7")
            --DOD_CHA_RT_71_PP2V1
            vehicles[65] = AOBtoDEC("67 A2 2D FB")
            vehicles[66] = AOBtoDEC("55 35 6F 7F")
            vehicles[67] = AOBtoDEC("97 30 AC D7")
            vehicles[68] = AOBtoDEC("6A 27 5B 0F")
            vehicles[69] = AOBtoDEC("BD DF FF 82")
            vehicles[70] = AOBtoDEC("D8 6E 35 6E")
            vehicles[71] = AOBtoDEC("2C 7F D2 AC")
            vehicles[72] = AOBtoDEC("43 0E AE B5")
            --FOR_MUS_302_69_PP_STOCK_1
            vehicles[73] = 1500183094
            vehicles[74] = 162166122
            vehicles[75] = 161538668
            vehicles[76] = 2191334224
            vehicles[77] = 3348852928
            vehicles[78] = 2138722167
            vehicles[79] = 3095976600
            vehicles[80] = 3713352339
            --FOR_MUS_302_69_PP1V1
            vehicles[81] = AOBtoDEC("67 42 63 3F")
            vehicles[82] = AOBtoDEC("08 37 D6 22")
            vehicles[83] = AOBtoDEC("D0 6B 43 26")
            vehicles[84] = AOBtoDEC("22 0C 9E 71")
            vehicles[85] = AOBtoDEC("F2 1E F2 65")
            vehicles[86] = AOBtoDEC("7D F7 A5 68")
            vehicles[87] = AOBtoDEC("6E 7F 78 56")
            vehicles[88] = AOBtoDEC("0A 74 5C E8")
            --FOR_MUS_302_69_PP2V1
            vehicles[89] = AOBtoDEC("A4 66 46 D5")
            vehicles[90] = AOBtoDEC("63 EB 74 C3")
            vehicles[91] = AOBtoDEC("03 46 F3 B1")
            vehicles[92] = AOBtoDEC("49 1D 02 9B")
            vehicles[93] = AOBtoDEC("30 DA C8 E3")
            vehicles[94] = AOBtoDEC("39 7D 83 76")
            vehicles[95] = AOBtoDEC("3E 2B 6E 55")
            vehicles[96] = AOBtoDEC("4E 9C 95 D9")
            --PON_FIR_STK_78_PP_STOCK_1
            vehicles[97] = 3681840500
            vehicles[98] = 3949993724
            vehicles[99] = 3350848715
            vehicles[100] = 2691382565
            vehicles[101] = 3379929237
            vehicles[102] = 2618823770
            vehicles[103] = 1034103769
            vehicles[104] = 4167471778
            --PON_FIR_STK_78_PP1V1
            vehicles[105] = AOBtoDEC("D9 57 CE C1")
            vehicles[106] = AOBtoDEC("E3 A5 8B AF")
            vehicles[107] = AOBtoDEC("FC DD D6 6D")
            vehicles[108] = AOBtoDEC("68 9E 4E 4E")
            vehicles[109] = AOBtoDEC("6A B0 D3 AC")
            vehicles[110] = AOBtoDEC("5C 6F 62 F7")
            vehicles[111] = AOBtoDEC("B5 FD 27 E4")
            vehicles[112] = AOBtoDEC("60 BA E2 95")
            --PON_FIR_STK_78_PP2V1
            vehicles[113] = AOBtoDEC("3D A5 9F 52")
            vehicles[114] = AOBtoDEC("AB 66 E3 AC")
            vehicles[115] = AOBtoDEC("5D 34 27 0C")
            vehicles[116] = AOBtoDEC("99 C1 3A 33")
            vehicles[117] = AOBtoDEC("8F FD 4E 32")
            vehicles[118] = AOBtoDEC("D9 46 22 B8")
            vehicles[119] = AOBtoDEC("0A DB AA E3")
            vehicles[120] = AOBtoDEC("1E 46 06 72")
            --TIER 2
            --DOD_CHA_SRT_08_PP_STOCK_1
            vehicles[121] = AOBtoDEC("4A AD 17 C0")
            vehicles[122] = AOBtoDEC("E5 6D BD 7B")
            vehicles[123] = AOBtoDEC("76 AB F5 92")
            vehicles[124] = AOBtoDEC("81 BE 89 DE")
            vehicles[125] = AOBtoDEC("61 B8 B0 EF")
            vehicles[126] = AOBtoDEC("D5 F9 94 4B")
            vehicles[127] = AOBtoDEC("1A 80 8D 6A")
            vehicles[128] = AOBtoDEC("50 AB AA 20")
            --DOD_CHA_SRT_08_PP1V1
            vehicles[129] = AOBtoDEC("16 CE F0 59")
            vehicles[130] = AOBtoDEC("9F D0 BB 96")
            vehicles[131] = AOBtoDEC("F1 7A 45 BD")
            vehicles[132] = AOBtoDEC("35 4D 59 F4")
            vehicles[133] = AOBtoDEC("61 06 5C 40")
            vehicles[134] = AOBtoDEC("EC 7B C1 1F")
            vehicles[135] = AOBtoDEC("E8 06 80 9F")
            vehicles[136] = AOBtoDEC("DD 6E F5 38")
            --DOD_CHA_SRT_08_PP2V1
            vehicles[137] = AOBtoDEC("F2 69 0A 79")
            vehicles[138] = AOBtoDEC("EB 26 0C CB")
            vehicles[139] = AOBtoDEC("56 AB 19 D2")
            vehicles[140] = AOBtoDEC("E1 7D 86 5F")
            vehicles[141] = AOBtoDEC("F0 6F 40 4E")
            vehicles[142] = AOBtoDEC("3B 36 17 0B")
            vehicles[143] = AOBtoDEC("50 03 F5 3E")
            vehicles[144] = AOBtoDEC("7E EF 10 EB")
            --DOD_CHA_SRT_08_PP3V1
            vehicles[145] = AOBtoDEC("00 94 E9 DD")
            vehicles[146] = AOBtoDEC("1A FE 5B A8")
            vehicles[147] = AOBtoDEC("2B 46 75 02")
            vehicles[148] = AOBtoDEC("1A F1 29 A4")
            vehicles[149] = AOBtoDEC("7C EC E7 C8")
            vehicles[150] = AOBtoDEC("0C C2 2A F0")
            vehicles[151] = AOBtoDEC("9A 13 B5 1F")
            vehicles[152] = AOBtoDEC("D4 FE 56 8B")
            --FOR_MUS_BOS_12_PP_STOCK_1
            vehicles[153] = AOBtoDEC("34 44 7D 5D")
            vehicles[154] = AOBtoDEC("B3 80 3F A5")
            vehicles[155] = AOBtoDEC("61 8D E8 B2")
            vehicles[156] = AOBtoDEC("6D 9F E2 93")
            vehicles[157] = AOBtoDEC("B4 BF CA 46")
            vehicles[158] = AOBtoDEC("C6 9F 57 10")
            vehicles[159] = AOBtoDEC("2F 86 0A F2")
            vehicles[160] = AOBtoDEC("73 62 4D E8")
            --FOR_MUS_BOS_12_PP1V1
            vehicles[161] = AOBtoDEC("56 CB 18 E0")
            vehicles[162] = AOBtoDEC("4D DB C2 DD")
            vehicles[163] = AOBtoDEC("40 A4 32 8E")
            vehicles[164] = AOBtoDEC("DA AD 64 08")
            vehicles[165] = AOBtoDEC("71 3A 05 4E")
            vehicles[166] = AOBtoDEC("84 55 D3 48")
            vehicles[167] = AOBtoDEC("7C 4A 30 C1")
            vehicles[168] = AOBtoDEC("63 79 CB DA")
            --FOR_MUS_BOS_12_PP2V1
            vehicles[169] = AOBtoDEC("27 D9 F0 B4")
            vehicles[170] = AOBtoDEC("D2 FF 56 12")
            vehicles[171] = AOBtoDEC("51 08 7D 09")
            vehicles[172] = AOBtoDEC("5B 7D 82 EE")
            vehicles[173] = AOBtoDEC("72 D3 98 A3")
            vehicles[174] = AOBtoDEC("2F FC 86 D4")
            vehicles[175] = AOBtoDEC("2E 39 73 93")
            vehicles[176] = AOBtoDEC("51 CA 90 B7")
            --FOR_MUS_BOS_12_PP3V1
            vehicles[177] = AOBtoDEC("9D FE 9C 9F")
            vehicles[178] = AOBtoDEC("98 E4 E0 C7")
            vehicles[179] = AOBtoDEC("02 3E 51 9A")
            vehicles[180] = AOBtoDEC("86 7C 04 A7")
            vehicles[181] = AOBtoDEC("B0 02 1B EA")
            vehicles[182] = AOBtoDEC("B7 E3 6B CE")
            vehicles[183] = AOBtoDEC("26 24 8D 63")
            vehicles[184] = AOBtoDEC("29 37 B5 05")
            --FOR_MUS_RTR_12_PP_STOCK_1
            vehicles[185] = AOBtoDEC("7B 8D C8 B0")
            vehicles[186] = AOBtoDEC("05 E8 4E 4E")
            vehicles[187] = AOBtoDEC("47 B2 2F 7A")
            vehicles[188] = AOBtoDEC("F9 1B 81 A2")
            vehicles[189] = AOBtoDEC("60 27 E0 D3")
            vehicles[190] = AOBtoDEC("AB AE 84 0A")
            vehicles[191] = AOBtoDEC("DC 9E 80 ED")
            vehicles[192] = AOBtoDEC("19 D5 D9 79")
            --FOR_MUS_RTR_12_PP1V1
            vehicles[193] = AOBtoDEC("F9 8B EC 3F")
            --TIER 3
            --CHE_CAM_ZL1_13_PP_STOCK_1
            vehicles[194] = AOBtoDEC("ED E0 00 CF")
            vehicles[195] = AOBtoDEC("7C AC E6 B1")
            vehicles[196] = AOBtoDEC("E9 F2 0C B5")
            vehicles[197] = AOBtoDEC("BB 67 9C 5E")
            vehicles[198] = AOBtoDEC("1B DE 29 4F")
            vehicles[199] = AOBtoDEC("4E B0 D9 E6")
            vehicles[200] = AOBtoDEC("37 B0 8C C4")
            vehicles[201] = AOBtoDEC("A0 73 A8 70")
            --CHE_CAM_ZL1_13_PP1V1
            vehicles[202] = AOBtoDEC("D5 D6 A0 A9")
            vehicles[203] = AOBtoDEC("07 61 E0 24")
            vehicles[204] = AOBtoDEC("D1 92 08 C0")
            vehicles[205] = AOBtoDEC("AD 46 8A 28")
            vehicles[206] = AOBtoDEC("D0 42 EE BE")
            vehicles[207] = AOBtoDEC("C5 A4 7A 1B")
            vehicles[208] = AOBtoDEC("8D 2E FA 87")
            vehicles[209] = AOBtoDEC("62 44 10 EB")
            --CHE_CAM_ZL1_13_PP2V1
            vehicles[210] = AOBtoDEC("87 AF 5F 8D")
            vehicles[211] = AOBtoDEC("EE 59 1A 5C")
            vehicles[212] = AOBtoDEC("00 08 01 A4")
            vehicles[213] = AOBtoDEC("51 82 F9 B0")
            vehicles[214] = AOBtoDEC("18 C7 81 50")
            vehicles[215] = AOBtoDEC("8C A0 8F 3F")
            vehicles[216] = AOBtoDEC("99 6D C8 07")
            vehicles[217] = AOBtoDEC("A2 44 4A 05")
            --CHE_CAM_ZL1_13_PP3V1
            vehicles[218] = AOBtoDEC("11 BB FF CE")
            vehicles[219] = AOBtoDEC("49 D2 D0 DE")
            vehicles[220] = AOBtoDEC("F7 7B C0 69")
            vehicles[221] = AOBtoDEC("05 83 41 BF")
            vehicles[222] = AOBtoDEC("38 8D 71 27")
            vehicles[223] = AOBtoDEC("B5 F0 2D B1")
            vehicles[224] = AOBtoDEC("8C 0A 59 09")
            vehicles[225] = AOBtoDEC("0C 46 37 3B")
            --SHE_MUS_SNK_12_PP_STOCK_1
            vehicles[226] = AOBtoDEC("67 53 06 F1")
            vehicles[227] = AOBtoDEC("36 9E D3 EA")
            vehicles[228] = AOBtoDEC("33 73 21 F8")
            vehicles[229] = AOBtoDEC("AB B3 C2 AC")
            vehicles[230] = AOBtoDEC("61 40 D8 7A")
            vehicles[231] = AOBtoDEC("FC 0E 3F D2")
            vehicles[232] = AOBtoDEC("36 A8 21 9F")
            vehicles[233] = AOBtoDEC("52 CD 96 D1")
            --SHE_MUS_SNK_12_PP1V1
            vehicles[234] = AOBtoDEC("E5 72 4B 6D")
            vehicles[235] = AOBtoDEC("1C 33 D8 46")
            vehicles[236] = AOBtoDEC("D1 0B 91 A2")
            vehicles[237] = AOBtoDEC("50 CD 86 BB")
            vehicles[238] = AOBtoDEC("1A 42 8F 27")
            vehicles[239] = AOBtoDEC("5D EB F6 4C")
            vehicles[240] = AOBtoDEC("29 5D 72 71")
            vehicles[241] = AOBtoDEC("A1 B7 55 79")
            --SHE_MUS_SNK_12_PP2V1
            vehicles[242] = AOBtoDEC("97 15 0C 2A")
            vehicles[243] = AOBtoDEC("C5 C7 F8 AC")
            vehicles[243] = AOBtoDEC("3E D8 59 83")
            vehicles[244] = AOBtoDEC("25 3E 2B 6B")
            vehicles[245] = AOBtoDEC("12 B8 45 49")
            vehicles[246] = AOBtoDEC("40 2F CB 75")
            vehicles[247] = AOBtoDEC("2F 6F DD 35")
            vehicles[248] = AOBtoDEC("67 55 2D 86")
            --SHE_MUS_SNK_12_PP3V1
            vehicles[249] = AOBtoDEC("C0 D5 BC 24")
            vehicles[250] = AOBtoDEC("68 E7 53 6E")
            vehicles[251] = AOBtoDEC("A1 87 9B 7F")
            vehicles[252] = AOBtoDEC("08 81 F4 0C")
            vehicles[253] = AOBtoDEC("EE D2 B4 81")
            vehicles[254] = AOBtoDEC("25 CD 21 BD")
            vehicles[255] = AOBtoDEC("5A 60 C9 0C")
            vehicles[256] = AOBtoDEC("52 59 00 CD")
            --SHE_DAY_COU_65_PP_STOCK_1
            vehicles[257] = 4152129083
            vehicles[258] = 3871257759
            vehicles[259] = 3289542481
            vehicles[260] = 2461231717
            vehicles[261] = 881791887
            vehicles[262] = 878544792
            vehicles[263] = 2902527303
            vehicles[264] = 1636074729
            --SHE_DAY_COU_65_PP1V1
            vehicles[265] = 1241611741
            vehicles[266] = 2683772338
            vehicles[267] = 518514680
            vehicles[268] = 3472854976
            vehicles[269] = 3523685951
            vehicles[270] = 3629261332
            vehicles[271] = 3439662912
            vehicles[272] = 2666964101
            --SHE_DAY_COU_65_PP2V1
            vehicles[273] = 2996645409
            vehicles[274] = 3314765652
            vehicles[275] = 259914488
            vehicles[276] = 1295232418
            vehicles[277] = 974990480
            vehicles[278] = 2131311971
            vehicles[279] = 1205195321
            vehicles[280] = 3631894439
            --TIER 4
            --CHE_CAM_SS_67_NFS_E
            vehicles[281] = 764119014
            --CHE_EL_CAM_70_NFS_E
            vehicles[282] = 3006189287
            --CHE_EL_CAM_70_PP_RIVAL_1
            vehicles[283] = AOBtoDEC("9C B4 8C 1D")
            --CHE_EL_CAM_70_PP_RIVAL_2
            vehicles[284] = AOBtoDEC("13 8C FE 5C")
            --CHE_EL_CAM_70_PP_RIVAL_3
            vehicles[285] = AOBtoDEC("7A AE 04 62")
            --CHE_CAM_ZL1_13_PP_RUN
            vehicles[286] = AOBtoDEC("8D 0F C1 88")
            --CHE_VET_CBN_10_PP_STOCK_1
            vehicles[287] = AOBtoDEC("9A 39 BD AC")
            vehicles[288] = AOBtoDEC("D1 55 2E 59")
            vehicles[289] = AOBtoDEC("5F FC C5 61")
            vehicles[290] = AOBtoDEC("44 C1 87 1F")
            vehicles[291] = AOBtoDEC("58 75 9B 67")
            vehicles[292] = AOBtoDEC("3C 35 AB D5")
            vehicles[293] = AOBtoDEC("03 7E D7 4B")
            vehicles[294] = AOBtoDEC("EC 66 6D F8")
            --CHE_VET_CBN_10_PP1V1
            vehicles[295] = AOBtoDEC("FE A3 3A 41")
            vehicles[296] = AOBtoDEC("9D 9F 6C A7")
            vehicles[297] = AOBtoDEC("CC DA A3 64")
            vehicles[298] = AOBtoDEC("44 0B 4C 1D")
            vehicles[299] = AOBtoDEC("B4 CB F4 C5")
            vehicles[300] = AOBtoDEC("F6 06 10 9C")
            vehicles[301] = AOBtoDEC("BA 09 B1 91")
            vehicles[302] = AOBtoDEC("9B 08 4D 34")
            --CHE_VET_CBN_10_PP2V1
            vehicles[303] = AOBtoDEC("F0 CA A4 26")
            vehicles[304] = AOBtoDEC("9B 90 1C C4")
            vehicles[305] = AOBtoDEC("30 4B A7 0D")
            vehicles[306] = AOBtoDEC("E2 3E E5 3C")
            vehicles[307] = AOBtoDEC("94 31 4A 55")
            vehicles[308] = AOBtoDEC("95 9E EF 95")
            vehicles[309] = AOBtoDEC("CA 69 A7 01")
            vehicles[310] = AOBtoDEC("2C 00 F7 C8")
            --CHE_VET_CBN_10_PP3V1
            vehicles[311] = AOBtoDEC("1E 43 48 C7")
            vehicles[312] = AOBtoDEC("98 FD 03 54")
            vehicles[313] = AOBtoDEC("97 3A 8D D8")
            vehicles[314] = AOBtoDEC("C3 20 2D 57")
            vehicles[315] = AOBtoDEC("3D BD 48 79")
            vehicles[316] = AOBtoDEC("59 10 4F 59")
            vehicles[317] = AOBtoDEC("3C 38 A7 79")
            vehicles[318] = AOBtoDEC("C4 4C 22 5A")
            --CHE_VET_CBN_10_PRESALE_1
            vehicles[319] = AOBtoDEC("0D 9E 48 57")
            --CHE_VET_CBN_10_PRESALE_1
            vehicles[320] = AOBtoDEC("B6 EE F8 CC")
            --DOD_CHA_RT_71_NFS_E
            vehicles[321] = 531246253
            --DOD_CHA_SRT_08_ADSALES_1
            vehicles[322] = AOBtoDEC("6E 69 6F 28")
            --DOD_CHA_SRT_08_NFS_E
            vehicles[323] = AOBtoDEC("63 8D 8E CC")
            --FOR_GT_STK_06_PP_STOCK_1
            vehicles[324] = AOBtoDEC("44 25 C5 CF")
            vehicles[325] = AOBtoDEC("79 AC 46 BF")
            vehicles[326] = AOBtoDEC("F9 54 F1 D9")
            vehicles[327] = AOBtoDEC("7A BD 7F 3C")
            vehicles[328] = AOBtoDEC("DA 59 8D 45")
            vehicles[329] = AOBtoDEC("7C AF EE 40")
            vehicles[330] = AOBtoDEC("48 04 24 58")
            vehicles[331] = AOBtoDEC("A8 35 2E 8C")
            --FOR_GT_STK_06_PP1V1
            vehicles[332] = AOBtoDEC("FD BD B8 C7")
            vehicles[333] = AOBtoDEC("26 76 0C 46")
            vehicles[334] = AOBtoDEC("71 85 12 AF")
            vehicles[335] = AOBtoDEC("4E 55 A2 06")
            vehicles[336] = AOBtoDEC("9D 63 88 EF")
            vehicles[337] = AOBtoDEC("70 CD F4 9C")
            vehicles[338] = AOBtoDEC("2B 3D 2B A2")
            vehicles[339] = AOBtoDEC("3C 8A 25 C7")
            --FOR_GT_STK_06_PP2V1
            vehicles[340] = AOBtoDEC("E5 38 A1 26")
            vehicles[341] = AOBtoDEC("47 98 2D D1")
            vehicles[342] = AOBtoDEC("2B 05 9C 1E")
            vehicles[343] = AOBtoDEC("45 B6 ED 8B")
            vehicles[344] = AOBtoDEC("60 80 BF 37")
            vehicles[345] = AOBtoDEC("BD EC CA 09")
            vehicles[346] = AOBtoDEC("45 44 C5 64")
            vehicles[347] = AOBtoDEC("BB CA F1 80")
            --FOR_GT_STK_06_ADSALES_1
            vehicles[348] = AOBtoDEC("9C 25 95 84")
            --FOR_MUS_BOS_12_PRESALE_1
            vehicles[349] = AOBtoDEC("C6 24 4B F5")
            --FOR_MUS_RTR_12_NFS_E
            vehicles[350] = AOBtoDEC("89 73 1A C2")
            --FOR_RTR_X_69_PP1V1
            vehicles[351] = AOBtoDEC("0B 36 E5 FF")
            --FOR_MUS_302_69_ADSALES_1
            vehicles[352] = 268766097
            --FOR_MUS_302_69_NFS_E
            vehicles[353] = 2902452387
            --SHE_DAY_COU_65_PP_RUN
            vehicles[354] = 3604153451
            --SHE_MUS_SNK_12_PP_RUN
            vehicles[355] = AOBtoDEC("52 7F 68 29")
            --PON_FIR_STK_78_NFS_E
            vehicles[356] = AOBtoDEC("41 E9 F9 A9")

            --CUSTOM MADE BY _mRally2
            --CHE_EL_CAM_70_AI_T4
            vehicles[357] = 2053301536
            vehicles[358] = 96789362
            vehicles[359] = 3393955391
            vehicles[360] = 3643384219
            --CHE_CAM_SS_67_AI_T4
            vehicles[361] = 2789574667
            vehicles[362] = 2695468121
            vehicles[363] = 2955493261
            vehicles[364] = 1157837898
            --CHE_CAM_ZL1_13_AI
            vehicles[365] = AOBtoDEC("8E A6 E6 19")
            vehicles[366] = AOBtoDEC("AC 64 BB 73")
            vehicles[367] = AOBtoDEC("A2 4A 7A 3C")
            vehicles[368] = AOBtoDEC("D1 AD 85 72")
            vehicles[369] = AOBtoDEC("A0 6C BE 3D")
            --CHE_VET_CBN_10_AI
            vehicles[370] = AOBtoDEC("DB 88 9A BD")
            vehicles[371] = AOBtoDEC("F8 58 2E 03")
            vehicles[372] = AOBtoDEC("FA 8F 9C F0")
            --DOD_CHA_RT_71_AI_T4
            vehicles[373] = 132446852
            vehicles[374] = 1161287153
            vehicles[375] = 3481124691
            vehicles[376] = 1350671612
            --DOD_CHA_SRT_08_AI
            vehicles[377] = AOBtoDEC("34 D4 8E 1A")
            vehicles[378] = AOBtoDEC("80 F6 85 A3")
            vehicles[379] = AOBtoDEC("06 74 91 C5")
            vehicles[380] = AOBtoDEC("77 C6 0E 11")
            --FOR_GT_STK_06_AI
            vehicles[381] = AOBtoDEC("4A 82 88 AD")
            vehicles[382] = AOBtoDEC("5F 98 D4 C2")
            vehicles[383] = AOBtoDEC("37 0D FC 19")
            --FOR_MUS_BOS_12_AI
            vehicles[384] = AOBtoDEC("70 E1 83 B5")
            vehicles[385] = AOBtoDEC("01 FC 52 46")
            vehicles[386] = AOBtoDEC("F1 FA D2 72")
            --FOR_MUS_RTR_12_AI
            vehicles[387] = AOBtoDEC("E9 30 96 43")
            vehicles[388] = AOBtoDEC("E3 90 28 05")
            vehicles[389] = AOBtoDEC("78 C4 98 97")
            vehicles[390] = AOBtoDEC("C7 65 54 3E")
            vehicles[391] = AOBtoDEC("BC 63 A7 20")
            --FOR_MUS_302_69_AI
            vehicles[392] = AOBtoDEC("D3 E7 51 27")
            vehicles[393] = AOBtoDEC("C4 9F F8 41")
            --PON_FIR_STK_78_AI
            vehicles[394] = AOBtoDEC("55 D7 B4 78")
            vehicles[395] = AOBtoDEC("93 FE E1 3E")
            vehicles[396] = AOBtoDEC("B1 25 4D 28")
            vehicles[397] = AOBtoDEC("9C AE C6 FC")
            --SHE_DAY_COU_65_AI_T4
            vehicles[398] = 3357183898
            vehicles[399] = 3312278586
            --SHE_MUS_SNK_12_AI
            vehicles[400] = AOBtoDEC("52 96 24 CC")
            --DOD_CHA_SRT_08
            vehicles[401] = AOBtoDEC("98 2D FB 96")
            --FOR_MUS_RTR_12
            vehicles[402] = AOBtoDEC("B6 0C 9C 9A")
            --FOR_RTR_X_69
            vehicles[403] = AOBtoDEC("05 F2 DE 5F")
            --HEN_VENOM_GT_11
            vehicles[404] = AOBtoDEC("A8 3C 53 57")
            --PON_FIR_STK_78
            vehicles[405] = AOBtoDEC("64 7C 00 58")
            --SHE_MUS_SNK_12
            vehicles[406] = AOBtoDEC("DC D0 A1 65")

            --EASTER EGG
            --COP_FOR_POL_INT_11_UNDERCOVER_TIER_4
            vehicles[407] = AOBtoDEC("C2 30 71 9E")
            --COP_FOR_POL_INT_11_STATE_SLOW_TIER_4
            vehicles[408] = AOBtoDEC("3A A1 4B EB")
            --COP_FOR_POL_INT_11_ESCAPE_TIER_4
            vehicles[409] = AOBtoDEC("50 A5 04 DF")

            --WE WRITE FIRST THE VEHICLES INTO THE DUMMY PRESETS IN ORDER TO MAKE THEM SELECTABLE
            writeInteger(dummyVehicleID_1,vehicles[array[1]])
            writeInteger(dummyVehicleID_2,vehicles[array[2]])
            writeInteger(dummyVehicleID_4,vehicles[array[3]])
            writeInteger(dummyVehicleID_5,vehicles[array[4]])
            writeInteger(dummyVehicleID_6,vehicles[array[5]])

            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            writeInteger(fourth,vehicles[array[4]])
            writeInteger(fifth,vehicles[array[5]])

            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] and
                readInteger(fourth) == vehicles[array[4]] and
                readInteger(fifth) == vehicles[array[5]] then
                print "The swap has completed successfully"
            end
        end
    end
end

sf = createTimer(nil)
timer_onTimer(sf,SanFran)
timer_setInterval(sf, 500)
timer_setEnabled(sf, true)

[DISABLE]
timer_setEnabled(sf, false)
print "San Francisco The Classics Run Garage Cars Randomizer timer disabled"
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>863</ID>
          <Description>"LasVegas"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()
function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end
function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end
[ENABLE]
--MEMORY SCAN
local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

local dummyVehicleID_1 = 0
local dummyVehicleID_2 = 0
local dummyVehicleID_3 = 0

--_c4/Gameplay/Garage/POR/TRF_POR_CAY_08
local AOB = "56 4F CC 99 * * * * 5F 63 34 2F 47 61 6D 65 70 6C 61 79 2F 47 61 72 61 67 65 2F 50 4F 52 2F 54 52 46 5F 50 4F 52 5F 43 41 59 5F 30 38"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format
if address ~= nil then
    dummyVehicleID_1 = address + 0x4
    print "String Swap Complete Complete!"
else
    print "String Swap Failed!"
end

--_c4/Gameplay/Garage/POR/POR_911_C4S_11_PP_RUN
local AOB = "56 4F CC 99 * * * * 5F 63 34 2F 47 61 6D 65 70 6C 61 79 2F 47 61 72 61 67 65 2F 50 4F 52 2F 50 4F 52 5F 39 31 31 5F 43 34 53 5F 31 31 5F 50 50 5F 52 55 4E"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format
if address ~= nil then
    dummyVehicleID_2 = address + 0x4
    print "String Swap Complete Complete!"
else
    print "String Swap Failed!"
end

--_c4/Gameplay/Garage/BMW_M3_GTS_10_STOCK
local AOB = "56 4F CC 99 * * * * 5F 63 34 2F 47 61 6D 65 70 6C 61 79 2F 47 61 72 61 67 65 2F 42 4D 57 5F 4D 33 5F 47 54 53 5F 31 30 5F 53 54 4F 43 4B"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format
if address ~= nil then
    dummyVehicleID_3 = address + 0x4
    print "String Swap Complete Complete!"
else
    print "String Swap Failed!"
end
math.randomseed(os.time())
print "Las Vegas East The Classics Run Tier 3 Cars Select Randomizer timer enabled"
function LasVegas()
    if readPointer("[[[[027147B0]+56C]+64]+A0]+0") ~= nil then
        local lastCarClassID = getAddress("[[[[027147B0]+56C]+64]+A0]+0")
        local lastCarID = lastCarClassID + 0x4
        if lastCarClassID ~= nil and readInteger(lastCarClassID) == 2580303702 and readInteger(lastCarID) == 3662254698 then
            first = lastCarClassID + 0x4
            second = lastCarClassID + 0xC
            third = lastCarClassID + 0x14
            local  function my_random (t,from, to)
            local num = math.random (from, to)
            if t[num] then  num = my_random (t, from, to)  end
                t[num]=num
                return num
            end
            local array = {}
            local t = {}
            for i =1, 3 do
                X = my_random (t, 1, 409)
                array[i] = X
            end

            local vehicles = {}
            --TIER 1
            --CHE_CAM_SS_67_PP_STOCK_1
            vehicles[1] = 1522441908
            vehicles[2] = 150155535
            vehicles[3] = 4047731096
            vehicles[4] = 3603434424
            vehicles[5] = 933904526
            vehicles[6] = 1760866290
            vehicles[7] = 1935511816
            vehicles[8] = 3986269571
            --CHE_CAM_SS_67_PP1V1
            vehicles[9] = AOBtoDEC("3E B1 A7 B7")
            vehicles[10] = AOBtoDEC("83 B2 27 D6")
            vehicles[11] = AOBtoDEC("5E EF B4 C2")
            vehicles[12] = AOBtoDEC("F8 86 F5 9E")
            vehicles[13] = AOBtoDEC("61 44 58 2B")
            vehicles[14] = AOBtoDEC("DB 39 51 BA")
            vehicles[15] = AOBtoDEC("56 5D 05 9E")
            vehicles[16] = AOBtoDEC("66 DD B9 46")
            --CHE_CAM_SS_67_PP2V1
            vehicles[17] = AOBtoDEC("C4 3A 95 11")
            vehicles[18] = AOBtoDEC("BE 4E E8 76")
            vehicles[19] = AOBtoDEC("34 AD D8 EC")
            vehicles[20] = AOBtoDEC("43 A0 92 5E")
            vehicles[21] = AOBtoDEC("E4 9B 7D 21")
            vehicles[22] = AOBtoDEC("27 98 19 DD")
            vehicles[23] = AOBtoDEC("CF 88 F8 68")
            vehicles[24] = AOBtoDEC("1D 35 B4 12")
            --CHE_EL_CAM_70_PP_STOCK_1
            vehicles[25] = 4152999272
            vehicles[26] = 2839316226
            vehicles[27] = 850809204
            vehicles[28] = 1507013332
            vehicles[29] = 2744598914
            vehicles[30] = 874261196
            vehicles[31] = 1489277057
            vehicles[32] = 3963367876
            --CHE_EL_CAM_70_PP1V1
            vehicles[33] = AOBtoDEC("3F 10 66 E7")
            vehicles[34] = AOBtoDEC("8A 99 3A 6F")
            vehicles[35] = AOBtoDEC("81 56 76 1A")
            vehicles[36] = AOBtoDEC("FC A1 4E AF")
            vehicles[37] = AOBtoDEC("9B 56 3D 30")
            vehicles[38] = AOBtoDEC("46 3A 3A E4")
            vehicles[39] = AOBtoDEC("96 18 B9 72")
            vehicles[40] = AOBtoDEC("C5 23 54 69")
            --CHE_EL_CAM_70_PP2V1
            vehicles[41] = AOBtoDEC("0D BC 59 E7")
            vehicles[42] = AOBtoDEC("FF A5 3E 6F")
            vehicles[43] = AOBtoDEC("DE 72 79 1A")
            vehicles[44] = AOBtoDEC("B3 92 3E AF")
            vehicles[45] = AOBtoDEC("E4 24 66 3D")
            vehicles[46] = AOBtoDEC("57 45 24 E4")
            vehicles[47] = AOBtoDEC("41 C5 C4 72")
            vehicles[48] = AOBtoDEC("FF 43 48 69")
            --DOD_CHA_RT_71_PP_STOCK_1
            vehicles[49] = 658081404
            vehicles[50] = 353759425
            vehicles[51] = 897078296
            vehicles[52] = 904978235
            vehicles[53] = 1838233732
            vehicles[54] = 2193678947
            vehicles[55] = 1587191578
            vehicles[56] = 3371414360
            --DOD_CHA_RT_71_PP1V1
            vehicles[57] = AOBtoDEC("90 55 54 DB")
            vehicles[58] = AOBtoDEC("2C 8B A2 4A")
            vehicles[59] = AOBtoDEC("47 44 82 E8")
            vehicles[60] = AOBtoDEC("2C 8F 66 3F")
            vehicles[61] = AOBtoDEC("F0 27 43 C5")
            vehicles[62] = AOBtoDEC("21 BF CF 3C")
            vehicles[63] = AOBtoDEC("A9 58 13 9A")
            vehicles[64] = AOBtoDEC("BE 09 94 E7")
            --DOD_CHA_RT_71_PP2V1
            vehicles[65] = AOBtoDEC("67 A2 2D FB")
            vehicles[66] = AOBtoDEC("55 35 6F 7F")
            vehicles[67] = AOBtoDEC("97 30 AC D7")
            vehicles[68] = AOBtoDEC("6A 27 5B 0F")
            vehicles[69] = AOBtoDEC("BD DF FF 82")
            vehicles[70] = AOBtoDEC("D8 6E 35 6E")
            vehicles[71] = AOBtoDEC("2C 7F D2 AC")
            vehicles[72] = AOBtoDEC("43 0E AE B5")
            --FOR_MUS_302_69_PP_STOCK_1
            vehicles[73] = 1500183094
            vehicles[74] = 162166122
            vehicles[75] = 161538668
            vehicles[76] = 2191334224
            vehicles[77] = 3348852928
            vehicles[78] = 2138722167
            vehicles[79] = 3095976600
            vehicles[80] = 3713352339
            --FOR_MUS_302_69_PP1V1
            vehicles[81] = AOBtoDEC("67 42 63 3F")
            vehicles[82] = AOBtoDEC("08 37 D6 22")
            vehicles[83] = AOBtoDEC("D0 6B 43 26")
            vehicles[84] = AOBtoDEC("22 0C 9E 71")
            vehicles[85] = AOBtoDEC("F2 1E F2 65")
            vehicles[86] = AOBtoDEC("7D F7 A5 68")
            vehicles[87] = AOBtoDEC("6E 7F 78 56")
            vehicles[88] = AOBtoDEC("0A 74 5C E8")
            --FOR_MUS_302_69_PP2V1
            vehicles[89] = AOBtoDEC("A4 66 46 D5")
            vehicles[90] = AOBtoDEC("63 EB 74 C3")
            vehicles[91] = AOBtoDEC("03 46 F3 B1")
            vehicles[92] = AOBtoDEC("49 1D 02 9B")
            vehicles[93] = AOBtoDEC("30 DA C8 E3")
            vehicles[94] = AOBtoDEC("39 7D 83 76")
            vehicles[95] = AOBtoDEC("3E 2B 6E 55")
            vehicles[96] = AOBtoDEC("4E 9C 95 D9")
            --PON_FIR_STK_78_PP_STOCK_1
            vehicles[97] = 3681840500
            vehicles[98] = 3949993724
            vehicles[99] = 3350848715
            vehicles[100] = 2691382565
            vehicles[101] = 3379929237
            vehicles[102] = 2618823770
            vehicles[103] = 1034103769
            vehicles[104] = 4167471778
            --PON_FIR_STK_78_PP1V1
            vehicles[105] = AOBtoDEC("D9 57 CE C1")
            vehicles[106] = AOBtoDEC("E3 A5 8B AF")
            vehicles[107] = AOBtoDEC("FC DD D6 6D")
            vehicles[108] = AOBtoDEC("68 9E 4E 4E")
            vehicles[109] = AOBtoDEC("6A B0 D3 AC")
            vehicles[110] = AOBtoDEC("5C 6F 62 F7")
            vehicles[111] = AOBtoDEC("B5 FD 27 E4")
            vehicles[112] = AOBtoDEC("60 BA E2 95")
            --PON_FIR_STK_78_PP2V1
            vehicles[113] = AOBtoDEC("3D A5 9F 52")
            vehicles[114] = AOBtoDEC("AB 66 E3 AC")
            vehicles[115] = AOBtoDEC("5D 34 27 0C")
            vehicles[116] = AOBtoDEC("99 C1 3A 33")
            vehicles[117] = AOBtoDEC("8F FD 4E 32")
            vehicles[118] = AOBtoDEC("D9 46 22 B8")
            vehicles[119] = AOBtoDEC("0A DB AA E3")
            vehicles[120] = AOBtoDEC("1E 46 06 72")
            --TIER 2
            --DOD_CHA_SRT_08_PP_STOCK_1
            vehicles[121] = AOBtoDEC("4A AD 17 C0")
            vehicles[122] = AOBtoDEC("E5 6D BD 7B")
            vehicles[123] = AOBtoDEC("76 AB F5 92")
            vehicles[124] = AOBtoDEC("81 BE 89 DE")
            vehicles[125] = AOBtoDEC("61 B8 B0 EF")
            vehicles[126] = AOBtoDEC("D5 F9 94 4B")
            vehicles[127] = AOBtoDEC("1A 80 8D 6A")
            vehicles[128] = AOBtoDEC("50 AB AA 20")
            --DOD_CHA_SRT_08_PP1V1
            vehicles[129] = AOBtoDEC("16 CE F0 59")
            vehicles[130] = AOBtoDEC("9F D0 BB 96")
            vehicles[131] = AOBtoDEC("F1 7A 45 BD")
            vehicles[132] = AOBtoDEC("35 4D 59 F4")
            vehicles[133] = AOBtoDEC("61 06 5C 40")
            vehicles[134] = AOBtoDEC("EC 7B C1 1F")
            vehicles[135] = AOBtoDEC("E8 06 80 9F")
            vehicles[136] = AOBtoDEC("DD 6E F5 38")
            --DOD_CHA_SRT_08_PP2V1
            vehicles[137] = AOBtoDEC("F2 69 0A 79")
            vehicles[138] = AOBtoDEC("EB 26 0C CB")
            vehicles[139] = AOBtoDEC("56 AB 19 D2")
            vehicles[140] = AOBtoDEC("E1 7D 86 5F")
            vehicles[141] = AOBtoDEC("F0 6F 40 4E")
            vehicles[142] = AOBtoDEC("3B 36 17 0B")
            vehicles[143] = AOBtoDEC("50 03 F5 3E")
            vehicles[144] = AOBtoDEC("7E EF 10 EB")
            --DOD_CHA_SRT_08_PP3V1
            vehicles[145] = AOBtoDEC("00 94 E9 DD")
            vehicles[146] = AOBtoDEC("1A FE 5B A8")
            vehicles[147] = AOBtoDEC("2B 46 75 02")
            vehicles[148] = AOBtoDEC("1A F1 29 A4")
            vehicles[149] = AOBtoDEC("7C EC E7 C8")
            vehicles[150] = AOBtoDEC("0C C2 2A F0")
            vehicles[151] = AOBtoDEC("9A 13 B5 1F")
            vehicles[152] = AOBtoDEC("D4 FE 56 8B")
            --FOR_MUS_BOS_12_PP_STOCK_1
            vehicles[153] = AOBtoDEC("34 44 7D 5D")
            vehicles[154] = AOBtoDEC("B3 80 3F A5")
            vehicles[155] = AOBtoDEC("61 8D E8 B2")
            vehicles[156] = AOBtoDEC("6D 9F E2 93")
            vehicles[157] = AOBtoDEC("B4 BF CA 46")
            vehicles[158] = AOBtoDEC("C6 9F 57 10")
            vehicles[159] = AOBtoDEC("2F 86 0A F2")
            vehicles[160] = AOBtoDEC("73 62 4D E8")
            --FOR_MUS_BOS_12_PP1V1
            vehicles[161] = AOBtoDEC("56 CB 18 E0")
            vehicles[162] = AOBtoDEC("4D DB C2 DD")
            vehicles[163] = AOBtoDEC("40 A4 32 8E")
            vehicles[164] = AOBtoDEC("DA AD 64 08")
            vehicles[165] = AOBtoDEC("71 3A 05 4E")
            vehicles[166] = AOBtoDEC("84 55 D3 48")
            vehicles[167] = AOBtoDEC("7C 4A 30 C1")
            vehicles[168] = AOBtoDEC("63 79 CB DA")
            --FOR_MUS_BOS_12_PP2V1
            vehicles[169] = AOBtoDEC("27 D9 F0 B4")
            vehicles[170] = AOBtoDEC("D2 FF 56 12")
            vehicles[171] = AOBtoDEC("51 08 7D 09")
            vehicles[172] = AOBtoDEC("5B 7D 82 EE")
            vehicles[173] = AOBtoDEC("72 D3 98 A3")
            vehicles[174] = AOBtoDEC("2F FC 86 D4")
            vehicles[175] = AOBtoDEC("2E 39 73 93")
            vehicles[176] = AOBtoDEC("51 CA 90 B7")
            --FOR_MUS_BOS_12_PP3V1
            vehicles[177] = AOBtoDEC("9D FE 9C 9F")
            vehicles[178] = AOBtoDEC("98 E4 E0 C7")
            vehicles[179] = AOBtoDEC("02 3E 51 9A")
            vehicles[180] = AOBtoDEC("86 7C 04 A7")
            vehicles[181] = AOBtoDEC("B0 02 1B EA")
            vehicles[182] = AOBtoDEC("B7 E3 6B CE")
            vehicles[183] = AOBtoDEC("26 24 8D 63")
            vehicles[184] = AOBtoDEC("29 37 B5 05")
            --FOR_MUS_RTR_12_PP_STOCK_1
            vehicles[185] = AOBtoDEC("7B 8D C8 B0")
            vehicles[186] = AOBtoDEC("05 E8 4E 4E")
            vehicles[187] = AOBtoDEC("47 B2 2F 7A")
            vehicles[188] = AOBtoDEC("F9 1B 81 A2")
            vehicles[189] = AOBtoDEC("60 27 E0 D3")
            vehicles[190] = AOBtoDEC("AB AE 84 0A")
            vehicles[191] = AOBtoDEC("DC 9E 80 ED")
            vehicles[192] = AOBtoDEC("19 D5 D9 79")
            --FOR_MUS_RTR_12_PP1V1
            vehicles[193] = AOBtoDEC("F9 8B EC 3F")
            --TIER 3
            --CHE_CAM_ZL1_13_PP_STOCK_1
            vehicles[194] = AOBtoDEC("ED E0 00 CF")
            vehicles[195] = AOBtoDEC("7C AC E6 B1")
            vehicles[196] = AOBtoDEC("E9 F2 0C B5")
            vehicles[197] = AOBtoDEC("BB 67 9C 5E")
            vehicles[198] = AOBtoDEC("1B DE 29 4F")
            vehicles[199] = AOBtoDEC("4E B0 D9 E6")
            vehicles[200] = AOBtoDEC("37 B0 8C C4")
            vehicles[201] = AOBtoDEC("A0 73 A8 70")
            --CHE_CAM_ZL1_13_PP1V1
            vehicles[202] = AOBtoDEC("D5 D6 A0 A9")
            vehicles[203] = AOBtoDEC("07 61 E0 24")
            vehicles[204] = AOBtoDEC("D1 92 08 C0")
            vehicles[205] = AOBtoDEC("AD 46 8A 28")
            vehicles[206] = AOBtoDEC("D0 42 EE BE")
            vehicles[207] = AOBtoDEC("C5 A4 7A 1B")
            vehicles[208] = AOBtoDEC("8D 2E FA 87")
            vehicles[209] = AOBtoDEC("62 44 10 EB")
            --CHE_CAM_ZL1_13_PP2V1
            vehicles[210] = AOBtoDEC("87 AF 5F 8D")
            vehicles[211] = AOBtoDEC("EE 59 1A 5C")
            vehicles[212] = AOBtoDEC("00 08 01 A4")
            vehicles[213] = AOBtoDEC("51 82 F9 B0")
            vehicles[214] = AOBtoDEC("18 C7 81 50")
            vehicles[215] = AOBtoDEC("8C A0 8F 3F")
            vehicles[216] = AOBtoDEC("99 6D C8 07")
            vehicles[217] = AOBtoDEC("A2 44 4A 05")
            --CHE_CAM_ZL1_13_PP3V1
            vehicles[218] = AOBtoDEC("11 BB FF CE")
            vehicles[219] = AOBtoDEC("49 D2 D0 DE")
            vehicles[220] = AOBtoDEC("F7 7B C0 69")
            vehicles[221] = AOBtoDEC("05 83 41 BF")
            vehicles[222] = AOBtoDEC("38 8D 71 27")
            vehicles[223] = AOBtoDEC("B5 F0 2D B1")
            vehicles[224] = AOBtoDEC("8C 0A 59 09")
            vehicles[225] = AOBtoDEC("0C 46 37 3B")
            --SHE_MUS_SNK_12_PP_STOCK_1
            vehicles[226] = AOBtoDEC("67 53 06 F1")
            vehicles[227] = AOBtoDEC("36 9E D3 EA")
            vehicles[228] = AOBtoDEC("33 73 21 F8")
            vehicles[229] = AOBtoDEC("AB B3 C2 AC")
            vehicles[230] = AOBtoDEC("61 40 D8 7A")
            vehicles[231] = AOBtoDEC("FC 0E 3F D2")
            vehicles[232] = AOBtoDEC("36 A8 21 9F")
            vehicles[233] = AOBtoDEC("52 CD 96 D1")
            --SHE_MUS_SNK_12_PP1V1
            vehicles[234] = AOBtoDEC("E5 72 4B 6D")
            vehicles[235] = AOBtoDEC("1C 33 D8 46")
            vehicles[236] = AOBtoDEC("D1 0B 91 A2")
            vehicles[237] = AOBtoDEC("50 CD 86 BB")
            vehicles[238] = AOBtoDEC("1A 42 8F 27")
            vehicles[239] = AOBtoDEC("5D EB F6 4C")
            vehicles[240] = AOBtoDEC("29 5D 72 71")
            vehicles[241] = AOBtoDEC("A1 B7 55 79")
            --SHE_MUS_SNK_12_PP2V1
            vehicles[242] = AOBtoDEC("97 15 0C 2A")
            vehicles[243] = AOBtoDEC("C5 C7 F8 AC")
            vehicles[243] = AOBtoDEC("3E D8 59 83")
            vehicles[244] = AOBtoDEC("25 3E 2B 6B")
            vehicles[245] = AOBtoDEC("12 B8 45 49")
            vehicles[246] = AOBtoDEC("40 2F CB 75")
            vehicles[247] = AOBtoDEC("2F 6F DD 35")
            vehicles[248] = AOBtoDEC("67 55 2D 86")
            --SHE_MUS_SNK_12_PP3V1
            vehicles[249] = AOBtoDEC("C0 D5 BC 24")
            vehicles[250] = AOBtoDEC("68 E7 53 6E")
            vehicles[251] = AOBtoDEC("A1 87 9B 7F")
            vehicles[252] = AOBtoDEC("08 81 F4 0C")
            vehicles[253] = AOBtoDEC("EE D2 B4 81")
            vehicles[254] = AOBtoDEC("25 CD 21 BD")
            vehicles[255] = AOBtoDEC("5A 60 C9 0C")
            vehicles[256] = AOBtoDEC("52 59 00 CD")
            --SHE_DAY_COU_65_PP_STOCK_1
            vehicles[257] = 4152129083
            vehicles[258] = 3871257759
            vehicles[259] = 3289542481
            vehicles[260] = 2461231717
            vehicles[261] = 881791887
            vehicles[262] = 878544792
            vehicles[263] = 2902527303
            vehicles[264] = 1636074729
            --SHE_DAY_COU_65_PP1V1
            vehicles[265] = 1241611741
            vehicles[266] = 2683772338
            vehicles[267] = 518514680
            vehicles[268] = 3472854976
            vehicles[269] = 3523685951
            vehicles[270] = 3629261332
            vehicles[271] = 3439662912
            vehicles[272] = 2666964101
            --SHE_DAY_COU_65_PP2V1
            vehicles[273] = 2996645409
            vehicles[274] = 3314765652
            vehicles[275] = 259914488
            vehicles[276] = 1295232418
            vehicles[277] = 974990480
            vehicles[278] = 2131311971
            vehicles[279] = 1205195321
            vehicles[280] = 3631894439
            --TIER 4
            --CHE_CAM_SS_67_NFS_E
            vehicles[281] = 764119014
            --CHE_EL_CAM_70_NFS_E
            vehicles[282] = 3006189287
            --CHE_EL_CAM_70_PP_RIVAL_1
            vehicles[283] = AOBtoDEC("9C B4 8C 1D")
            --CHE_EL_CAM_70_PP_RIVAL_2
            vehicles[284] = AOBtoDEC("13 8C FE 5C")
            --CHE_EL_CAM_70_PP_RIVAL_3
            vehicles[285] = AOBtoDEC("7A AE 04 62")
            --CHE_CAM_ZL1_13_PP_RUN
            vehicles[286] = AOBtoDEC("8D 0F C1 88")
            --CHE_VET_CBN_10_PP_STOCK_1
            vehicles[287] = AOBtoDEC("9A 39 BD AC")
            vehicles[288] = AOBtoDEC("D1 55 2E 59")
            vehicles[289] = AOBtoDEC("5F FC C5 61")
            vehicles[290] = AOBtoDEC("44 C1 87 1F")
            vehicles[291] = AOBtoDEC("58 75 9B 67")
            vehicles[292] = AOBtoDEC("3C 35 AB D5")
            vehicles[293] = AOBtoDEC("03 7E D7 4B")
            vehicles[294] = AOBtoDEC("EC 66 6D F8")
            --CHE_VET_CBN_10_PP1V1
            vehicles[295] = AOBtoDEC("FE A3 3A 41")
            vehicles[296] = AOBtoDEC("9D 9F 6C A7")
            vehicles[297] = AOBtoDEC("CC DA A3 64")
            vehicles[298] = AOBtoDEC("44 0B 4C 1D")
            vehicles[299] = AOBtoDEC("B4 CB F4 C5")
            vehicles[300] = AOBtoDEC("F6 06 10 9C")
            vehicles[301] = AOBtoDEC("BA 09 B1 91")
            vehicles[302] = AOBtoDEC("9B 08 4D 34")
            --CHE_VET_CBN_10_PP2V1
            vehicles[303] = AOBtoDEC("F0 CA A4 26")
            vehicles[304] = AOBtoDEC("9B 90 1C C4")
            vehicles[305] = AOBtoDEC("30 4B A7 0D")
            vehicles[306] = AOBtoDEC("E2 3E E5 3C")
            vehicles[307] = AOBtoDEC("94 31 4A 55")
            vehicles[308] = AOBtoDEC("95 9E EF 95")
            vehicles[309] = AOBtoDEC("CA 69 A7 01")
            vehicles[310] = AOBtoDEC("2C 00 F7 C8")
            --CHE_VET_CBN_10_PP3V1
            vehicles[311] = AOBtoDEC("1E 43 48 C7")
            vehicles[312] = AOBtoDEC("98 FD 03 54")
            vehicles[313] = AOBtoDEC("97 3A 8D D8")
            vehicles[314] = AOBtoDEC("C3 20 2D 57")
            vehicles[315] = AOBtoDEC("3D BD 48 79")
            vehicles[316] = AOBtoDEC("59 10 4F 59")
            vehicles[317] = AOBtoDEC("3C 38 A7 79")
            vehicles[318] = AOBtoDEC("C4 4C 22 5A")
            --CHE_VET_CBN_10_PRESALE_1
            vehicles[319] = AOBtoDEC("0D 9E 48 57")
            --CHE_VET_CBN_10_PRESALE_1
            vehicles[320] = AOBtoDEC("B6 EE F8 CC")
            --DOD_CHA_RT_71_NFS_E
            vehicles[321] = 531246253
            --DOD_CHA_SRT_08_ADSALES_1
            vehicles[322] = AOBtoDEC("6E 69 6F 28")
            --DOD_CHA_SRT_08_NFS_E
            vehicles[323] = AOBtoDEC("63 8D 8E CC")
            --FOR_GT_STK_06_PP_STOCK_1
            vehicles[324] = AOBtoDEC("44 25 C5 CF")
            vehicles[325] = AOBtoDEC("79 AC 46 BF")
            vehicles[326] = AOBtoDEC("F9 54 F1 D9")
            vehicles[327] = AOBtoDEC("7A BD 7F 3C")
            vehicles[328] = AOBtoDEC("DA 59 8D 45")
            vehicles[329] = AOBtoDEC("7C AF EE 40")
            vehicles[330] = AOBtoDEC("48 04 24 58")
            vehicles[331] = AOBtoDEC("A8 35 2E 8C")
            --FOR_GT_STK_06_PP1V1
            vehicles[332] = AOBtoDEC("FD BD B8 C7")
            vehicles[333] = AOBtoDEC("26 76 0C 46")
            vehicles[334] = AOBtoDEC("71 85 12 AF")
            vehicles[335] = AOBtoDEC("4E 55 A2 06")
            vehicles[336] = AOBtoDEC("9D 63 88 EF")
            vehicles[337] = AOBtoDEC("70 CD F4 9C")
            vehicles[338] = AOBtoDEC("2B 3D 2B A2")
            vehicles[339] = AOBtoDEC("3C 8A 25 C7")
            --FOR_GT_STK_06_PP2V1
            vehicles[340] = AOBtoDEC("E5 38 A1 26")
            vehicles[341] = AOBtoDEC("47 98 2D D1")
            vehicles[342] = AOBtoDEC("2B 05 9C 1E")
            vehicles[343] = AOBtoDEC("45 B6 ED 8B")
            vehicles[344] = AOBtoDEC("60 80 BF 37")
            vehicles[345] = AOBtoDEC("BD EC CA 09")
            vehicles[346] = AOBtoDEC("45 44 C5 64")
            vehicles[347] = AOBtoDEC("BB CA F1 80")
            --FOR_GT_STK_06_ADSALES_1
            vehicles[348] = AOBtoDEC("9C 25 95 84")
            --FOR_MUS_BOS_12_PRESALE_1
            vehicles[349] = AOBtoDEC("C6 24 4B F5")
            --FOR_MUS_RTR_12_NFS_E
            vehicles[350] = AOBtoDEC("89 73 1A C2")
            --FOR_RTR_X_69_PP1V1
            vehicles[351] = AOBtoDEC("0B 36 E5 FF")
            --FOR_MUS_302_69_ADSALES_1
            vehicles[352] = 268766097
            --FOR_MUS_302_69_NFS_E
            vehicles[353] = 2902452387
            --SHE_DAY_COU_65_PP_RUN
            vehicles[354] = 3604153451
            --SHE_MUS_SNK_12_PP_RUN
            vehicles[355] = AOBtoDEC("52 7F 68 29")
            --PON_FIR_STK_78_NFS_E
            vehicles[356] = AOBtoDEC("41 E9 F9 A9")

            --CUSTOM MADE BY _mRally2
            --CHE_EL_CAM_70_AI_T4
            vehicles[357] = 2053301536
            vehicles[358] = 96789362
            vehicles[359] = 3393955391
            vehicles[360] = 3643384219
            --CHE_CAM_SS_67_AI_T4
            vehicles[361] = 2789574667
            vehicles[362] = 2695468121
            vehicles[363] = 2955493261
            vehicles[364] = 1157837898
            --CHE_CAM_ZL1_13_AI
            vehicles[365] = AOBtoDEC("8E A6 E6 19")
            vehicles[366] = AOBtoDEC("AC 64 BB 73")
            vehicles[367] = AOBtoDEC("A2 4A 7A 3C")
            vehicles[368] = AOBtoDEC("D1 AD 85 72")
            vehicles[369] = AOBtoDEC("A0 6C BE 3D")
            --CHE_VET_CBN_10_AI
            vehicles[370] = AOBtoDEC("DB 88 9A BD")
            vehicles[371] = AOBtoDEC("F8 58 2E 03")
            vehicles[372] = AOBtoDEC("FA 8F 9C F0")
            --DOD_CHA_RT_71_AI_T4
            vehicles[373] = 132446852
            vehicles[374] = 1161287153
            vehicles[375] = 3481124691
            vehicles[376] = 1350671612
            --DOD_CHA_SRT_08_AI
            vehicles[377] = AOBtoDEC("34 D4 8E 1A")
            vehicles[378] = AOBtoDEC("80 F6 85 A3")
            vehicles[379] = AOBtoDEC("06 74 91 C5")
            vehicles[380] = AOBtoDEC("77 C6 0E 11")
            --FOR_GT_STK_06_AI
            vehicles[381] = AOBtoDEC("4A 82 88 AD")
            vehicles[382] = AOBtoDEC("5F 98 D4 C2")
            vehicles[383] = AOBtoDEC("37 0D FC 19")
            --FOR_MUS_BOS_12_AI
            vehicles[384] = AOBtoDEC("70 E1 83 B5")
            vehicles[385] = AOBtoDEC("01 FC 52 46")
            vehicles[386] = AOBtoDEC("F1 FA D2 72")
            --FOR_MUS_RTR_12_AI
            vehicles[387] = AOBtoDEC("E9 30 96 43")
            vehicles[388] = AOBtoDEC("E3 90 28 05")
            vehicles[389] = AOBtoDEC("78 C4 98 97")
            vehicles[390] = AOBtoDEC("C7 65 54 3E")
            vehicles[391] = AOBtoDEC("BC 63 A7 20")
            --FOR_MUS_302_69_AI
            vehicles[392] = AOBtoDEC("D3 E7 51 27")
            vehicles[393] = AOBtoDEC("C4 9F F8 41")
            --PON_FIR_STK_78_AI
            vehicles[394] = AOBtoDEC("55 D7 B4 78")
            vehicles[395] = AOBtoDEC("93 FE E1 3E")
            vehicles[396] = AOBtoDEC("B1 25 4D 28")
            vehicles[397] = AOBtoDEC("9C AE C6 FC")
            --SHE_DAY_COU_65_AI_T4
            vehicles[398] = 3357183898
            vehicles[399] = 3312278586
            --SHE_MUS_SNK_12_AI
            vehicles[400] = AOBtoDEC("52 96 24 CC")
            --DOD_CHA_SRT_08
            vehicles[401] = AOBtoDEC("98 2D FB 96")
            --FOR_MUS_RTR_12
            vehicles[402] = AOBtoDEC("B6 0C 9C 9A")
            --FOR_RTR_X_69
            vehicles[403] = AOBtoDEC("05 F2 DE 5F")
            --HEN_VENOM_GT_11
            vehicles[404] = AOBtoDEC("A8 3C 53 57")
            --PON_FIR_STK_78
            vehicles[405] = AOBtoDEC("64 7C 00 58")
            --SHE_MUS_SNK_12
            vehicles[406] = AOBtoDEC("DC D0 A1 65")

            --EASTER EGG
            --COP_FOR_POL_INT_11_UNDERCOVER_TIER_4
            vehicles[407] = AOBtoDEC("C2 30 71 9E")
            --COP_FOR_POL_INT_11_STATE_SLOW_TIER_4
            vehicles[408] = AOBtoDEC("3A A1 4B EB")
            --COP_FOR_POL_INT_11_ESCAPE_TIER_4
            vehicles[409] = AOBtoDEC("50 A5 04 DF")

            --WE WRITE FIRST THE VEHICLES INTO THE DUMMY PRESETS IN ORDER TO MAKE THEM SELECTABLE
            writeInteger(dummyVehicleID_1,vehicles[array[1]])
            writeInteger(dummyVehicleID_2,vehicles[array[2]])
            writeInteger(dummyVehicleID_3,vehicles[array[3]])

            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])
            if readInteger(first) == vehicles[array[vec[1]]] and
                readInteger(second) == vehicles[array[vec[2]]] and
                readInteger(third) == vehicles[array[vec[3]]] then
                print "The Las Vegas East Vintage Tier 3 Cars swap has completed successfully"
            end
        end
    end
end

lv = createTimer(nil)
timer_onTimer(lv,LasVegas)
timer_setInterval(lv, 100)
timer_setEnabled(lv, true)

[DISABLE]
timer_setEnabled(lv, false)
print "Las Vegas East The Classics Run Tier 3 Cars Select Randomizer timer disabled"
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>864</ID>
          <Description>"Chicago"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()
function my_random (t,from, to)
    local num = math.random (from, to)
    if t[num] then  num = my_random (t, from, to)  end
    t[num]=num
    return num
end
function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end
function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end
[ENABLE]
math.randomseed(os.time())
print "Chicago Downtown The Classics Run Car Select Randomizer timer enabled"

--MEMORY SCAN
local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

local dummyVehicleID_1 = 0
local dummyVehicleID_2 = 0
local dummyVehicleID_3 = 0

--_c4/Gameplay/Garage/POR/TRF_POR_CAY_08
local AOB = "56 4F CC 99 * * * * 5F 63 34 2F 47 61 6D 65 70 6C 61 79 2F 47 61 72 61 67 65 2F 50 4F 52 2F 54 52 46 5F 50 4F 52 5F 43 41 59 5F 30 38"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format
if address ~= nil then
    dummyVehicleID_1 = address + 0x4
    print "String Swap Complete Complete!"
else
    print "String Swap Failed!"
end

--_c4/Gameplay/Garage/POR/POR_911_C4S_11_PP_RUN
local AOB = "56 4F CC 99 * * * * 5F 63 34 2F 47 61 6D 65 70 6C 61 79 2F 47 61 72 61 67 65 2F 50 4F 52 2F 50 4F 52 5F 39 31 31 5F 43 34 53 5F 31 31 5F 50 50 5F 52 55 4E"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format
if address ~= nil then
    dummyVehicleID_2 = address + 0x4
    print "String Swap Complete Complete!"
else
    print "String Swap Failed!"
end

--_c4/Gameplay/Garage/BMW_M3_GTS_10_STOCK
local AOB = "56 4F CC 99 * * * * 5F 63 34 2F 47 61 6D 65 70 6C 61 79 2F 47 61 72 61 67 65 2F 42 4D 57 5F 4D 33 5F 47 54 53 5F 31 30 5F 53 54 4F 43 4B"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format
if address ~= nil then
    dummyVehicleID_3 = address + 0x4
    print "String Swap Complete Complete!"
else
    print "String Swap Failed!"
end

function Chicago()
    local vehicles = {}
    --TIER 1
    --CHE_CAM_SS_67_PP_STOCK_1
    vehicles[1] = 1522441908
    vehicles[2] = 150155535
    vehicles[3] = 4047731096
    vehicles[4] = 3603434424
    vehicles[5] = 933904526
    vehicles[6] = 1760866290
    vehicles[7] = 1935511816
    vehicles[8] = 3986269571
    --CHE_CAM_SS_67_PP1V1
    vehicles[9] = AOBtoDEC("3E B1 A7 B7")
    vehicles[10] = AOBtoDEC("83 B2 27 D6")
    vehicles[11] = AOBtoDEC("5E EF B4 C2")
    vehicles[12] = AOBtoDEC("F8 86 F5 9E")
    vehicles[13] = AOBtoDEC("61 44 58 2B")
    vehicles[14] = AOBtoDEC("DB 39 51 BA")
    vehicles[15] = AOBtoDEC("56 5D 05 9E")
    vehicles[16] = AOBtoDEC("66 DD B9 46")
    --CHE_CAM_SS_67_PP2V1
    vehicles[17] = AOBtoDEC("C4 3A 95 11")
    vehicles[18] = AOBtoDEC("BE 4E E8 76")
    vehicles[19] = AOBtoDEC("34 AD D8 EC")
    vehicles[20] = AOBtoDEC("43 A0 92 5E")
    vehicles[21] = AOBtoDEC("E4 9B 7D 21")
    vehicles[22] = AOBtoDEC("27 98 19 DD")
    vehicles[23] = AOBtoDEC("CF 88 F8 68")
    vehicles[24] = AOBtoDEC("1D 35 B4 12")
    --CHE_EL_CAM_70_PP_STOCK_1
    vehicles[25] = 4152999272
    vehicles[26] = 2839316226
    vehicles[27] = 850809204
    vehicles[28] = 1507013332
    vehicles[29] = 2744598914
    vehicles[30] = 874261196
    vehicles[31] = 1489277057
    vehicles[32] = 3963367876
    --CHE_EL_CAM_70_PP1V1
    vehicles[33] = AOBtoDEC("3F 10 66 E7")
    vehicles[34] = AOBtoDEC("8A 99 3A 6F")
    vehicles[35] = AOBtoDEC("81 56 76 1A")
    vehicles[36] = AOBtoDEC("FC A1 4E AF")
    vehicles[37] = AOBtoDEC("9B 56 3D 30")
    vehicles[38] = AOBtoDEC("46 3A 3A E4")
    vehicles[39] = AOBtoDEC("96 18 B9 72")
    vehicles[40] = AOBtoDEC("C5 23 54 69")
    --CHE_EL_CAM_70_PP2V1
    vehicles[41] = AOBtoDEC("0D BC 59 E7")
    vehicles[42] = AOBtoDEC("FF A5 3E 6F")
    vehicles[43] = AOBtoDEC("DE 72 79 1A")
    vehicles[44] = AOBtoDEC("B3 92 3E AF")
    vehicles[45] = AOBtoDEC("E4 24 66 3D")
    vehicles[46] = AOBtoDEC("57 45 24 E4")
    vehicles[47] = AOBtoDEC("41 C5 C4 72")
    vehicles[48] = AOBtoDEC("FF 43 48 69")
    --DOD_CHA_RT_71_PP_STOCK_1
    vehicles[49] = 658081404
    vehicles[50] = 353759425
    vehicles[51] = 897078296
    vehicles[52] = 904978235
    vehicles[53] = 1838233732
    vehicles[54] = 2193678947
    vehicles[55] = 1587191578
    vehicles[56] = 3371414360
    --DOD_CHA_RT_71_PP1V1
    vehicles[57] = AOBtoDEC("90 55 54 DB")
    vehicles[58] = AOBtoDEC("2C 8B A2 4A")
    vehicles[59] = AOBtoDEC("47 44 82 E8")
    vehicles[60] = AOBtoDEC("2C 8F 66 3F")
    vehicles[61] = AOBtoDEC("F0 27 43 C5")
    vehicles[62] = AOBtoDEC("21 BF CF 3C")
    vehicles[63] = AOBtoDEC("A9 58 13 9A")
    vehicles[64] = AOBtoDEC("BE 09 94 E7")
    --DOD_CHA_RT_71_PP2V1
    vehicles[65] = AOBtoDEC("67 A2 2D FB")
    vehicles[66] = AOBtoDEC("55 35 6F 7F")
    vehicles[67] = AOBtoDEC("97 30 AC D7")
    vehicles[68] = AOBtoDEC("6A 27 5B 0F")
    vehicles[69] = AOBtoDEC("BD DF FF 82")
    vehicles[70] = AOBtoDEC("D8 6E 35 6E")
    vehicles[71] = AOBtoDEC("2C 7F D2 AC")
    vehicles[72] = AOBtoDEC("43 0E AE B5")
    --FOR_MUS_302_69_PP_STOCK_1
    vehicles[73] = 1500183094
    vehicles[74] = 162166122
    vehicles[75] = 161538668
    vehicles[76] = 2191334224
    vehicles[77] = 3348852928
    vehicles[78] = 2138722167
    vehicles[79] = 3095976600
    vehicles[80] = 3713352339
    --FOR_MUS_302_69_PP1V1
    vehicles[81] = AOBtoDEC("67 42 63 3F")
    vehicles[82] = AOBtoDEC("08 37 D6 22")
    vehicles[83] = AOBtoDEC("D0 6B 43 26")
    vehicles[84] = AOBtoDEC("22 0C 9E 71")
    vehicles[85] = AOBtoDEC("F2 1E F2 65")
    vehicles[86] = AOBtoDEC("7D F7 A5 68")
    vehicles[87] = AOBtoDEC("6E 7F 78 56")
    vehicles[88] = AOBtoDEC("0A 74 5C E8")
    --FOR_MUS_302_69_PP2V1
    vehicles[89] = AOBtoDEC("A4 66 46 D5")
    vehicles[90] = AOBtoDEC("63 EB 74 C3")
    vehicles[91] = AOBtoDEC("03 46 F3 B1")
    vehicles[92] = AOBtoDEC("49 1D 02 9B")
    vehicles[93] = AOBtoDEC("30 DA C8 E3")
    vehicles[94] = AOBtoDEC("39 7D 83 76")
    vehicles[95] = AOBtoDEC("3E 2B 6E 55")
    vehicles[96] = AOBtoDEC("4E 9C 95 D9")
    --PON_FIR_STK_78_PP_STOCK_1
    vehicles[97] = 3681840500
    vehicles[98] = 3949993724
    vehicles[99] = 3350848715
    vehicles[100] = 2691382565
    vehicles[101] = 3379929237
    vehicles[102] = 2618823770
    vehicles[103] = 1034103769
    vehicles[104] = 4167471778
    --PON_FIR_STK_78_PP1V1
    vehicles[105] = AOBtoDEC("D9 57 CE C1")
    vehicles[106] = AOBtoDEC("E3 A5 8B AF")
    vehicles[107] = AOBtoDEC("FC DD D6 6D")
    vehicles[108] = AOBtoDEC("68 9E 4E 4E")
    vehicles[109] = AOBtoDEC("6A B0 D3 AC")
    vehicles[110] = AOBtoDEC("5C 6F 62 F7")
    vehicles[111] = AOBtoDEC("B5 FD 27 E4")
    vehicles[112] = AOBtoDEC("60 BA E2 95")
    --PON_FIR_STK_78_PP2V1
    vehicles[113] = AOBtoDEC("3D A5 9F 52")
    vehicles[114] = AOBtoDEC("AB 66 E3 AC")
    vehicles[115] = AOBtoDEC("5D 34 27 0C")
    vehicles[116] = AOBtoDEC("99 C1 3A 33")
    vehicles[117] = AOBtoDEC("8F FD 4E 32")
    vehicles[118] = AOBtoDEC("D9 46 22 B8")
    vehicles[119] = AOBtoDEC("0A DB AA E3")
    vehicles[120] = AOBtoDEC("1E 46 06 72")
    --TIER 2
    --DOD_CHA_SRT_08_PP_STOCK_1
    vehicles[121] = AOBtoDEC("4A AD 17 C0")
    vehicles[122] = AOBtoDEC("E5 6D BD 7B")
    vehicles[123] = AOBtoDEC("76 AB F5 92")
    vehicles[124] = AOBtoDEC("81 BE 89 DE")
    vehicles[125] = AOBtoDEC("61 B8 B0 EF")
    vehicles[126] = AOBtoDEC("D5 F9 94 4B")
    vehicles[127] = AOBtoDEC("1A 80 8D 6A")
    vehicles[128] = AOBtoDEC("50 AB AA 20")
    --DOD_CHA_SRT_08_PP1V1
    vehicles[129] = AOBtoDEC("16 CE F0 59")
    vehicles[130] = AOBtoDEC("9F D0 BB 96")
    vehicles[131] = AOBtoDEC("F1 7A 45 BD")
    vehicles[132] = AOBtoDEC("35 4D 59 F4")
    vehicles[133] = AOBtoDEC("61 06 5C 40")
    vehicles[134] = AOBtoDEC("EC 7B C1 1F")
    vehicles[135] = AOBtoDEC("E8 06 80 9F")
    vehicles[136] = AOBtoDEC("DD 6E F5 38")
    --DOD_CHA_SRT_08_PP2V1
    vehicles[137] = AOBtoDEC("F2 69 0A 79")
    vehicles[138] = AOBtoDEC("EB 26 0C CB")
    vehicles[139] = AOBtoDEC("56 AB 19 D2")
    vehicles[140] = AOBtoDEC("E1 7D 86 5F")
    vehicles[141] = AOBtoDEC("F0 6F 40 4E")
    vehicles[142] = AOBtoDEC("3B 36 17 0B")
    vehicles[143] = AOBtoDEC("50 03 F5 3E")
    vehicles[144] = AOBtoDEC("7E EF 10 EB")
    --DOD_CHA_SRT_08_PP3V1
    vehicles[145] = AOBtoDEC("00 94 E9 DD")
    vehicles[146] = AOBtoDEC("1A FE 5B A8")
    vehicles[147] = AOBtoDEC("2B 46 75 02")
    vehicles[148] = AOBtoDEC("1A F1 29 A4")
    vehicles[149] = AOBtoDEC("7C EC E7 C8")
    vehicles[150] = AOBtoDEC("0C C2 2A F0")
    vehicles[151] = AOBtoDEC("9A 13 B5 1F")
    vehicles[152] = AOBtoDEC("D4 FE 56 8B")
    --FOR_MUS_BOS_12_PP_STOCK_1
    vehicles[153] = AOBtoDEC("34 44 7D 5D")
    vehicles[154] = AOBtoDEC("B3 80 3F A5")
    vehicles[155] = AOBtoDEC("61 8D E8 B2")
    vehicles[156] = AOBtoDEC("6D 9F E2 93")
    vehicles[157] = AOBtoDEC("B4 BF CA 46")
    vehicles[158] = AOBtoDEC("C6 9F 57 10")
    vehicles[159] = AOBtoDEC("2F 86 0A F2")
    vehicles[160] = AOBtoDEC("73 62 4D E8")
    --FOR_MUS_BOS_12_PP1V1
    vehicles[161] = AOBtoDEC("56 CB 18 E0")
    vehicles[162] = AOBtoDEC("4D DB C2 DD")
    vehicles[163] = AOBtoDEC("40 A4 32 8E")
    vehicles[164] = AOBtoDEC("DA AD 64 08")
    vehicles[165] = AOBtoDEC("71 3A 05 4E")
    vehicles[166] = AOBtoDEC("84 55 D3 48")
    vehicles[167] = AOBtoDEC("7C 4A 30 C1")
    vehicles[168] = AOBtoDEC("63 79 CB DA")
    --FOR_MUS_BOS_12_PP2V1
    vehicles[169] = AOBtoDEC("27 D9 F0 B4")
    vehicles[170] = AOBtoDEC("D2 FF 56 12")
    vehicles[171] = AOBtoDEC("51 08 7D 09")
    vehicles[172] = AOBtoDEC("5B 7D 82 EE")
    vehicles[173] = AOBtoDEC("72 D3 98 A3")
    vehicles[174] = AOBtoDEC("2F FC 86 D4")
    vehicles[175] = AOBtoDEC("2E 39 73 93")
    vehicles[176] = AOBtoDEC("51 CA 90 B7")
    --FOR_MUS_BOS_12_PP3V1
    vehicles[177] = AOBtoDEC("9D FE 9C 9F")
    vehicles[178] = AOBtoDEC("98 E4 E0 C7")
    vehicles[179] = AOBtoDEC("02 3E 51 9A")
    vehicles[180] = AOBtoDEC("86 7C 04 A7")
    vehicles[181] = AOBtoDEC("B0 02 1B EA")
    vehicles[182] = AOBtoDEC("B7 E3 6B CE")
    vehicles[183] = AOBtoDEC("26 24 8D 63")
    vehicles[184] = AOBtoDEC("29 37 B5 05")
    --FOR_MUS_RTR_12_PP_STOCK_1
    vehicles[185] = AOBtoDEC("7B 8D C8 B0")
    vehicles[186] = AOBtoDEC("05 E8 4E 4E")
    vehicles[187] = AOBtoDEC("47 B2 2F 7A")
    vehicles[188] = AOBtoDEC("F9 1B 81 A2")
    vehicles[189] = AOBtoDEC("60 27 E0 D3")
    vehicles[190] = AOBtoDEC("AB AE 84 0A")
    vehicles[191] = AOBtoDEC("DC 9E 80 ED")
    vehicles[192] = AOBtoDEC("19 D5 D9 79")
    --FOR_MUS_RTR_12_PP1V1
    vehicles[193] = AOBtoDEC("F9 8B EC 3F")
    --TIER 3
    --CHE_CAM_ZL1_13_PP_STOCK_1
    vehicles[194] = AOBtoDEC("ED E0 00 CF")
    vehicles[195] = AOBtoDEC("7C AC E6 B1")
    vehicles[196] = AOBtoDEC("E9 F2 0C B5")
    vehicles[197] = AOBtoDEC("BB 67 9C 5E")
    vehicles[198] = AOBtoDEC("1B DE 29 4F")
    vehicles[199] = AOBtoDEC("4E B0 D9 E6")
    vehicles[200] = AOBtoDEC("37 B0 8C C4")
    vehicles[201] = AOBtoDEC("A0 73 A8 70")
    --CHE_CAM_ZL1_13_PP1V1
    vehicles[202] = AOBtoDEC("D5 D6 A0 A9")
    vehicles[203] = AOBtoDEC("07 61 E0 24")
    vehicles[204] = AOBtoDEC("D1 92 08 C0")
    vehicles[205] = AOBtoDEC("AD 46 8A 28")
    vehicles[206] = AOBtoDEC("D0 42 EE BE")
    vehicles[207] = AOBtoDEC("C5 A4 7A 1B")
    vehicles[208] = AOBtoDEC("8D 2E FA 87")
    vehicles[209] = AOBtoDEC("62 44 10 EB")
    --CHE_CAM_ZL1_13_PP2V1
    vehicles[210] = AOBtoDEC("87 AF 5F 8D")
    vehicles[211] = AOBtoDEC("EE 59 1A 5C")
    vehicles[212] = AOBtoDEC("00 08 01 A4")
    vehicles[213] = AOBtoDEC("51 82 F9 B0")
    vehicles[214] = AOBtoDEC("18 C7 81 50")
    vehicles[215] = AOBtoDEC("8C A0 8F 3F")
    vehicles[216] = AOBtoDEC("99 6D C8 07")
    vehicles[217] = AOBtoDEC("A2 44 4A 05")
    --CHE_CAM_ZL1_13_PP3V1
    vehicles[218] = AOBtoDEC("11 BB FF CE")
    vehicles[219] = AOBtoDEC("49 D2 D0 DE")
    vehicles[220] = AOBtoDEC("F7 7B C0 69")
    vehicles[221] = AOBtoDEC("05 83 41 BF")
    vehicles[222] = AOBtoDEC("38 8D 71 27")
    vehicles[223] = AOBtoDEC("B5 F0 2D B1")
    vehicles[224] = AOBtoDEC("8C 0A 59 09")
    vehicles[225] = AOBtoDEC("0C 46 37 3B")
    --SHE_MUS_SNK_12_PP_STOCK_1
    vehicles[226] = AOBtoDEC("67 53 06 F1")
    vehicles[227] = AOBtoDEC("36 9E D3 EA")
    vehicles[228] = AOBtoDEC("33 73 21 F8")
    vehicles[229] = AOBtoDEC("AB B3 C2 AC")
    vehicles[230] = AOBtoDEC("61 40 D8 7A")
    vehicles[231] = AOBtoDEC("FC 0E 3F D2")
    vehicles[232] = AOBtoDEC("36 A8 21 9F")
    vehicles[233] = AOBtoDEC("52 CD 96 D1")
    --SHE_MUS_SNK_12_PP1V1
    vehicles[234] = AOBtoDEC("E5 72 4B 6D")
    vehicles[235] = AOBtoDEC("1C 33 D8 46")
    vehicles[236] = AOBtoDEC("D1 0B 91 A2")
    vehicles[237] = AOBtoDEC("50 CD 86 BB")
    vehicles[238] = AOBtoDEC("1A 42 8F 27")
    vehicles[239] = AOBtoDEC("5D EB F6 4C")
    vehicles[240] = AOBtoDEC("29 5D 72 71")
    vehicles[241] = AOBtoDEC("A1 B7 55 79")
    --SHE_MUS_SNK_12_PP2V1
    vehicles[242] = AOBtoDEC("97 15 0C 2A")
    vehicles[243] = AOBtoDEC("C5 C7 F8 AC")
    vehicles[243] = AOBtoDEC("3E D8 59 83")
    vehicles[244] = AOBtoDEC("25 3E 2B 6B")
    vehicles[245] = AOBtoDEC("12 B8 45 49")
    vehicles[246] = AOBtoDEC("40 2F CB 75")
    vehicles[247] = AOBtoDEC("2F 6F DD 35")
    vehicles[248] = AOBtoDEC("67 55 2D 86")
    --SHE_MUS_SNK_12_PP3V1
    vehicles[249] = AOBtoDEC("C0 D5 BC 24")
    vehicles[250] = AOBtoDEC("68 E7 53 6E")
    vehicles[251] = AOBtoDEC("A1 87 9B 7F")
    vehicles[252] = AOBtoDEC("08 81 F4 0C")
    vehicles[253] = AOBtoDEC("EE D2 B4 81")
    vehicles[254] = AOBtoDEC("25 CD 21 BD")
    vehicles[255] = AOBtoDEC("5A 60 C9 0C")
    vehicles[256] = AOBtoDEC("52 59 00 CD")
    --SHE_DAY_COU_65_PP_STOCK_1
    vehicles[257] = 4152129083
    vehicles[258] = 3871257759
    vehicles[259] = 3289542481
    vehicles[260] = 2461231717
    vehicles[261] = 881791887
    vehicles[262] = 878544792
    vehicles[263] = 2902527303
    vehicles[264] = 1636074729
    --SHE_DAY_COU_65_PP1V1
    vehicles[265] = 1241611741
    vehicles[266] = 2683772338
    vehicles[267] = 518514680
    vehicles[268] = 3472854976
    vehicles[269] = 3523685951
    vehicles[270] = 3629261332
    vehicles[271] = 3439662912
    vehicles[272] = 2666964101
    --SHE_DAY_COU_65_PP2V1
    vehicles[273] = 2996645409
    vehicles[274] = 3314765652
    vehicles[275] = 259914488
    vehicles[276] = 1295232418
    vehicles[277] = 974990480
    vehicles[278] = 2131311971
    vehicles[279] = 1205195321
    vehicles[280] = 3631894439
    --TIER 4
    --CHE_CAM_SS_67_NFS_E
    vehicles[281] = 764119014
    --CHE_EL_CAM_70_NFS_E
    vehicles[282] = 3006189287
    --CHE_EL_CAM_70_PP_RIVAL_1
    vehicles[283] = AOBtoDEC("9C B4 8C 1D")
    --CHE_EL_CAM_70_PP_RIVAL_2
    vehicles[284] = AOBtoDEC("13 8C FE 5C")
    --CHE_EL_CAM_70_PP_RIVAL_3
    vehicles[285] = AOBtoDEC("7A AE 04 62")
    --CHE_CAM_ZL1_13_PP_RUN
    vehicles[286] = AOBtoDEC("8D 0F C1 88")
    --CHE_VET_CBN_10_PP_STOCK_1
    vehicles[287] = AOBtoDEC("9A 39 BD AC")
    vehicles[288] = AOBtoDEC("D1 55 2E 59")
    vehicles[289] = AOBtoDEC("5F FC C5 61")
    vehicles[290] = AOBtoDEC("44 C1 87 1F")
    vehicles[291] = AOBtoDEC("58 75 9B 67")
    vehicles[292] = AOBtoDEC("3C 35 AB D5")
    vehicles[293] = AOBtoDEC("03 7E D7 4B")
    vehicles[294] = AOBtoDEC("EC 66 6D F8")
    --CHE_VET_CBN_10_PP1V1
    vehicles[295] = AOBtoDEC("FE A3 3A 41")
    vehicles[296] = AOBtoDEC("9D 9F 6C A7")
    vehicles[297] = AOBtoDEC("CC DA A3 64")
    vehicles[298] = AOBtoDEC("44 0B 4C 1D")
    vehicles[299] = AOBtoDEC("B4 CB F4 C5")
    vehicles[300] = AOBtoDEC("F6 06 10 9C")
    vehicles[301] = AOBtoDEC("BA 09 B1 91")
    vehicles[302] = AOBtoDEC("9B 08 4D 34")
    --CHE_VET_CBN_10_PP2V1
    vehicles[303] = AOBtoDEC("F0 CA A4 26")
    vehicles[304] = AOBtoDEC("9B 90 1C C4")
    vehicles[305] = AOBtoDEC("30 4B A7 0D")
    vehicles[306] = AOBtoDEC("E2 3E E5 3C")
    vehicles[307] = AOBtoDEC("94 31 4A 55")
    vehicles[308] = AOBtoDEC("95 9E EF 95")
    vehicles[309] = AOBtoDEC("CA 69 A7 01")
    vehicles[310] = AOBtoDEC("2C 00 F7 C8")
    --CHE_VET_CBN_10_PP3V1
    vehicles[311] = AOBtoDEC("1E 43 48 C7")
    vehicles[312] = AOBtoDEC("98 FD 03 54")
    vehicles[313] = AOBtoDEC("97 3A 8D D8")
    vehicles[314] = AOBtoDEC("C3 20 2D 57")
    vehicles[315] = AOBtoDEC("3D BD 48 79")
    vehicles[316] = AOBtoDEC("59 10 4F 59")
    vehicles[317] = AOBtoDEC("3C 38 A7 79")
    vehicles[318] = AOBtoDEC("C4 4C 22 5A")
    --CHE_VET_CBN_10_PRESALE_1
    vehicles[319] = AOBtoDEC("0D 9E 48 57")
    --CHE_VET_CBN_10_PRESALE_1
    vehicles[320] = AOBtoDEC("B6 EE F8 CC")
    --DOD_CHA_RT_71_NFS_E
    vehicles[321] = 531246253
    --DOD_CHA_SRT_08_ADSALES_1
    vehicles[322] = AOBtoDEC("6E 69 6F 28")
    --DOD_CHA_SRT_08_NFS_E
    vehicles[323] = AOBtoDEC("63 8D 8E CC")
    --FOR_GT_STK_06_PP_STOCK_1
    vehicles[324] = AOBtoDEC("44 25 C5 CF")
    vehicles[325] = AOBtoDEC("79 AC 46 BF")
    vehicles[326] = AOBtoDEC("F9 54 F1 D9")
    vehicles[327] = AOBtoDEC("7A BD 7F 3C")
    vehicles[328] = AOBtoDEC("DA 59 8D 45")
    vehicles[329] = AOBtoDEC("7C AF EE 40")
    vehicles[330] = AOBtoDEC("48 04 24 58")
    vehicles[331] = AOBtoDEC("A8 35 2E 8C")
    --FOR_GT_STK_06_PP1V1
    vehicles[332] = AOBtoDEC("FD BD B8 C7")
    vehicles[333] = AOBtoDEC("26 76 0C 46")
    vehicles[334] = AOBtoDEC("71 85 12 AF")
    vehicles[335] = AOBtoDEC("4E 55 A2 06")
    vehicles[336] = AOBtoDEC("9D 63 88 EF")
    vehicles[337] = AOBtoDEC("70 CD F4 9C")
    vehicles[338] = AOBtoDEC("2B 3D 2B A2")
    vehicles[339] = AOBtoDEC("3C 8A 25 C7")
    --FOR_GT_STK_06_PP2V1
    vehicles[340] = AOBtoDEC("E5 38 A1 26")
    vehicles[341] = AOBtoDEC("47 98 2D D1")
    vehicles[342] = AOBtoDEC("2B 05 9C 1E")
    vehicles[343] = AOBtoDEC("45 B6 ED 8B")
    vehicles[344] = AOBtoDEC("60 80 BF 37")
    vehicles[345] = AOBtoDEC("BD EC CA 09")
    vehicles[346] = AOBtoDEC("45 44 C5 64")
    vehicles[347] = AOBtoDEC("BB CA F1 80")
    --FOR_GT_STK_06_ADSALES_1
    vehicles[348] = AOBtoDEC("9C 25 95 84")
    --FOR_MUS_BOS_12_PRESALE_1
    vehicles[349] = AOBtoDEC("C6 24 4B F5")
    --FOR_MUS_RTR_12_NFS_E
    vehicles[350] = AOBtoDEC("89 73 1A C2")
    --FOR_RTR_X_69_PP1V1
    vehicles[351] = AOBtoDEC("0B 36 E5 FF")
    --FOR_MUS_302_69_ADSALES_1
    vehicles[352] = 268766097
    --FOR_MUS_302_69_NFS_E
    vehicles[353] = 2902452387
    --SHE_DAY_COU_65_PP_RUN
    vehicles[354] = 3604153451
    --SHE_MUS_SNK_12_PP_RUN
    vehicles[355] = AOBtoDEC("52 7F 68 29")
    --PON_FIR_STK_78_NFS_E
    vehicles[356] = AOBtoDEC("41 E9 F9 A9")

    --CUSTOM MADE BY _mRally2
    --CHE_EL_CAM_70_AI_T4
    vehicles[357] = 2053301536
    vehicles[358] = 96789362
    vehicles[359] = 3393955391
    vehicles[360] = 3643384219
    --CHE_CAM_SS_67_AI_T4
    vehicles[361] = 2789574667
    vehicles[362] = 2695468121
    vehicles[363] = 2955493261
    vehicles[364] = 1157837898
    --CHE_CAM_ZL1_13_AI
    vehicles[365] = AOBtoDEC("8E A6 E6 19")
    vehicles[366] = AOBtoDEC("AC 64 BB 73")
    vehicles[367] = AOBtoDEC("A2 4A 7A 3C")
    vehicles[368] = AOBtoDEC("D1 AD 85 72")
    vehicles[369] = AOBtoDEC("A0 6C BE 3D")
    --CHE_VET_CBN_10_AI
    vehicles[370] = AOBtoDEC("DB 88 9A BD")
    vehicles[371] = AOBtoDEC("F8 58 2E 03")
    vehicles[372] = AOBtoDEC("FA 8F 9C F0")
    --DOD_CHA_RT_71_AI_T4
    vehicles[373] = 132446852
    vehicles[374] = 1161287153
    vehicles[375] = 3481124691
    vehicles[376] = 1350671612
    --DOD_CHA_SRT_08_AI
    vehicles[377] = AOBtoDEC("34 D4 8E 1A")
    vehicles[378] = AOBtoDEC("80 F6 85 A3")
    vehicles[379] = AOBtoDEC("06 74 91 C5")
    vehicles[380] = AOBtoDEC("77 C6 0E 11")
    --FOR_GT_STK_06_AI
    vehicles[381] = AOBtoDEC("4A 82 88 AD")
    vehicles[382] = AOBtoDEC("5F 98 D4 C2")
    vehicles[383] = AOBtoDEC("37 0D FC 19")
    --FOR_MUS_BOS_12_AI
    vehicles[384] = AOBtoDEC("70 E1 83 B5")
    vehicles[385] = AOBtoDEC("01 FC 52 46")
    vehicles[386] = AOBtoDEC("F1 FA D2 72")
    --FOR_MUS_RTR_12_AI
    vehicles[387] = AOBtoDEC("E9 30 96 43")
    vehicles[388] = AOBtoDEC("E3 90 28 05")
    vehicles[389] = AOBtoDEC("78 C4 98 97")
    vehicles[390] = AOBtoDEC("C7 65 54 3E")
    vehicles[391] = AOBtoDEC("BC 63 A7 20")
    --FOR_MUS_302_69_AI
    vehicles[392] = AOBtoDEC("D3 E7 51 27")
    vehicles[393] = AOBtoDEC("C4 9F F8 41")
    --PON_FIR_STK_78_AI
    vehicles[394] = AOBtoDEC("55 D7 B4 78")
    vehicles[395] = AOBtoDEC("93 FE E1 3E")
    vehicles[396] = AOBtoDEC("B1 25 4D 28")
    vehicles[397] = AOBtoDEC("9C AE C6 FC")
    --SHE_DAY_COU_65_AI_T4
    vehicles[398] = 3357183898
    vehicles[399] = 3312278586
    --SHE_MUS_SNK_12_AI
    vehicles[400] = AOBtoDEC("52 96 24 CC")
    --DOD_CHA_SRT_08
    vehicles[401] = AOBtoDEC("98 2D FB 96")
    --FOR_MUS_RTR_12
    vehicles[402] = AOBtoDEC("B6 0C 9C 9A")
    --FOR_RTR_X_69
    vehicles[403] = AOBtoDEC("05 F2 DE 5F")
    --HEN_VENOM_GT_11
    vehicles[404] = AOBtoDEC("A8 3C 53 57")
    --PON_FIR_STK_78
    vehicles[405] = AOBtoDEC("64 7C 00 58")
    --SHE_MUS_SNK_12
    vehicles[406] = AOBtoDEC("DC D0 A1 65")

    --EASTER EGG
    --COP_FOR_POL_INT_11_UNDERCOVER_TIER_4
    vehicles[407] = AOBtoDEC("C2 30 71 9E")
    --COP_FOR_POL_INT_11_STATE_SLOW_TIER_4
    vehicles[408] = AOBtoDEC("3A A1 4B EB")
    --COP_FOR_POL_INT_11_ESCAPE_TIER_4
    vehicles[409] = AOBtoDEC("50 A5 04 DF")

    local ptr_1 = false
    local ptr_2 = false
    local ptr_3 = false
    local ptr_4 = false
    local ptr_5 = false
    local ptr_6 = false

    local jump = false

    local lastCarClassID = 0
    local lastCarID = 0

    if readPointer("[[[00CB40D4]+6C]+110]+0") ~= nil and readInteger("[[[00CB40D4]+6C]+110]+0") == 2580303702 and jump == false then
        ptr_1 = true
        jump = true
    elseif readPointer("[[[019FA888]+0]+A0]+0") ~= nil and readInteger("[[[019FA888]+0]+A0]+0") == 2580303702 and jump == false then
        ptr_2 = true
        jump = true
    elseif readPointer("[[[[00CB40D4]+3C]+180]+250]+0") ~= nil and readInteger("[[[[00CB40D4]+3C]+180]+250]+0") == 2580303702 and jump == false then
        ptr_3 = true
        jump = true
    elseif readPointer("[[[[00CB40D4]+38]+1F0]+250]+0") ~= nil and readInteger("[[[[00CB40D4]+38]+1F0]+250]+0") == 2580303702 and jump == false then
        ptr_4 = true
        jump = true
    elseif readPointer("[[[[[00CB40D4]+84]+B9C]+90]+250]+0") ~= nil and readInteger("[[[[[00CB40D4]+84]+B9C]+90]+250]+0") == 2580303702 and jump == false then
        ptr_5 = true
        jump = true
    elseif readPointer("[[[[[019FA888]+C]+BBC]+90]+250]+0") ~= nil and readInteger("[[[[[019FA888]+C]+BBC]+90]+250]+0") == 2580303702 and jump == false then
        ptr_6 = true
        jump = true
    end

    if jump == true then
        if ptr_1 == true then
            lastCarClassID = getAddress("[[[00CB40D4]+6C]+110]+0")
        elseif ptr_2 == true then
            lastCarClassID = getAddress("[[[019FA888]+0]+A0]+0")
        elseif ptr_3 == true then
            lastCarClassID = getAddress("[[[[00CB40D4]+3C]+180]+250]+0")
        elseif ptr_4 == true then
            lastCarClassID = getAddress("[[[[00CB40D4]+38]+1F0]+250]+0")
        elseif ptr_5 == true then
            lastCarClassID = getAddress("[[[[[00CB40D4]+84]+B9C]+90]+250]+0")
        elseif ptr_6 == true then
            lastCarClassID = getAddress("[[[[[019FA888]+C]+BBC]+90]+250]+0")
        end

        if lastCarClassID ~= nil and readInteger(lastCarClassID) == 2580303702 then
            lastCarID = lastCarClassID + 0x4
            if readInteger(lastCarID) == 470076578 then
                first = lastCarClassID + 0x4
                second = lastCarClassID + 0xC
                third = lastCarClassID + 0x14

                local array = {}
                local t = {}
                for i =1, 3 do
                    X = my_random (t, 1, 409)
                    array[i] = X
                end

                --WE WRITE FIRST THE VEHICLES INTO THE DUMMY PRESETS IN ORDER TO MAKE THEM SELECTABLE
                writeInteger(dummyVehicleID_1,vehicles[array[1]])
                writeInteger(dummyVehicleID_2,vehicles[array[2]])
                writeInteger(dummyVehicleID_3,vehicles[array[3]])

                writeInteger(first,vehicles[array[1]])
                writeInteger(second,vehicles[array[2]])
                writeInteger(third,vehicles[array[3]])

                if readInteger(first) == vehicles[array[1]] and
                    readInteger(second) == vehicles[array[2]] and
                    readInteger(third) == vehicles[array[3]] then
                    print "The swap has completed successfully"
                end
            end
        end
    end

end

cc = createTimer(nil)
timer_onTimer(cc,Chicago)
timer_setInterval(cc, 100)
timer_setEnabled(cc, true)

[DISABLE]
timer_setEnabled(cc, false)
print "Chicago Downtown The Classics Run Car Select Randomizer timer disabled"
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>865</ID>
          <Description>"Uri"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()
function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end
function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end
[ENABLE]
math.randomseed(os.time())
print "Uri Garage The Classics Run Cars Randomizer timer enabled"

--MEMORY SCAN
local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

local dummyVehicleID_12 = 0
local dummyVehicleID_22 = 0
local dummyVehicleID_32 = 0

--_c4/Gameplay/Garage/POR/TRF_POR_CAY_08
local AOB = "56 4F CC 99 * * * * 5F 63 34 2F 47 61 6D 65 70 6C 61 79 2F 47 61 72 61 67 65 2F 50 4F 52 2F 54 52 46 5F 50 4F 52 5F 43 41 59 5F 30 38"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format
if address ~= nil then
    dummyVehicleID_12 = address + 0x4
    print "String Swap Complete Complete!"
else
    print "String Swap Failed!"
end

--_c4/Gameplay/Garage/POR/POR_911_C4S_11_PP_RUN
local AOB = "56 4F CC 99 * * * * 5F 63 34 2F 47 61 6D 65 70 6C 61 79 2F 47 61 72 61 67 65 2F 50 4F 52 2F 50 4F 52 5F 39 31 31 5F 43 34 53 5F 31 31 5F 50 50 5F 52 55 4E"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format
if address ~= nil then
    dummyVehicleID_22 = address + 0x4
    print "String Swap Complete Complete!"
else
    print "String Swap Failed!"
end

--_c4/Gameplay/Garage/BMW_M3_GTS_10_STOCK
local AOB = "56 4F CC 99 * * * * 5F 63 34 2F 47 61 6D 65 70 6C 61 79 2F 47 61 72 61 67 65 2F 42 4D 57 5F 4D 33 5F 47 54 53 5F 31 30 5F 53 54 4F 43 4B"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format
if address ~= nil then
    dummyVehicleID_32 = address + 0x4
    print "String Swap Complete Complete!"
else
    print "String Swap Failed!"
end

function Uri()
    if readPointer("[[[[[027147B0]+7A4]+24]+8]+A0]+0") ~= nil then
        local lastCarClassID = getAddress("[[[[[027147B0]+7A4]+24]+8]+A0]+0")
        local lastCarID = lastCarClassID + 0x4
        if lastCarClassID ~= nil and readInteger(lastCarClassID) == 2580303702 and readInteger(lastCarID) == 3362615761 then
            first = lastCarClassID + 0x4
            second = lastCarClassID + 0xC
            third = lastCarClassID + 0x14
            local  function my_random (t,from, to)
            local num = math.random (from, to)
            if t[num] then  num = my_random (t, from, to)  end
                t[num]=num
                return num
            end
            local array = {}
            local t = {}
            for i =1, 3 do
                X = my_random (t, 1, 67)
                array[i] = X
            end
            local vehicles = {}
            --TIER 5
            --CHE_CAM_SS_67_PP_RARE_1
            vehicles[1] = AOBtoDEC("B7 C4 AC 12")
            --CHE_CAM_ZL1_13_PP_RARE_1
            vehicles[2] = AOBtoDEC("5F E0 36 76")
            --CHE_VET_CBN_PP_RUN
            vehicles[3] = AOBtoDEC("3A FF 2E 44")
            --CHE_EL_CAM_70_PP_RARE_1
            vehicles[4] = AOBtoDEC("70 BB 38 39")
            --DOD_CHR_TAXI_PLAYER
            vehicles[5] = AOBtoDEC("40 52 76 0E")
            --FOR_VIC_TAXI_PLAYER
            vehicles[6] = AOBtoDEC("FB 4C 13 DB")
            --FOR_GT_STK_06_NFS_E
            vehicles[7] = AOBtoDEC("9D FF AA 5E")
            --FOR_GT_STK_06_PP_RARE_1
            vehicles[8] = AOBtoDEC("E0 59 1B 56")
            --FOR_MUS_BOS_12_PP_RARE_1
            vehicles[9] = AOBtoDEC("44 9B 34 FB")
            --COP_CAR_INT_11_OOS
            vehicles[10] = AOBtoDEC("9D 90 B5 DF")
            --PON_FIR_STK_78_PP_RARE_1
            vehicles[11] = AOBtoDEC("89 B3 75 B5")
            --SHE_DAY_COU_65_PP_RARE_1
            vehicles[12] = 4022012078
            --SHE_DAY_COU_65_NFS_E
            vehicles[13] = AOBtoDEC("61 6B 47 41")
            --TIER 6
            --CHE_VET_CBN_10_NFS_E
            vehicles[14] = AOBtoDEC("F3 79 48 67")
            --CHE_VET_CBN_10_PP_RARE_1
            vehicles[15] = AOBtoDEC("77 80 E0 4C")
            --HEN_VEN_GT_11_PP_STOCK_1
            vehicles[16] = AOBtoDEC("8C 6B A2 70")
            vehicles[17] = AOBtoDEC("5D 5A 6B AB")
            vehicles[18] = AOBtoDEC("3E 1B E0 6D")
            vehicles[19] = AOBtoDEC("1E A6 F3 5C")
            vehicles[20] = AOBtoDEC("14 77 20 4D")
            vehicles[21] = AOBtoDEC("48 C9 92 55")
            vehicles[22] = AOBtoDEC("7C 7B 65 99")
            vehicles[23] = AOBtoDEC("53 CE 27 8B")
            --HEN_VEN_GT_11_PP1V1
            vehicles[24] = AOBtoDEC("5D CC 55 5B")
            vehicles[25] = AOBtoDEC("DA 5F 20 60")
            vehicles[26] = AOBtoDEC("C5 E5 79 50")
            vehicles[27] = AOBtoDEC("F5 34 CB E4")
            vehicles[28] = AOBtoDEC("11 15 57 BA")
            vehicles[29] = AOBtoDEC("C1 2C 01 AD")
            vehicles[30] = AOBtoDEC("1A 9F 87 02")
            vehicles[31] = AOBtoDEC("ED 6F F9 10")

            --CUSTOM MADE BY _mRally2
            --EL CAMINO 3169722097 TIER 5
            vehicles[32] = 3169722097
            --CAMARO SS 1925569773 TIER 5
            vehicles[33] = 1925569773
            --CAMARO SS 145181003 TIER 5
            vehicles[34] = 145181003
            --ZL1 48 3B 44 54 TIER 5
            vehicles[35] = AOBtoDEC("48 3B 44 54")
            --ZL1 35 69 AD C9 TIER 5
            vehicles[36] = AOBtoDEC("35 69 AD C9")
            --ZL1 B6 1B F2 6C TIER 5
            vehicles[37] = AOBtoDEC("B6 1B F2 6C")
            --ZL1 55 CF 31 6D TIER 5
            vehicles[38] = AOBtoDEC("55 CF 31 6D")
            --CROSS CORVETTE 37 3F 8B 85 TIER 6
            vehicles[39] = AOBtoDEC("37 3F 8B 85")
            --CORVETTE 24 0A BE 49 TIER 6
            vehicles[40] = AOBtoDEC("24 0A BE 49")
            --CORVETTE 81 9C B4 DE TIER 6
            vehicles[41] = AOBtoDEC("81 9C B4 DE")
            --CORVETTE 3F 39 1A 27 TIER 5
            vehicles[42] = AOBtoDEC("3F 39 1A 27")
            --CHALLENGER 71 59 43 9F D9 TIER 5
            vehicles[43] = 1013798201
            --CHALLENGER 71 1894368909 TIER 5
            vehicles[44] = 1894368909
            --SRT8 B3 C8 F9 12 TIER 5
            vehicles[45] = AOBtoDEC("B3 C8 F9 12")
            --SRT8 6D A8 E9 ED TIER 5
            vehicles[46] = AOBtoDEC("6D A8 E9 ED")
            --FORD GT 91 98 3D 67 TIER 5
            vehicles[47] = AOBtoDEC("91 98 3D 67")
            --FORD GT 79 DF 77 14 TIER 5
            vehicles[48] = AOBtoDEC("79 DF 77 14")
            --MUSTANG BOSS 12 CD A6 7C BB TIER 5
            vehicles[49] = AOBtoDEC("CD A6 7C BB")
            --MUSTANG 69 95 9B B3 01 TIER 5
            vehicles[50] = AOBtoDEC("95 9B B3 01")
            --MUSTANG 69 73 AD 1B D6 TIER 5
            vehicles[51] = AOBtoDEC("73 AD 1B D6")
            --FIREBIRD 5E FD 52 DD TIER 5
            vehicles[52] = AOBtoDEC("5E FD 52 DD")
            --FIREBIRD 98 8F 61 29 TIER 5
            vehicles[53] = AOBtoDEC("98 8F 61 29")
            --DAYTONA 232325685 TIER 5
            vehicles[54] = 232325685
            --DAYTONA 1201503826 TIER 5
            vehicles[55] = 1201503826
            --SHELBY MUSTANG 12 69 17 CF A8 TIER 5
            vehicles[56] = AOBtoDEC("69 17 CF A8")
            --SHELBY MUSTANG 12 7F 42 17 C4 TIER 5
            vehicles[57] = AOBtoDEC("7F 42 17 C4")
            --CHE_CAM_SS_67 CAMARO SS E5 21 6D 68 TIER 5
            vehicles[58] = AOBtoDEC("E5 21 6D 68")
            --DOD_CHA_RT_71 CHALLENGER 71 59 43 9F D9 TIER 5
            vehicles[59] = AOBtoDEC("59 43 9F D9")
            --FOR_GT_STK_06 FORD GT FC 44 E7 AD TIER 5
            vehicles[60] = AOBtoDEC("FC 44 E7 AD")
            --FOR_MUS_BOS_12 MUSTANG BOSS 12 FB A3 67 A4 TIER 5
            vehicles[61] = AOBtoDEC("FB A3 67 A4")
            --SHE_DAY_COU_65 DAYTONA 86 6D 7F CF TIER 5
            vehicles[62] = AOBtoDEC("86 6D 7F CF")

            --EASTER EGG
            --COP_DOD_CHR_07_STATE_SLOW_TIER_2_TO_TIER_5
            vehicles[63] = AOBtoDEC("CC 1F 27 8A")
            --COP_DOD_CHR_07_FED_FAST_TIER_5
            vehicles[64] = AOBtoDEC("37 40 29 A5")
            --COP_FOR_POL_INT_11_UNDERCOVER_TIER_4_TO_TIER_5
            vehicles[65] = AOBtoDEC("0E A1 92 CA")
            --COP_FOR_POL_INT_11_STATE_FAST_TIER_5
            vehicles[66] = AOBtoDEC("F8 1E 05 81")
            --COP_FOR_POL_INT_11_FED_TIER_5
            vehicles[67] = AOBtoDEC("8E 25 E9 5C")


            --WE WRITE FIRST THE VEHICLES INTO THE DUMMY PRESETS IN ORDER TO MAKE THEM SELECTABLE
            writeInteger(dummyVehicleID_12,vehicles[array[1]])
            writeInteger(dummyVehicleID_22,vehicles[array[2]])
            writeInteger(dummyVehicleID_32,vehicles[array[3]])

            writeInteger(first,vehicles[array[1]])
            writeInteger(second,vehicles[array[2]])
            writeInteger(third,vehicles[array[3]])

            if readInteger(first) == vehicles[array[1]] and
                readInteger(second) == vehicles[array[2]] and
                readInteger(third) == vehicles[array[3]] then
                print "The swap has completed successfully"
            end
        end
    end
end

ur = createTimer(nil)
timer_onTimer(ur,Uri)
timer_setInterval(ur, 100)
timer_setEnabled(ur, true)

[DISABLE]
timer_setEnabled(ur, false)
print "Uri Garage The Classics Run Cars Randomizer timer disabled"
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>861</ID>
          <Description>"Gas Stations"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()
function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end
function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end
[ENABLE]
math.randomseed(os.time())
print "The Classics Run Gas Stations timer enabled"
function GasStation()
    if readPointer("[[[[[02882500]+64]+1A8]+18]+1D8]+0") ~= nil then
        local firstCarArray = getAddress("[[[[[02882500]+64]+1A8]+18]+1D8]+0")
        if readPointer("[[[[027A4F60]+14]+68]+10]+4") ~= nil then
            local vehicleAIPreset = readInteger("[[[[027A4F60]+14]+68]+10]-2C")
            --WE CHECK ONLY THE EVENTS WHERE THE GAS STATION IS AVAILABLE FOR THE PLAYER
            if vehicleAIPreset == 1519118351 or --2_4
                vehicleAIPreset == 936372643 or --3_1
                vehicleAIPreset == 1244892309 or --3_2
                vehicleAIPreset == 977164155 or --3_5
                vehicleAIPreset == 2103946066 or --4_3A
                vehicleAIPreset == 4198749810 or --5_2
                vehicleAIPreset == 2326624465 or --6_1
                vehicleAIPreset == 1043227716 or --6_21
                vehicleAIPreset == 4205784620 or --9_0
                vehicleAIPreset == 2702855496 or --9_1
                vehicleAIPreset == 3768796673 or --9_3
                vehicleAIPreset == 3228960314 then --10_2

                --CHE_CAM_SS_67_PP_STOCK_1
                writeInteger(firstCarArray,1522441908)
                --CHE_EL_CAM_70_PP_STOCK_1
                writeInteger(firstCarArray+0x4,4152999272)
                --DOD_CHA_RT_71_PP_STOCK_1
                writeInteger(firstCarArray+0x8,658081404)
                --FOR_MUS_302_69_PP_STOCK_1
                writeInteger(firstCarArray+0xC,1500183094)
                --PON_FIR_STK_78_PP_STOCK_1
                writeInteger(firstCarArray+0x10,3681840500)
                --DOD_CHA_SRT_08_PP_STOCK_1
                writeInteger(firstCarArray+0x14,AOBtoDEC("4A AD 17 C0"))
                --FOR_MUS_BOS_12_PP_STOCK_1
                writeInteger(firstCarArray+0x18,AOBtoDEC("34 44 7D 5D"))
                --FOR_MUS_RTR_12_PP_STOCK_1
                writeInteger(firstCarArray+0x1C,AOBtoDEC("7B 8D C8 B0"))
                --CHE_CAM_ZL1_13_PP_STOCK_1
                writeInteger(firstCarArray+0x20,AOBtoDEC("ED E0 00 CF"))
                --SHE_MUS_SNK_12_PP_STOCK_1
                writeInteger(firstCarArray+0x24,AOBtoDEC("67 53 06 F1"))
                --SHE_DAY_COU_65_PP_STOCK_1
                writeInteger(firstCarArray+0x28,4152129083)
                --CHE_VET_CBN_10_PP_STOCK_1
                writeInteger(firstCarArray+0x2C,AOBtoDEC("9A 39 BD AC"))
                --FOR_GT_STK_06_PP_STOCK_1
                writeInteger(firstCarArray+0x30,AOBtoDEC("44 25 C5 CF"))
                --CHE_CAM_SS_67_NFS_E
                writeInteger(firstCarArray+0x34,764119014)
                --CHE_EL_CAM_70_NFS_E
                writeInteger(firstCarArray+0x38,3006189287)
                --CHE_EL_CAM_70_PP_RIVAL_1
                writeInteger(firstCarArray+0x3C,AOBtoDEC("9C B4 8C 1D"))
                --CHE_CAM_ZL1_13_PP_RUN
                writeInteger(firstCarArray+0x40,AOBtoDEC("8D 0F C1 88"))
                --CHE_VET_CBN_10_PRESALE_1
                writeInteger(firstCarArray+0x44,AOBtoDEC("0D 9E 48 57"))
                --CHE_VET_CBN_10_PRESALE_1
                writeInteger(firstCarArray+0x48,AOBtoDEC("B6 EE F8 CC"))
                --DOD_CHA_RT_71_NFS_E
                writeInteger(firstCarArray+0x4C,531246253)
                --DOD_CHA_SRT_08_ADSALES_1
                writeInteger(firstCarArray+0x50,AOBtoDEC("6E 69 6F 28"))
                --DOD_CHA_SRT_08_NFS_E
                writeInteger(firstCarArray+0x54,AOBtoDEC("63 8D 8E CC"))
                --FOR_GT_STK_06_ADSALES_1
                writeInteger(firstCarArray+0x58,AOBtoDEC("9C 25 95 84"))
                --FOR_MUS_BOS_12_PRESALE_1
                writeInteger(firstCarArray+0x5C,AOBtoDEC("C6 24 4B F5"))
                --FOR_MUS_RTR_12_NFS_E
                writeInteger(firstCarArray+0x60,AOBtoDEC("89 73 1A C2"))
                --FOR_RTR_X_69_PP1V1
                writeInteger(firstCarArray+0x64,AOBtoDEC("0B 36 E5 FF"))
                --FOR_MUS_302_69_ADSALES_1
                writeInteger(firstCarArray+0x68,268766097)
                --FOR_MUS_302_69_NFS_E
                writeInteger(firstCarArray+0x6C,2902452387)
                --SHE_DAY_COU_65_PP_RUN
                writeInteger(firstCarArray+0x70,3604153451)
                --SHE_MUS_SNK_12_PP_RUN
                writeInteger(firstCarArray+0x74,AOBtoDEC("52 7F 68 29"))
                --PON_FIR_STK_78_NFS_E
                writeInteger(firstCarArray+0x78,AOBtoDEC("41 E9 F9 A9"))

                --OVERRIDE UNUSED SLOTS WITH PADDING
                local nextSlotCut = 0x7C
                for i=1,50 do
                    writeInteger(firstCarArray+nextSlotCut,3355304522)
                    nextSlotCut = nextSlotCut + 0x4
                end
            elseif vehicleAIPreset == 2630955241 or --12_2
                vehicleAIPreset == 3567498589 or --13_3
                vehicleAIPreset == 155176213 then --13_31

                --FROM STAGE 9 TO END OF THE RUN

                --TIER 5 &amp; 6 STOCK &amp; CUSTOM
                --CHE_CAM_SS_67_PP_RARE_1
                writeInteger(firstCarArray,AOBtoDEC("B7 C4 AC 12"))
                --CHE_CAM_ZL1_13_PP_RARE_1
                writeInteger(firstCarArray+0x4,AOBtoDEC("5F E0 36 76"))
                --CHE_VET_CBN_PP_RUN
                writeInteger(firstCarArray+0x8,AOBtoDEC("3A FF 2E 44"))
                --CHE_EL_CAM_70_PP_RARE_1
                writeInteger(firstCarArray+0xC,AOBtoDEC("70 BB 38 39"))
                --DOD_CHR_TAXI_PLAYER
                writeInteger(firstCarArray+0x10,AOBtoDEC("40 52 76 0E"))
                --FOR_VIC_TAXI_PLAYER
                writeInteger(firstCarArray+0x14,AOBtoDEC("FB 4C 13 DB"))
                --FOR_GT_STK_06_NFS_E
                writeInteger(firstCarArray+0x18,AOBtoDEC("9D FF AA 5E"))
                --FOR_GT_STK_06_PP_RARE_1
                writeInteger(firstCarArray+0x1C,AOBtoDEC("E0 59 1B 56"))
                --FOR_MUS_BOS_12_PP_RARE_1
                writeInteger(firstCarArray+0x20,AOBtoDEC("44 9B 34 FB"))
                --COP_CAR_INT_11_OOS
                writeInteger(firstCarArray+0x24,AOBtoDEC("9D 90 B5 DF"))
                --PON_FIR_STK_78_PP_RARE_1
                writeInteger(firstCarArray+0x28,AOBtoDEC("89 B3 75 B5"))
                --SHE_DAY_COU_65_PP_RARE_1
                writeInteger(firstCarArray+0x2C,4022012078)
                --SHE_DAY_COU_65_NFS_E
                writeInteger(firstCarArray+0x30,AOBtoDEC("61 6B 47 41"))
                --HEN_VEN_GT_11_PP_STOCK_1
                writeInteger(firstCarArray+0x34,AOBtoDEC("8C 6B A2 70"))
                --CHE_VET_CBN_10_NFS_E
                writeInteger(firstCarArray+0x38,AOBtoDEC("F3 79 48 67"))
                --CHE_VET_CBN_10_PP_RARE_1
                writeInteger(firstCarArray+0x3C,AOBtoDEC("77 80 E0 4C"))

                --OVERRIDE UNUSED SLOTS WITH PADDING
                local nextSlotCut = 0x40
                for i=1,50 do
                    writeInteger(firstCarArray+nextSlotCut,3355304522)
                    nextSlotCut = nextSlotCut + 0x4
                end
            end
        end
    end
end

gs = createTimer(nil)
timer_onTimer(gs,GasStation)
timer_setInterval(gs, 500)
timer_setEnabled(gs, true)

[DISABLE]
timer_setEnabled(gs, false)
print "The Classics Run Gas Stations timer disabled"
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>783</ID>
          <Description>"Gas Station Array Override"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

00853549:
nop
nop
 
[DISABLE]

00853549:
mov [eax],esi
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>445</ID>
          <Description>"UNLOCK ALL VEHICLES"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
mov [eax+18],1
jne "Need for Speed The Run.exe"+53D639

originalcode:
//cmp [eax+18],bl
//jne "Need for Speed The Run.exe"+53D639

exit:
jmp returnhere

"Need for Speed The Run.exe"+53D629:
jmp newmem
returnhere:

[DISABLE]
dealloc(newmem)
"Need for Speed The Run.exe"+53D629:
cmp [eax+18],bl
jne "Need for Speed The Run.exe"+53D639
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>799</ID>
          <Description>"ID_PLAYLIST_CARRESTICTION_OPEN"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
push ebx
lea ebx,[esi+48]
mov [ebx],(int)0 //ID_PLAYLIST_CARRESTICTION_OPEN
mov ecx,[esi+48]
push 00
pop ebx

originalcode:
//mov ecx,[esi+48]
//push 00

exit:
jmp returnhere

"Need for Speed The Run.exe"+48D6C5:
jmp newmem
returnhere:

[DISABLE]
dealloc(newmem)
"Need for Speed The Run.exe"+48D6C5:
mov ecx,[esi+48]
push 00
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1</ID>
          <Description>"ALL AMERICAN RUN STRING SWAP"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local AOB = "4D 41 4C 00 52 45 41 4C 49 53 54 49 43 00 53 45 4C 45 43 54 20 41 20 50 4C 41 59 4C 49 53 54 00"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format
if address ~= nil then
    local string_end = {0x00}
    writeString(address+0x20,"ALL AMERICAN RUN")
    writeBytes(address+0x30,string_end)
    print "String Swap Complete Complete!"
else
    print "String Swap Failed!"
end


[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1052</ID>
          <Description>"CAMARO SS TIER 4 UPGRADE"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "B4 9E BE 5A"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

for i=1,24 do
    if address ~= nil then
        local performance = address + 0x60
        local PRF_ID = hexByteString(performance)
        PRF_ID = "E6 87 8B 2D"
        writeInteger(performance,AOBtoDEC(PRF_ID))
        address = address + 0x80 --We jump to the next vehicle customizable template
    end
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1053</ID>
          <Description>"EL CAMINO SS TIER 4 UPGRADE"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "68 BD 89 F7"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

for i=1,24 do
    if address ~= nil then
        local performance = address + 0x60
        local PRF_ID = hexByteString(performance)
        PRF_ID = "E7 CE 2E B3"
        writeInteger(performance,AOBtoDEC(PRF_ID))
        address = address + 0x80 --We jump to the next vehicle customizable template
    end
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1054</ID>
          <Description>"CHALLENGER 71 TIER 4 UPGRADE"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "7C 86 39 27"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

for i=1,24 do
    if address ~= nil then
        local performance = address + 0x60
        local PRF_ID = hexByteString(performance)
        PRF_ID = "AD 2C AA 1F"
        writeInteger(performance,AOBtoDEC(PRF_ID))
        address = address + 0x80 --We jump to the next vehicle customizable template
    end
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1055</ID>
          <Description>"MUSTANG 69 TIER 4 UPGRADE"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "36 FA 6A 59"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

for i=1,24 do
    if address ~= nil then
        local performance = address + 0x60
        local PRF_ID = hexByteString(performance)
        PRF_ID = "A3 E8 FF AC"
        writeInteger(performance,AOBtoDEC(PRF_ID))
        address = address + 0x80 --We jump to the next vehicle customizable template
    end
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1056</ID>
          <Description>"FIREBIRD TIER 4 UPGRADE"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "74 6D 74 DB"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

for i=1,24 do
    if address ~= nil then
        local performance = address + 0x60
        local PRF_ID = hexByteString(performance)
        PRF_ID = "AF 90 31 DD"
        writeInteger(performance,AOBtoDEC(PRF_ID))
        address = address + 0x80 --We jump to the next vehicle customizable template
    end
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1057</ID>
          <Description>"CHALLENGER SRT8 TIER 4 UPGRADE"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "4A AD 17 C0"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

for i=1,32 do
    if address ~= nil then
        local performance = address + 0x60
        local PRF_ID = hexByteString(performance)
        if i &lt;= 8 then
           PRF_ID = "AE 00 AC 2A"
        elseif i &lt;= 16 then
           PRF_ID = "46 D5 35 B1"
        else
           PRF_ID = "63 8D 8E CC"
        end
        writeInteger(performance,AOBtoDEC(PRF_ID))
        address = address + 0x80 --We jump to the next vehicle customizable template
    end
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1058</ID>
          <Description>"MUSTANG BOSS 12 TIER 4 UPGRADE"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "34 44 7D 5D"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

for i=1,32 do
    if address ~= nil then
        local performance = address + 0x60
        local PRF_ID = hexByteString(performance)
        PRF_ID = "DE 26 11 F3"
        writeInteger(performance,AOBtoDEC(PRF_ID))
        address = address + 0x80 --We jump to the next vehicle customizable template
    end
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1059</ID>
          <Description>"MUSTANG RTR 12 TIER 4 UPGRADE"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "7B 8D C8 B0"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

for i=1,9 do
    if address ~= nil then
        local performance = address + 0x60
        local PRF_ID = hexByteString(performance)
        PRF_ID = "1D 2B D1 95"
        writeInteger(performance,AOBtoDEC(PRF_ID))
        address = address + 0x80 --We jump to the next vehicle customizable template
    end
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1060</ID>
          <Description>"CAMARO ZL1 TIER 4 UPGRADE"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "ED E0 00 CF"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

for i=1,32 do
    if address ~= nil then
        local performance = address + 0x60
        local PRF_ID = hexByteString(performance)
        PRF_ID = "8D 0F C1 88"
        writeInteger(performance,AOBtoDEC(PRF_ID))
        address = address + 0x80 --We jump to the next vehicle customizable template
    end
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1061</ID>
          <Description>"SHELBY MUSTANG 12 TIER 4 UPGRADE"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "67 53 06 F1"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

for i=1,32 do
    if address ~= nil then
        local performance = address + 0x60
        local PRF_ID = hexByteString(performance)
        if i &lt;= 24 then
           PRF_ID = "16 0C BD 8C"
        else
           PRF_ID = "DF 7F 94 9D"
        end
        writeInteger(performance,AOBtoDEC(PRF_ID))
        address = address + 0x80 --We jump to the next vehicle customizable template
    end
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1062</ID>
          <Description>"DAYTONA COBRA TIER 4 UPGRADE"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "3B 76 7C F7"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

for i=1,24 do
    if address ~= nil then
        local performance = address + 0x60
        local PRF_ID = hexByteString(performance)
        if i &lt;= 16 then
           PRF_ID = "D7 77 06 1A"
        else
           PRF_ID = "9A AC A8 9F"
        end
        writeInteger(performance,AOBtoDEC(PRF_ID))
        address = address + 0x80 --We jump to the next vehicle customizable template
    end
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1022</ID>
          <Description>"MILA T5"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "2D 06 A8 6D"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "E0 F1 1E 27"
    SPL_ID = "C2 FB 40 7D"
    EXH_ID = "C9 3F 57 21"
    HOD_ID = "4D AE E3 C2"
    FRM_ID = "A7 17 A7 E3"
    RRM_ID = "A7 17 A7 E3"
    LIV_ID = "67 8A 91 13"
    PRF_ID = "84 C1 E7 BA"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1023</ID>
          <Description>"NIKKI T5"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "EE AA A3 A6"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "22 F1 1E 27"
    SPL_ID = "C2 FB 40 7D"
    --EXH_ID = "C9 3F 57 21"
    --HOD_ID = "4D AE E3 C2"
    FRM_ID = "E5 17 01 DF"
    RRM_ID = "E5 17 01 DF"
    LIV_ID = "64 8A 91 13"
    PRF_ID = "84 C1 E7 BA"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1024</ID>
          <Description>"EDDIE T5"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "E0 78 5E 9D"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "4A 8A 79 17"
    SPL_ID = "C2 FB 40 7D"
    EXH_ID = "EB 45 11 77"
    --HOD_ID = "00 00 00 00"
    --FRM_ID = "00 00 00 00"
    --RRM_ID = "00 00 00 00"
    LIV_ID = "C3 C6 B2 A4"
    PRF_ID = "91 21 38 5E"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1021</ID>
          <Description>"CALVIN T5"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "75 23 80 A0"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "E0 7D 44 9A"
    SPL_ID = "00 00 00 00"
    EXH_ID = "69 38 0F F9"
    HOD_ID = "AF 77 21 F5"
    FRM_ID = "43 99 5C 57"
    RRM_ID = "43 99 5C 57"
    LIV_ID = "A7 3D 7F 40"
    PRF_ID = "F3 79 48 67"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1025</ID>
          <Description>"DELEON 300MPH"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "A1 56 67 E1"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "8B 37 3A F9"
    SPL_ID = "00 00 00 00"
    EXH_ID = "4D 94 3E 52"
    HOD_ID = "00 00 00 00"
    FRM_ID = "24 69 86 BE"
    RRM_ID = "E6 68 2C C3"
    LIV_ID = "C7 34 E3 38"
    PRF_ID = "7E 69 4A AC"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>800</ID>
          <Description>"COP_DOD_CHR_07_STATE_SLOW_TIER_2_TO_TIER_5"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "CC 1F 27 8A"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    --BDK_ID = "28 A1 F4 7D"
    --SPL_ID = "C2 FB 40 7D"
    --EXH_ID = "00 00 00 00"
    --HOD_ID = "00 00 00 00"
    --FRM_ID = "E1 39 41 43"
    --RRM_ID = "2D 3A 9B 3E"
    LIV_ID = "49 A9 0D B2"
    PRF_ID = "7F 7F 29 AD"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>801</ID>
          <Description>"COP_FOR_POL_INT_11_UNDERCOVER_TIER_4_TO_TIER_5"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "0E A1 92 CA"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    --BDK_ID = "BD 9A 29 EB"
    --SPL_ID = "C2 FB 40 7D"
    --EXH_ID = "CD BF 63 E6"
    --HOD_ID = "00 00 00 00"
    --FRM_ID = "38 02 29 8B"
    --RRM_ID = "38 02 29 8B"
    --LIV_ID = "77 FC 73 1E"
    PRF_ID = "F8 1E 05 81"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>969</ID>
          <Description>"EL CAMINO 2053301536"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "20 E5 62 7A"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "00 00 00 00"
    --SPL_ID = "C2 FB 40 7D"
    --EXH_ID = "A9 FD 86 67"
    HOD_ID = "8D 05 B1 DA"
    --FRM_ID = "A4 D5 19 40" --66 BD 5F 31
    --RRM_ID = "A4 D5 19 40"
    LIV_ID = "67 f4 44 45"
    --PRF_ID = "4D B2 08 21"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>970</ID>
          <Description>"EL CAMINO 96789362"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "72 E3 C4 05"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    --BDK_ID = "00 00 00 00"
    --SPL_ID = "C2 FB 40 7D"
    --EXH_ID = "A9 FD 86 67"
    HOD_ID = "00 00 00 00"
    --FRM_ID = "A4 D5 19 40" --66 BD 5F 31
    --RRM_ID = "A4 D5 19 40"
    LIV_ID = "ea df 44 45"
    --PRF_ID = "4D B2 08 21"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>971</ID>
          <Description>"EL CAMINO 3393955391"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "3F A6 4B CA"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    --BDK_ID = "00 00 00 00"
    --SPL_ID = "C2 FB 40 7D"
    EXH_ID = "00 00 00 00"
    HOD_ID = "00 00 00 00"
    --FRM_ID = "A4 D5 19 40" --66 BD 5F 31
    --RRM_ID = "A4 D5 19 40"
    LIV_ID = "66 f4 44 45"
    --PRF_ID = "4D B2 08 21"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>972</ID>
          <Description>"EL CAMINO 3643384219"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "9B A1 29 D9"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    --BDK_ID = "00 00 00 00"
    --SPL_ID = "C2 FB 40 7D"
    --EXH_ID = "00 00 00 00"
    --HOD_ID = "00 00 00 00"
    --FRM_ID = "A4 D5 19 40" --66 BD 5F 31
    --RRM_ID = "A4 D5 19 40"
    LIV_ID = "e5 df 44 45"
    --PRF_ID = "4D B2 08 21"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>973</ID>
          <Description>"EL CAMINO 3169722097 TIER 5"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "F1 1E EE BC"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    --BDK_ID = "00 00 00 00"
    --SPL_ID = "C2 FB 40 7D"
    EXH_ID = "49 94 3E 52"
    --HOD_ID = "00 00 00 00"
    --FRM_ID = "A4 D5 19 40" --66 BD 5F 31
    --RRM_ID = "A4 D5 19 40"
    LIV_ID = "67 9B BE 75"
    PRF_ID = "4C 1E 71 BE"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>974</ID>
          <Description>"CAMARO SS 1925569773 TIER 5"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "ED DC C5 72"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    --BDK_ID = "00 00 00 00"
    --SPL_ID = "C2 FB 40 7D"
    --EXH_ID = "49 94 3E 52"
    --HOD_ID = "00 00 00 00"
    --FRM_ID = "A4 D5 19 40" --66 BD 5F 31
    --RRM_ID = "A4 D5 19 40"
    --LIV_ID = "67 9B BE 75"
    PRF_ID = "91 21 38 5E"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>975</ID>
          <Description>"CAMARO SS 145181003 TIER 5"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "4B 49 A7 08"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    --BDK_ID = "00 00 00 00"
    --SPL_ID = "C2 FB 40 7D"
    --EXH_ID = "49 94 3E 52"
    --HOD_ID = "00 00 00 00"
    --FRM_ID = "A4 D5 19 40" --66 BD 5F 31
    --RRM_ID = "A4 D5 19 40"
    LIV_ID = "03 16 C4 F2"
    PRF_ID = "91 21 38 5E"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>976</ID>
          <Description>"CAMARO SS 2789574667"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "0B 88 45 A6"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "E4 E2 43 69"
    SPL_ID = "00 00 00 00"
    EXH_ID = "2B 1B 5A 2C"
    --HOD_ID = "00 00 00 00"
    FRM_ID = "A4 D5 19 40"
    RRM_ID = "A4 D5 19 40"
    LIV_ID = "67 53 44 8a"
    --PRF_ID = "91 21 38 5E"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>977</ID>
          <Description>"CAMARO SS 2695468121"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "59 94 A9 A0"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "E4 E2 43 69"
    SPL_ID = "C2 FB 40 7D"
    EXH_ID = "8C 3E 81 41"
    --HOD_ID = "00 00 00 00"
    FRM_ID = "A4 D5 19 40"
    RRM_ID = "A4 D5 19 40"
    LIV_ID = "e5 3e 44 8a"
    --PRF_ID = "91 21 38 5E"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>978</ID>
          <Description>"CAMARO SS 2955493261"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "8D 3F 29 B0"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "E4 E2 43 69"
    --SPL_ID = "C2 FB 40 7D"
    EXH_ID = "EB F5 98 2F"
    HOD_ID = "8D 1B 0D B3"
    FRM_ID = "A4 D5 19 40"
    RRM_ID = "A4 D5 19 40"
    LIV_ID = "6E 30 7B B1"
    --PRF_ID = "91 21 38 5E"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>979</ID>
          <Description>"CAMARO SS 1157837898"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "4A 34 03 45"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "E4 E2 43 69"
    SPL_ID = "C2 FB 40 7D"
    EXH_ID = "2B 1B 5A 2C"
    HOD_ID = "00 00 00 00"
    FRM_ID = "A4 D5 19 40"
    RRM_ID = "A4 D5 19 40"
    LIV_ID = "64 69 90 0E"
    --PRF_ID = "91 21 38 5E"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>980</ID>
          <Description>"ZL1 48 3B 44 54 TIER 5"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "48 3B 44 54"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "03 F1 1E 27"
    --SPL_ID = "C2 FB 40 7D"
    EXH_ID = "00 00 00 00"
    HOD_ID = "4D AE E3 C2"
    --FRM_ID = "A4 D5 19 40"
    --RRM_ID = "A4 D5 19 40"
    LIV_ID = "86 3c 28 12"
    PRF_ID = "84 C1 E7 BA"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>981</ID>
          <Description>"ZL1 8E A6 E6 19"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "8E A6 E6 19"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "E0 F1 1E 27"
    SPL_ID = "00 00 00 00"
    EXH_ID = "C9 3F 57 21"
    --HOD_ID = "4D AE E3 C2"
    --FRM_ID = "A4 D5 19 40"
    --RRM_ID = "A4 D5 19 40"
    LIV_ID = "8a 40 28 12"
    --PRF_ID = "84 C1 E7 BA"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>982</ID>
          <Description>"ZL1 AC 64 BB 73"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "AC 64 BB 73"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    --BDK_ID = "E0 F1 1E 27"
    --SPL_ID = "00 00 00 00"
    --EXH_ID = "C9 3F 57 21"
    --HOD_ID = "4D AE E3 C2"
    --FRM_ID = "A4 D5 19 40"
    --RRM_ID = "A4 D5 19 40"
    LIV_ID = "69 79 D7 25"
    --PRF_ID = "84 C1 E7 BA"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>983</ID>
          <Description>"ZL1 A2 4A 7A 3C"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "A2 4A 7A 3C"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    --BDK_ID = "E0 F1 1E 27"
    --SPL_ID = "00 00 00 00"
    --EXH_ID = "C9 3F 57 21"
    --HOD_ID = "4D AE E3 C2"
    --FRM_ID = "A4 D5 19 40"
    --RRM_ID = "A4 D5 19 40"
    LIV_ID = "66 79 D7 25"
    --PRF_ID = "84 C1 E7 BA"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>984</ID>
          <Description>"ZL1 35 69 AD C9 TIER 5"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "35 69 AD C9"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    --BDK_ID = "E0 F1 1E 27"
    --SPL_ID = "00 00 00 00"
    EXH_ID = "C9 3F 57 21"
    --HOD_ID = "4D AE E3 C2"
    --FRM_ID = "A4 D5 19 40"
    --RRM_ID = "A4 D5 19 40"
    LIV_ID = "67 69 90 0E"
    --PRF_ID = "84 C1 E7 BA"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>985</ID>
          <Description>"ZL1 B6 1B F2 6C TIER 5"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "B6 1B F2 6C"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "22 F1 1E 27"
    --SPL_ID = "00 00 00 00"
    --EXH_ID = "C9 3F 57 21"
    --HOD_ID = "4D AE E3 C2"
    FRM_ID = "E5 17 01 DF"
    RRM_ID = "E5 17 01 DF"
    LIV_ID = "87 40 28 12"
    PRF_ID = "84 C1 E7 BA"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>986</ID>
          <Description>"ZL1 D1 AD 85 72"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "D1 AD 85 72"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "00 00 00 00"
    --SPL_ID = "00 00 00 00"
    --EXH_ID = "C9 3F 57 21"
    --HOD_ID = "4D AE E3 C2"
    FRM_ID = "E5 17 01 DF"
    RRM_ID = "E5 17 01 DF"
    LIV_ID = "23 EF 59 DE"
    PRF_ID = "8D 0F C1 88"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>987</ID>
          <Description>"ZL1 55 CF 31 6D TIER 5"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "55 CF 31 6D"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "22 F1 1E 27"
    --SPL_ID = "00 00 00 00"
    --EXH_ID = "C9 3F 57 21"
    --HOD_ID = "4D AE E3 C2"
    FRM_ID = "E5 17 01 DF"
    RRM_ID = "E5 17 01 DF"
    LIV_ID = "69 69 90 0E"
    PRF_ID = "84 C1 E7 BA"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>988</ID>
          <Description>"ZL1 A0 6C BE 3D"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "A0 6C BE 3D"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "00 00 00 00"
    --SPL_ID = "00 00 00 00"
    --EXH_ID = "C9 3F 57 21"
    --HOD_ID = "4D AE E3 C2"
    FRM_ID = "E5 17 01 DF"
    RRM_ID = "E5 17 01 DF"
    LIV_ID = "e6 5b 44 8a"
    PRF_ID = "8D 0F C1 88"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>989</ID>
          <Description>"CROSS CORVETTE BODYKIT FIX"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "0D 9E 48 57"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "E0 7D 44 9A"
    SPL_ID = "69 88 70 A2"
    --EXH_ID = "2B 1B 5A 2C"
    --HOD_ID = "00 00 00 00"
    --FRM_ID = "A4 D5 19 40"
    --RRM_ID = "A4 D5 19 40"
    --LIV_ID = "64 69 90 0E"
    PRF_ID = "ED 17 53 F7"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>990</ID>
          <Description>"CROSS CORVETTE 37 3F 8B 85 TIER 6"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "37 3F 8B 85"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "E0 7D 44 9A"
    SPL_ID = "69 88 70 A2"
    EXH_ID = "69 38 0F F9"
    --HOD_ID = "00 00 00 00"
    FRM_ID = "03 DA 06 5C"
    RRM_ID = "03 DA 06 5C"
    LIV_ID = "E4 EA AE AD"
    PRF_ID = "4B 46 F7 DD"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>991</ID>
          <Description>"CORVETTE DB 88 9A BD"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "DB 88 9A BD"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    --BDK_ID = "E0 7D 44 9A"
    --SPL_ID = "69 88 70 A2"
    --EXH_ID = "2B 1B 5A 2C"
    HOD_ID = "AF 77 21 F5"
    --FRM_ID = "A4 D5 19 40"
    --RRM_ID = "A4 D5 19 40"
    LIV_ID = "86 71 88 18"
    PRF_ID = "ED 17 53 F7"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>992</ID>
          <Description>"CORVETTE F8 58 2E 03"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "F8 58 2E 03"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    --BDK_ID = "E0 7D 44 9A"
    SPL_ID = "4B 88 70 A2"
    --EXH_ID = "2B 1B 5A 2C"
    HOD_ID = "A1 77 21 F5"
    --FRM_ID = "A4 D5 19 40"
    --RRM_ID = "A4 D5 19 40"
    LIV_ID = "05 2C 22 28"
    --PRF_ID = "ED 17 53 F7"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>993</ID>
          <Description>"CORVETTE 24 0A BE 49 TIER 6"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "24 0A BE 49"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    --BDK_ID = "E0 7D 44 9A"
    SPL_ID = "69 88 70 A2"
    EXH_ID = "C9 3F 57 21"
    HOD_ID = "A1 77 21 F5"
    --FRM_ID = "A4 D5 19 40"
    --RRM_ID = "A4 D5 19 40"
    LIV_ID = "44 EC 6F 36"
    PRF_ID = "9A 98 BE 63"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>994</ID>
          <Description>"CORVETTE 81 9C B4 DE TIER 6"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "81 9C B4 DE"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "E0 7D 44 9A"
    SPL_ID = "00 00 00 00"
    EXH_ID = "69 38 0F F9"
    HOD_ID = "A1 77 21 F5"
    --FRM_ID = "A4 D5 19 40"
    --RRM_ID = "A4 D5 19 40"
    LIV_ID = "69 69 90 0E"
    PRF_ID = "9A 98 BE 63"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>995</ID>
          <Description>"CORVETTE FA 8F 9C F0"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "FA 8F 9C F0"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "00 00 00 00"
    SPL_ID = "00 00 00 00"
    EXH_ID = "69 38 0F F9"
    HOD_ID = "AF 77 21 F5"
    FRM_ID = "03 DA 06 5C"
    RRM_ID = "43 99 5C 57"
    LIV_ID = "3C E8 8F D8"
    PRF_ID = "00 00 00 00"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>996</ID>
          <Description>"CORVETTE 3F 39 1A 27 TIER 5"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "3F 39 1A 27"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    --BDK_ID = "00 00 00 00"
    --SPL_ID = "00 00 00 00"
    EXH_ID = "69 38 0F F9"
    --HOD_ID = "AF 77 21 F5"
    --FRM_ID = "03 DA 06 5C"
    --RRM_ID = "43 99 5C 57"
    LIV_ID = "E3 61 39 55"
    --PRF_ID = "00 00 00 00"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>997</ID>
          <Description>"SRT8 34 D4 8E 1A"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "34 D4 8E 1A"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    --BDK_ID = "00 00 00 00"
    --SPL_ID = "00 00 00 00"
    --EXH_ID = "69 38 0F F9"
    --HOD_ID = "AF 77 21 F5"
    --FRM_ID = "03 DA 06 5C"
    --RRM_ID = "43 99 5C 57"
    LIV_ID = "04 ab b7 dd"
    PRF_ID = "34 D4 8E 1A"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>998</ID>
          <Description>"SRT8 B3 C8 F9 12 TIER 5"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "B3 C8 F9 12"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "00 00 00 00"
    SPL_ID = "00 00 00 00"
    EXH_ID = "ED 03 78 D8"
    HOD_ID = "8D 30 59 7B"
    --FRM_ID = "03 DA 06 5C"
    --RRM_ID = "43 99 5C 57"
    LIV_ID = "89 a2 b7 dd"
    PRF_ID = "84 C1 E7 BA"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>999</ID>
          <Description>"SRT8 6D A8 E9 ED TIER 5"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "6D A8 E9 ED"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "5C A0 90 80"
    --SPL_ID = "00 00 00 00"
    EXH_ID = "00 00 00 00"
    --HOD_ID = "AF 77 21 F5"
    --FRM_ID = "03 DA 06 5C"
    --RRM_ID = "43 99 5C 57"
    LIV_ID = "69 69 90 0E"
    PRF_ID = "84 C1 E7 BA"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1000</ID>
          <Description>"SRT8 80 F6 85 A3"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "80 F6 85 A3"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "5C A0 90 80"
    SPL_ID = "00 00 00 00"
    EXH_ID = "ED 03 78 D8"
    HOD_ID = "8D 30 59 7B"
    --FRM_ID = "03 DA 06 5C"
    --RRM_ID = "43 99 5C 57"
    LIV_ID = "3C 57 37 89"
    PRF_ID = "63 8D 8E CC"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1001</ID>
          <Description>"SRT8 06 74 91 C5"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "06 74 91 C5"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "5C A0 90 80"
    SPL_ID = "C2 FB 40 7D"
    EXH_ID = "4A C8 C7 42"
    HOD_ID = "8D 30 59 7B"
    --FRM_ID = "03 DA 06 5C"
    --RRM_ID = "43 99 5C 57"
    LIV_ID = "03 16 C4 F2"
    PRF_ID = "63 8D 8E CC"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1002</ID>
          <Description>"SRT8 77 C6 0E 11"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "77 C6 0E 11"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "5C A0 90 80"
    SPL_ID = "00 00 00 00"
    EXH_ID = "00 00 00 00"
    HOD_ID = "8D 30 59 7B"
    --FRM_ID = "03 DA 06 5C"
    --RRM_ID = "43 99 5C 57"
    LIV_ID = "17 0E 78 E1"
    PRF_ID = "63 8D 8E CC"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1003</ID>
          <Description>"FORD GT 4A 82 88 AD"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "4A 82 88 AD"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    --BDK_ID = "5C A0 90 80"
    --SPL_ID = "00 00 00 00"
    EXH_ID = "00 00 00 00"
    --HOD_ID = "8D 30 59 7B"
    --FRM_ID = "03 DA 06 5C"
    --RRM_ID = "43 99 5C 57"
    LIV_ID = "44 C0 45 CE"
    --PRF_ID = "63 8D 8E CC"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1004</ID>
          <Description>"FORD GT 5F 98 D4 C2"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "5F 98 D4 C2"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "66 E4 FD A8"
    SPL_ID = "00 00 00 00"
    --EXH_ID = "00 00 00 00"
    --HOD_ID = "8D 30 59 7B"
    --FRM_ID = "03 DA 06 5C"
    --RRM_ID = "43 99 5C 57"
    LIV_ID = "E3 61 39 55"
    PRF_ID = "57 38 95 0F"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1005</ID>
          <Description>"FORD GT 37 0D FC 19"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "37 0D FC 19"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "66 E4 FD A8"
    --SPL_ID = "00 00 00 00"
    EXH_ID = "4A F0 A3 50"
    --HOD_ID = "8D 30 59 7B"
    --FRM_ID = "03 DA 06 5C"
    --RRM_ID = "43 99 5C 57"
    LIV_ID = "06 E8 E3 CF"
    --PRF_ID = "57 38 95 0F"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1006</ID>
          <Description>"FORD GT 91 98 3D 67 TIER 5"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "91 98 3D 67"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "66 E4 FD A8"
    SPL_ID = "4B AB 1F 88"
    EXH_ID = "4A F0 A3 50"
    --HOD_ID = "8D 30 59 7B"
    --FRM_ID = "03 DA 06 5C"
    --RRM_ID = "43 99 5C 57"
    LIV_ID = "69 69 90 0E"
    --PRF_ID = "57 38 95 0F"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1007</ID>
          <Description>"FORD GT 79 DF 77 14 TIER 5"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "79 DF 77 14"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "66 E4 FD A8"
    SPL_ID = "4C AB 1F 88"
    EXH_ID = "4A F0 A3 50"
    --HOD_ID = "8D 30 59 7B"
    --FRM_ID = "03 DA 06 5C"
    --RRM_ID = "43 99 5C 57"
    LIV_ID = "87 A5 EC 44"
    --PRF_ID = "57 38 95 0F"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1008</ID>
          <Description>"MUSTANG BOSS 12 70 E1 83 B5"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "70 E1 83 B5"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    --BDK_ID = "66 E4 FD A8"
    --SPL_ID = "4C AB 1F 88"
    --EXH_ID = "4A F0 A3 50"
    --HOD_ID = "8D 30 59 7B"
    --FRM_ID = "03 DA 06 5C"
    --RRM_ID = "43 99 5C 57"
    LIV_ID = "c2 45 96 a4"
    --PRF_ID = "57 38 95 0F"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1009</ID>
          <Description>"MUSTANG BOSS 12 CD A6 7C BB TIER 5"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "CD A6 7C BB"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "C9 59 50 4E"
    --SPL_ID = "4C AB 1F 88"
    --EXH_ID = "4A F0 A3 50"
    --HOD_ID = "8D 30 59 7B"
    FRM_ID = "D2 7C 0B D0"
    RRM_ID = "D2 7C 0B D0"
    LIV_ID = "69 69 90 0E"
    PRF_ID = "9C 3D 18 F1"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1010</ID>
          <Description>"MUSTANG BOSS 12 01 FC 52 46"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "01 FC 52 46"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "C9 59 50 4E"
    SPL_ID = "48 A8 48 1B"
    EXH_ID = "4D 76 5B 69"
    --HOD_ID = "8D 30 59 7B"
    --FRM_ID = "D2 7C 0B D0"
    --RRM_ID = "D2 7C 0B D0"
    LIV_ID = "45 EC 6F 36"
    --PRF_ID = "9C 3D 18 F1"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1011</ID>
          <Description>"MUSTANG BOSS 12 F1 FA D2 72"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "F1 FA D2 72"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "C9 59 50 4E"
    SPL_ID = "48 A8 48 1B"
    EXH_ID = "4C 76 5B 69"
    --HOD_ID = "8D 30 59 7B"
    --FRM_ID = "D2 7C 0B D0"
    --RRM_ID = "D2 7C 0B D0"
    LIV_ID = "eb 5b 44 8a"
    --PRF_ID = "9C 3D 18 F1"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1012</ID>
          <Description>"MUSTANG RTR 12 E9 30 96 43"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "E9 30 96 43"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "63 E3 1F A1"
    --SPL_ID = "48 A8 48 1B"
    --EXH_ID = "4C 76 5B 69"
    --HOD_ID = "8D 30 59 7B"
    --FRM_ID = "D2 7C 0B D0"
    --RRM_ID = "D2 7C 0B D0"
    LIV_ID = "e6 5b 44 8a"
    --PRF_ID = "9C 3D 18 F1"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1013</ID>
          <Description>"MUSTANG RTR 12 E3 90 28 05"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "E3 90 28 05"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "00 00 00 00"
    --SPL_ID = "48 A8 48 1B"
    --EXH_ID = "4C 76 5B 69"
    --HOD_ID = "8D 30 59 7B"
    --FRM_ID = "D2 7C 0B D0"
    --RRM_ID = "D2 7C 0B D0"
    LIV_ID = "09 E8 E3 CF"
    PRF_ID = "1D 2B D1 95"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1014</ID>
          <Description>"MUSTANG RTR 12 78 C4 98 97"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "78 C4 98 97"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "63 E3 1F A1"
    --SPL_ID = "48 A8 48 1B"
    --EXH_ID = "4C 76 5B 69"
    --HOD_ID = "8D 30 59 7B"
    --FRM_ID = "D2 7C 0B D0"
    --RRM_ID = "D2 7C 0B D0"
    LIV_ID = "03 16 C4 F2"
    PRF_ID = "1D 2B D1 95"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1015</ID>
          <Description>"MUSTANG RTR 12 C7 65 54 3E"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "C7 65 54 3E"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "00 00 00 00"
    --SPL_ID = "48 A8 48 1B"
    --EXH_ID = "4C 76 5B 69"
    --HOD_ID = "8D 30 59 7B"
    --FRM_ID = "D2 7C 0B D0"
    --RRM_ID = "D2 7C 0B D0"
    LIV_ID = "E3 61 39 55"
    PRF_ID = "1D 2B D1 95"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1016</ID>
          <Description>"MUSTANG RTR 12 BC 63 A7 20"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "BC 63 A7 20"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "63 E3 1F A1"
    --SPL_ID = "48 A8 48 1B"
    --EXH_ID = "4C 76 5B 69"
    --HOD_ID = "8D 30 59 7B"
    --FRM_ID = "D2 7C 0B D0"
    --RRM_ID = "D2 7C 0B D0"
    LIV_ID = "17 0E 78 E1"
    PRF_ID = "1D 2B D1 95"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1017</ID>
          <Description>"MUSTANG 69 95 9B B3 01 TIER 5"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "95 9B B3 01"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "4A 8A 79 17"
    SPL_ID = "C2 FB 40 7D"
    EXH_ID = "EB 45 11 77"
    --HOD_ID = "00 00 00 00"
    --FRM_ID = "00 00 00 00"
    --RRM_ID = "00 00 00 00"
    LIV_ID = "69 69 90 0E"
    PRF_ID = "A4 98 C7 2B"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1018</ID>
          <Description>"MUSTANG 69 73 AD 1B D6 TIER 5"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "73 AD 1B D6"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "4A 8A 79 17"
    SPL_ID = "C2 FB 40 7D"
    EXH_ID = "EB 45 11 77"
    --HOD_ID = "00 00 00 00"
    FRM_ID = "A4 D5 19 40"
    RRM_ID = "A4 D5 19 40"
    LIV_ID = "06 30 33 B8"
    PRF_ID = "A4 98 C7 2B"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1019</ID>
          <Description>"MUSTANG 69 D3 E7 51 27"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "D3 E7 51 27"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "4A 8A 79 17"
    --SPL_ID = "C2 FB 40 7D"
    EXH_ID = "00 00 00 00"
    --HOD_ID = "00 00 00 00"
    --FRM_ID = "00 00 00 00"
    --RRM_ID = "00 00 00 00"
    LIV_ID = "69 53 44 8a"
    --PRF_ID = "A4 98 C7 2B"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1020</ID>
          <Description>"MUSTANG 69 C4 9F F8 41"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "C4 9F F8 41"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "4A 8A 79 17"
    --SPL_ID = "C2 FB 40 7D"
    EXH_ID = "AD 84 70 6C"
    --HOD_ID = "00 00 00 00"
    --FRM_ID = "00 00 00 00"
    --RRM_ID = "00 00 00 00"
    LIV_ID = "47 55 55 51"
    --PRF_ID = "A4 98 C7 2B"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1026</ID>
          <Description>"FIREBIRD 5E FD 52 DD TIER 5"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "5E FD 52 DD"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "00 00 00 00"
    SPL_ID = "C2 FB 40 7D"
    EXH_ID = "A9 FD 86 67"
    HOD_ID = "00 00 00 00"
    FRM_ID = "00 00 00 00"
    RRM_ID = "00 00 00 00"
    LIV_ID = "87 17 77 7b"
    PRF_ID = "A4 98 C7 2B"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1027</ID>
          <Description>"FIREBIRD 55 D7 B4 78"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "55 D7 B4 78"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "6B 41 B9 A9"
    SPL_ID = "C2 FB 40 7D"
    EXH_ID = "A9 FD 86 67"
    HOD_ID = "2D 5C 61 DB"
    FRM_ID = "52 A3 07 AD"
    RRM_ID = "52 A3 07 AD"
    LIV_ID = "E3 61 39 55"
    PRF_ID = "AF 90 31 DD"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1028</ID>
          <Description>"FIREBIRD 93 FE E1 3E"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "93 FE E1 3E"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "6B 41 B9 A9"
    SPL_ID = "C2 FB 40 7D"
    EXH_ID = "A9 84 70 6C"
    HOD_ID = "2D 5C 61 DB"
    FRM_ID = "52 A3 07 AD"
    RRM_ID = "52 A3 07 AD"
    LIV_ID = "84 17 77 7b"
    PRF_ID = "AF 90 31 DD"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1029</ID>
          <Description>"FIREBIRD B1 25 4D 28"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "B1 25 4D 28"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "00 00 00 00"
    SPL_ID = "C2 FB 40 7D"
    EXH_ID = "00 00 00 00"
    HOD_ID = "2D 5C 61 DB"
    FRM_ID = "FD C8 BE 89"
    RRM_ID = "FD C8 BE 89"
    LIV_ID = "D5 C0 0E 35"
    PRF_ID = "AF 90 31 DD"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1030</ID>
          <Description>"FIREBIRD 98 8F 61 29 TIER 5"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "98 8F 61 29"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "00 00 00 00"
    SPL_ID = "C2 FB 40 7D"
    EXH_ID = "00 00 00 00"
    HOD_ID = "2D 5C 61 DB"
    FRM_ID = "45 6D 31 AF"
    RRM_ID = "45 6D 31 AF"
    LIV_ID = "66 53 44 8a"
    PRF_ID = "A4 98 C7 2B"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1031</ID>
          <Description>"FIREBIRD 9C AE C6 FC"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "9C AE C6 FC"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "00 00 00 00"
    SPL_ID = "C2 FB 40 7D"
    EXH_ID = "00 00 00 00"
    HOD_ID = "2D 5C 61 DB"
    FRM_ID = "45 6D 31 AF"
    RRM_ID = "45 6D 31 AF"
    LIV_ID = "64 53 44 8a"
    PRF_ID = "AF 90 31 DD"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1032</ID>
          <Description>"DAYTONA 3357183898"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "9A 8F 1A C8"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "00 00 00 00"
    --SPL_ID = "C2 FB 40 7D"
    --EXH_ID = "A9 FD 86 67"
    --HOD_ID = "2D 5C 61 DB"
    --FRM_ID = "A4 D5 19 40" --66 BD 5F 31
    --RRM_ID = "A4 D5 19 40"
    LIV_ID = "6E 30 7B B1"
    PRF_ID = "D7 77 06 1A"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1033</ID>
          <Description>"DAYTONA 232325685 TIER 5"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "35 02 D9 0D"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "DC 25 04 98"
    --SPL_ID = "C2 FB 40 7D"
    --EXH_ID = "A9 FD 86 67"
    --HOD_ID = "2D 5C 61 DB"
    FRM_ID = "A4 D5 19 40" --66 BD 5F 31
    RRM_ID = "A4 D5 19 40"
    LIV_ID = "69 69 90 0E"
    PRF_ID = "4D B2 08 21"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1034</ID>
          <Description>"DAYTONA 3312278586"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "3A 5C 6D C5"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "00 00 00 00"
    --SPL_ID = "C2 FB 40 7D"
    --EXH_ID = "A9 FD 86 67"
    --HOD_ID = "2D 5C 61 DB"
    FRM_ID = "66 BD 5F 31"
    RRM_ID = "66 BD 5F 31"
    LIV_ID = "e6 5b 44 8a"
    PRF_ID = "5E 9F B7 3C"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1035</ID>
          <Description>"DAYTONA 1201503826 TIER 5"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "52 7E 9D 47"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "DC 25 04 98"
    --SPL_ID = "C2 FB 40 7D"
    --EXH_ID = "A9 FD 86 67"
    --HOD_ID = "2D 5C 61 DB"
    FRM_ID = "66 BD 5F 31"
    RRM_ID = "66 BD 5F 31"
    LIV_ID = "07 8e a2 9d"
    PRF_ID = "4D B2 08 21"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1037</ID>
          <Description>"SHELBY MUSTANG 12 69 17 CF A8 TIER 5"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "69 17 CF A8"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "84 44 46 4C"
    --SPL_ID = "C2 FB 40 7D"
    --EXH_ID = "A9 FD 86 67"
    --HOD_ID = "2D 5C 61 DB"
    FRM_ID = "C5 23 55 95"
    RRM_ID = "C5 23 55 95"
    LIV_ID = "69 69 90 0E"
    PRF_ID = "9C 3D 18 F1"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1038</ID>
          <Description>"SHELBY MUSTANG 12 52 96 24 CC"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "52 96 24 CC"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "00 00 00 00"
    SPL_ID = "00 00 00 00"
    --EXH_ID = "A9 FD 86 67"
    --HOD_ID = "2D 5C 61 DB"
    FRM_ID = "09 74 55 EE"
    RRM_ID = "09 74 55 EE"
    LIV_ID = "E3 61 39 55"
    PRF_ID = "DF 7F 94 9D"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1039</ID>
          <Description>"SHELBY MUSTANG 12 7F 42 17 C4 TIER 5 JACK"</Description>
          <LastState Activated="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "7F 42 17 C4"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "84 44 46 4C"
    SPL_ID = "00 00 00 00"
    --EXH_ID = "A9 FD 86 67"
    --HOD_ID = "2D 5C 61 DB"
    FRM_ID = "6F 83 2F C4"
    RRM_ID = "6F 83 2F C4"
    LIV_ID = "80 C1 2B 52"
    PRF_ID = "9C 3D 18 F1"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>933</ID>
          <Description>"CAMARO SS E5 21 6D 68 TIER 5"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "E5 21 6D 68"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "26 E2 43 69"
    SPL_ID = "00 00 00 00"
    EXH_ID = "2B 1B 5A 2C"
    --HOD_ID = "00 00 00 00"
    FRM_ID = "66 46 44 8A"
    RRM_ID = "66 46 44 8A"
    LIV_ID = "87 A5 EC 44"
    PRF_ID = "91 21 38 5E"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>943</ID>
          <Description>"CHALLENGER 71 59 43 9F D9 TIER 5"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "59 43 9F D9"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    --BDK_ID = "00 00 00 00"
    --SPL_ID = "A1 61 17 D2"
    --EXH_ID = "00 00 00 00"
    --HOD_ID = "00 00 00 00"
    --FRM_ID = "90 E4 C4 56"
    --RRM_ID = "90 E4 C4 56"
    LIV_ID = "C4 AF 4A F8"
    PRF_ID = "91 21 38 5E"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1040</ID>
          <Description>"CHALLENGER 71 1013798201"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "39 55 6D 3C"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "AB 91 F5 40"
    --SPL_ID = "A1 61 17 D2"
    EXH_ID = "08 7B 63 F7"
    HOD_ID = "2E 77 AF 43"
    FRM_ID = "28 69 86 BE"
    RRM_ID = "CB 90 8A 64"
    LIV_ID = "E3 61 39 55"
    PRF_ID = "AD 2C AA 1F"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1041</ID>
          <Description>"CHALLENGER 71 132446852"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "84 FA E4 07"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "69 92 F5 40"
    --SPL_ID = "A1 61 17 D2"
    EXH_ID = "08 7B 63 F7"
    HOD_ID = "00 00 00 00"
    FRM_ID = "28 69 86 BE"
    RRM_ID = "CB 90 8A 64"
    LIV_ID = "03 16 C4 F2"
    PRF_ID = "AD 2C AA 1F"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1042</ID>
          <Description>"CHALLENGER 71 1161287153"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "F1 D5 37 45"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "AB 91 F5 40"
    SPL_ID = "00 00 00 00"
    EXH_ID = "08 7B 63 F7"
    HOD_ID = "2E 77 AF 43"
    FRM_ID = "28 69 86 BE"
    RRM_ID = "CB 90 8A 64"
    LIV_ID = "97 B0 15 22"
    PRF_ID = "AD 2C AA 1F"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1043</ID>
          <Description>"CHALLENGER 71 1894368909 TIER 5"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "8D C6 E9 70"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "AB 91 F5 40"
    SPL_ID = "00 00 00 00"
    EXH_ID = "08 7B 63 F7"
    HOD_ID = "2E 77 AF 43"
    FRM_ID = "FD C8 BE 89"
    RRM_ID = "CB 90 8A 64"
    LIV_ID = "D7 05 98 F1"
    PRF_ID = "91 21 38 5E"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1044</ID>
          <Description>"CHALLENGER 71 3481124691"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "53 BF 7D CF"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "69 92 F5 40"
    SPL_ID = "00 00 00 00"
    EXH_ID = "08 7B 63 F7"
    HOD_ID = "00 00 00 00"
    FRM_ID = "28 69 86 BE"
    RRM_ID = "CB 90 8A 64"
    LIV_ID = "17 0E 78 E1"
    PRF_ID = "AD 2C AA 1F"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1045</ID>
          <Description>"CHALLENGER 71 1350671612"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "FC 9C 81 50"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "69 92 F5 40"
    SPL_ID = "00 00 00 00"
    EXH_ID = "00 00 00 00"
    HOD_ID = "00 00 00 00"
    FRM_ID = "28 69 86 BE"
    RRM_ID = "CB 90 8A 64"
    LIV_ID = "03 30 22 28"
    PRF_ID = "AD 2C AA 1F"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1046</ID>
          <Description>"SRT8 98 2D FB 96"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "98 2D FB 96"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "5C A0 90 80"
    --SPL_ID = "00 00 00 00"
    EXH_ID = "00 00 00 00"
    HOD_ID = "8D 30 59 7B"
    FRM_ID = "E7 17 01 DF"
    RRM_ID = "E7 17 01 DF"
    LIV_ID = "55 DC 59 21"
    PRF_ID = "63 8D 8E CC"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1047</ID>
          <Description>"FORD GT FC 44 E7 AD TIER 5"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "FC 44 E7 AD"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "66 E4 FD A8"
    SPL_ID = "4B AB 1F 88"
    EXH_ID = "4A F0 A3 50"
    --HOD_ID = "8D 30 59 7B"
    FRM_ID = "E5 99 B0 BF"
    RRM_ID = "E7 99 B0 BF"
    LIV_ID = "17 0E 78 E1"
    PRF_ID = "C0 FA 63 8F"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1048</ID>
          <Description>"MUSTANG BOSS 12 FB A3 67 A4 TIER 5"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "FB A3 67 A4"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "C9 59 50 4E"
    --SPL_ID = "4C AB 1F 88"
    EXH_ID = "4D 76 5B 69"
    --HOD_ID = "8D 30 59 7B"
    FRM_ID = "D2 7C 0B D0"
    RRM_ID = "D2 7C 0B D0"
    LIV_ID = "D5 C0 0E 35"
    PRF_ID = "9C 3D 18 F1"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>945</ID>
          <Description>"MUSTANG RTR 69 05 F2 DE 5F"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "05 F2 DE 5F"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    --BDK_ID = "00 00 00 00"
    --SPL_ID = "A1 61 17 D2"
    --EXH_ID = "EB 45 11 77"
    --HOD_ID = "00 00 00 00"
    FRM_ID = "7D 15 49 B2"
    RRM_ID = "E6 28 64 7C"
    LIV_ID = "E3 61 39 55"
    PRF_ID = "5A 35 E3 7D" --E6 87 8B 2D

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1049</ID>
          <Description>"MUSTANG RTR 12 B6 0C 9C 9A"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "B6 0C 9C 9A"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "00 00 00 00"
    --SPL_ID = "48 A8 48 1B"
    --EXH_ID = "4C 76 5B 69"
    --HOD_ID = "8D 30 59 7B"
    --FRM_ID = "D2 7C 0B D0"
    --RRM_ID = "D2 7C 0B D0"
    LIV_ID = "57 13 70 7C"
    --PRF_ID = "9C 3D 18 F1"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1050</ID>
          <Description>"VENOM A8 3C 53 57"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "A8 3C 53 57"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "00 00 00 00"
    --SPL_ID = "48 A8 48 1B"
    --EXH_ID = "4C 76 5B 69"
    --HOD_ID = "8D 30 59 7B"
    --FRM_ID = "D2 7C 0B D0"
    --RRM_ID = "D2 7C 0B D0"
    LIV_ID = "63 37 4D 9C"
    --PRF_ID = "9C 3D 18 F1"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>952</ID>
          <Description>"FIREBIRD 64 7C 00 58"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "64 7C 00 58"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "00 00 00 00"
    SPL_ID = "C2 FB 40 7D"
    EXH_ID = "A9 FD 86 67"
    HOD_ID = "2D 5C 61 DB"
    FRM_ID = "52 A3 07 AD"
    RRM_ID = "52 A3 07 AD"
    LIV_ID = "D7 AA B0 DE"
    PRF_ID = "AF 90 31 DD"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>953</ID>
          <Description>"DAYTONA 86 6D 7F CF TIER 5"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "86 6D 7F CF"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "DC 25 04 98"
    --SPL_ID = "C2 FB 40 7D"
    --EXH_ID = "A9 FD 86 67"
    --HOD_ID = "2D 5C 61 DB"
    FRM_ID = "A4 D5 19 40" --66 BD 5F 31
    RRM_ID = "A4 D5 19 40"
    LIV_ID = "55 DC 59 21"
    PRF_ID = "4D B2 08 21"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1051</ID>
          <Description>"SHELBY MUSTANG DC D0 A1 65"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
getLuaEngine().cbShowOnPrint.Checked=false
getLuaEngine().hide()

function DEC_HEX(IN)
    local B,K,OUT,I,D=16,"0123456789ABCDEF","",0
    while IN&gt;0 do
        I=I+1
        IN,D=math.floor(IN/B),math.mod(IN,B)+1
        OUT=string.sub(K,D,D)..OUT
    end
    return OUT
end

function Split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end

function AOBtoDEC(str)
    split_string = Split(str, " ")
    local hex = ""
    for i=1,#split_string do
        hex = hex .. split_string[#split_string+1-i]
    end
    return(tonumber(hex,16))
end

function hexByteString(addressdec)
    local decByteString = table.concat(readBytes(addressdec,4,true),' ')
    local hexByteS = decByteString:gsub('%S+',function (c) return string.format('%02X',c) end)
    return(hexByteS)
end

local addressStart = "F0000000" --First Vehicle of Customization Template
local addressEnd = "FFFFFFFF" --Last Vehicle of Customization Template

[ENABLE]

local currentCar = "DC D0 A1 65"

local AOB = "02 00 00 31 56 4F CC 99 "..currentCar.." 56 4F CC 99"
local MyMemscan = createMemScan()
memscan_returnOnlyOneResult(MyMemscan, true)
memscan_firstScan(MyMemscan,soExactValue,vtByteArray,0,AOB,"",addressStart,addressEnd,"*X*W*C",0,"",true,true,false,false)
memscan_waitTillDone(MyMemscan)
local address = memscan_getOnlyResult(MyMemscan) --Returns the address in integer format

if address ~= nil then
    local bodykit = address + 0x18
    local spoiler = address + 0x28
    local exhaust = address + 0x30
    local hood = address + 0x38
    local frontrims = address + 0x40
    local rearrims = address + 0x48
    local livery = address + 0x50
    local performance = address + 0x60

    --Variable Declaration
    local BDK_ID = hexByteString(bodykit)
    local SPL_ID = hexByteString(spoiler)
    local EXH_ID = hexByteString(exhaust)
    local HOD_ID = hexByteString(hood)
    local FRM_ID = hexByteString(frontrims)
    local RRM_ID = hexByteString(rearrims)
    local LIV_ID = hexByteString(livery)
    local PRF_ID = hexByteString(performance)

    --Custom Values [Comment if not set]
    BDK_ID = "00 00 00 00"
    SPL_ID = "00 00 00 00"
    --EXH_ID = "A9 FD 86 67"
    --HOD_ID = "2D 5C 61 DB"
    FRM_ID = "00 00 00 00"
    RRM_ID = "00 00 00 00"
    LIV_ID = "3C 57 37 89"
    PRF_ID = "DF 7F 94 9D"

    writeInteger(bodykit,AOBtoDEC(BDK_ID))
    writeInteger(spoiler,AOBtoDEC(SPL_ID))
    writeInteger(exhaust,AOBtoDEC(EXH_ID))
    writeInteger(hood,AOBtoDEC(HOD_ID))
    writeInteger(frontrims,AOBtoDEC(FRM_ID))
    writeInteger(rearrims,AOBtoDEC(RRM_ID))
    writeInteger(livery,AOBtoDEC(LIV_ID))
    writeInteger(performance,AOBtoDEC(PRF_ID))

    print "Customization Complete!"
end

[DISABLE]

</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>1063</ID>
      <Description>"NOS Disable"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
mov [esi+000000B5],0

exit:
jmp returnhere

"Need For Speed The Run.exe"+29B064:
jmp newmem
nop
returnhere:

[DISABLE]
dealloc(newmem)
"Need For Speed The Run.exe"+29B064:
mov [esi+000000B5],bl
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Toggle Activation</Action>
          <Keys>
            <Key>103</Key>
          </Keys>
          <ID>0</ID>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>1064</ID>
      <Description>"Drafting Disable"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
mov [esi+000002B0],0

originalcode:
//movss [esi+000002B0],xmm0

exit:
jmp returnhere

"Need For Speed The Run.exe"+29B65C:
jmp newmem
nop 3
returnhere:

[DISABLE]
dealloc(newmem)
"Need For Speed The Run.exe"+29B65C:
movss [esi+000002B0],xmm0
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Toggle Activation</Action>
          <Keys>
            <Key>103</Key>
          </Keys>
          <ID>0</ID>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
</CheatTable>
